github_dir = paste0(c('/Users/zackoyafuso/Documents',
'C:/Users/Zack Oyafuso/Documents',
'C:/Users/zack.oyafuso/Work',
'C:/Users/zack.oyafuso/Work')[which_machine],
'/GitHub/MS_OM_GoA/Optimum_Allocation/')
output_wd = paste0(c('/Users/zackoyafuso/Documents/',
'C:/Users/Zack Oyafuso/Documents/',
'C:/Users/zack.oyafuso/Work/',
'C:/Users/zack.oyafuso/Work/' )[which_machine],
"GitHub/MS_OM_GoA/Optimum_Allocation/model_", modelno,
optimization_type, '/Flexible_Optimization/')
###########################
## Load Data
###########################
load(paste0(github_dir, "model_", modelno,
optimization_type,'/optimization_data_model_',
modelno, '.RData'))
github_dir = paste0(c('/Users/zackoyafuso/Documents',
'C:/Users/Zack Oyafuso/Documents',
'C:/Users/zack.oyafuso/Work',
'C:/Users/zack.oyafuso/Work')[which_machine],
'/GitHub/Optimal_Allocation_GoA/')
github_dir
###########################
## Load Data
###########################
load(paste0(github_dir, 'data/optimization_data.RData'))
stratas = c(5,10,15,20,25,30,40,50,60)
NStrata = length(stratas)
ns = 15
spp_cv = samplesizes = list()
for(istrata in c(1:4, 9)){
temp_strata = paste0('Str_', stratas[istrata])
runs = grep(x = dir(output_wd, full.names = T),
pattern = paste0('Thres10Str', stratas[istrata]),
value = T)
nruns = length(runs)
for(irun in 1:nruns){
load(paste0(output_wd, 'Thres10Str', stratas[istrata], 'Run',
irun, '/result_list.RData')
)
samplesizes[[temp_strata]]$n = c(samplesizes[[temp_strata]]$n, result_list$n)
spp_cv[[temp_strata]]$cv = rbind(spp_cv[[temp_strata]]$cv, result_list[[3]])
}
}
dir(github_dir)
temp_strata = paste0('Str_', stratas[istrata])
runs = grep(x = dir(github_dir, 'Spatiotemporal_Optimization_Scheme2/',
full.names = T),
pattern = paste0('Thres10Str', stratas[istrata]),
value = T)
nruns = length(runs)
for(irun in 1:nruns){
load(paste0(github_dir, 'Spatiotemporal_Optimization_Scheme2/Thres10Str',
stratas[istrata], 'Run', irun, '/result_list.RData')
)
samplesizes[[temp_strata]]$n = c(samplesizes[[temp_strata]]$n, result_list$n)
spp_cv[[temp_strata]]$cv = rbind(spp_cv[[temp_strata]]$cv, result_list[[3]])
}
paste0(github_dir, 'Spatiotemporal_Optimization_Scheme2/Thres10Str',
stratas[istrata], 'Run', irun, '/result_list.RData'
)
temp_strata = paste0('Str_', stratas[istrata])
runs = grep(x = dir(github_dir, 'Spatiotemporal_Optimization_Scheme2/',
full.names = T),
pattern = paste0('Thres10Str', stratas[istrata]),
value = T)
runs
github_dir
dir(github_dir, 'Spatiotemporal_Optimization_Scheme2/',
full.names = T)
dir(github_dir)
dir(github_dir, 'Spatiotemporal_Optimization_Scheme2/',
full.names = T)
github_dir
temp_strata = paste0('Str_', stratas[istrata])
runs = grep(x = dir(paste0(github_dir, 'Spatiotemporal_Optimization_Scheme2/'),
full.names = T),
pattern = paste0('Thres10Str', stratas[istrata]),
value = T)
runs
nruns = length(runs)
for(irun in 1:nruns){
load(paste0(github_dir, 'Spatiotemporal_Optimization_Scheme2/Thres10Str',
stratas[istrata], 'Run', irun, '/result_list.RData') )
samplesizes[[temp_strata]]$n = c(samplesizes[[temp_strata]]$n, result_list$n)
spp_cv[[temp_strata]]$cv = rbind(spp_cv[[temp_strata]]$cv, result_list[[3]])
}
stratas = c(5,10,15,20,25,30,40,50,60)
NStrata = length(stratas)
ns = 15
spp_cv = samplesizes = list()
for(istrata in c(1:4, 9)){
temp_strata = paste0('Str_', stratas[istrata])
runs = grep(x = dir(paste0(github_dir, 'Spatiotemporal_Optimization_Scheme2/'),
full.names = T),
pattern = paste0('Thres10Str', stratas[istrata]),
value = T)
nruns = length(runs)
for(irun in 1:nruns){
load(paste0(github_dir, 'Spatiotemporal_Optimization_Scheme2/Thres10Str',
stratas[istrata], 'Run', irun, '/result_list.RData') )
samplesizes[[temp_strata]]$n = c(samplesizes[[temp_strata]]$n, result_list$n)
spp_cv[[temp_strata]]$cv = rbind(spp_cv[[temp_strata]]$cv, result_list[[3]])
}
}
istrata = 'Str_10'
nruns = length(samplesizes[[istrata]]$n)
spp_order = order(spp_cv[[istrata]]$cv[nruns,])
run_order = order(samplesizes[[istrata]]$n)
par(mar = c(5,5,2,1), mfrow = c(1,2))
matplot( t(spp_cv[[istrata]]$cv[,spp_order]),
type = 'l', lty = 1, las = 1, xlab = 'Species', ylim = c(0,0.3),
ylab = 'Expected Spatiotemporal CV',
col = 'black')
abline(h = 0.1, col = 'darkgrey', lty = 'dashed')
text(x = 1:ns, y = t(spp_cv[[istrata]]$cv[,spp_order]),
rep(paste(1:nruns),each = ns ))
plot(samplesizes[[istrata]]$n[run_order], type = 'l', cex = 2,
xlab = 'Run Number', ylab = 'Total Sample Size', las = 1, ylim = c(0,850))
abline(h = c(280, 550, 820), col = 'darkgrey', lty = 'dashed')
text(1:nruns, samplesizes[[istrata]]$n[run_order], paste(1:nruns))
istrata = 'Str_20'
nruns = length(samplesizes[[istrata]]$n)
spp_order = order(spp_cv[[istrata]]$cv[nruns,])
run_order = order(samplesizes[[istrata]]$n)
par(mar = c(5,5,2,1), mfrow = c(1,2))
matplot( t(spp_cv[[istrata]]$cv[,spp_order]),
type = 'l', lty = 1, las = 1, xlab = 'Species', ylim = c(0,0.3),
ylab = 'Expected Spatiotemporal CV',
col = 'black')
abline(h = 0.1, col = 'darkgrey', lty = 'dashed')
text(x = 1:ns, y = t(spp_cv[[istrata]]$cv[,spp_order]),
rep(paste(1:nruns),each = ns ))
plot(samplesizes[[istrata]]$n[run_order], type = 'l', cex = 2,
xlab = 'Run Number', ylab = 'Total Sample Size', las = 1, ylim = c(0,850))
abline(h = c(280, 550, 820), col = 'darkgrey', lty = 'dashed')
text(1:nruns, samplesizes[[istrata]]$n[run_order], paste(1:nruns))
######################################
## Simulate Stratified Random Sampling according to the optimized
## stratifications for the Flexible Spatiotemporal Optimization
######################################
rm(list = ls())
###############################
## Set up directories
###############################
which_machine = c('Zack_MAC'=1, 'Zack_PC' =2, 'Zack_GI_PC'=3)[1]
github_dir = paste0(c('/Users/zackoyafuso/Documents/',
'C:/Users/Zack Oyafuso/Documents/',
'C:/Users/zack.oyafuso/Work/',
'C:/Users/zack.oyafuso/Work/' )[which_machine],
"GitHub/Optimal_Allocation_GoA/")
rm(list = ls())
###############################
## Import required packages
###############################
library(sp); library(RColorBrewer); library(raster)
###############################
## Set up directories
###############################
which_machine = c('Zack_MAC'=1, 'Zack_PC' =2, 'Zack_GI_PC'=3)[1]
github_dir = paste0(c('/Users/zackoyafuso/Documents',
'C:/Users/Zack Oyafuso/Documents',
'C:/Users/zack.oyafuso/Work',
'C:/Users/zack.oyafuso/Work')[which_machine],
'/GitHub/Optimal_Allocation_GoA/')
###########################
## Load Data
###########################
load(paste0(github_dir, 'data/optimization_data.RData'))
######
stratas = c(5,10,15,20,25,30,40,50,60)
Nstrata = length(stratas)
settings = data.frame()
strata_list = list()
res_df = data.frame(id = 1:N)
for(istrata in c(1:Nstrata)){
temp_strata = paste0('Str_', stratas[istrata])
runs = grep(x = dir(paste0(github_dir, 'Spatiotemporal_Optimization_Scheme2'),
full.names = T),
pattern = paste0('Thres10Str', stratas[istrata]),
value = T)
nruns = length(runs)
for(irun in 1:nruns){
temp_file = paste0(github_dir,
'Spatiotemporal_Optimization_Scheme2/Thres10Str',
stratas[istrata], 'Run', irun, '/result_list.RData')
if(file.exists(temp_file)){
load(temp_file)
spp_cvs = result_list[[3]]
colnames(spp_cvs) = paste0('CV_', 1:ns)
rownames(spp_cvs) = NULL
settings = rbind(settings,
cbind(data.frame(nstrata = stratas[istrata],
n = result_list$n),
spp_cvs))
strata_list = c(strata_list, list(result_list[[2]]))
res_df = cbind(res_df, result_list[[1]]$indices$X1)
}
}
}
settings$id = 1:nrow(settings)
names(res_df)[-1] = paste0('sol_', 1:nrow(settings))
########################
## Save
########################
save(list = c('res_df', 'settings', 'strata_list'),
file = paste0(github_dir, 'Spatiotemporal_Optimization_Scheme2/',
'spatiotemporal_Flexible_optimization_results.RData'))
settings
######################################
## Simulate Stratified Random Sampling according to the optimized
## stratifications for the Spatiotemporal Optimization
######################################
rm(list = ls())
###############################
## Set up directories
###############################
which_machine = c('Zack_MAC'=1, 'Zack_PC' =2, 'Zack_GI_PC'=3)[1]
github_dir = paste0(c('/Users/zackoyafuso/Documents/',
'C:/Users/Zack Oyafuso/Documents/',
'C:/Users/zack.oyafuso/Work/',
'C:/Users/zack.oyafuso/Work/' )[which_machine],
"GitHub/Optimal_Allocation_GoA/")
#########################
## Load predicted density and optimization results
#########################
#########################
## Load predicted density and optimization results
#########################
load(paste0(github_dir, 'Spatiotemporal_Optimization_Scheme2/',
'spatiotemporal_Flexible_optimization_results.RData'))
load(paste0(github_dir, 'data/optimization_data.RData'))
#Constants
ids = as.numeric(rownames(frame))
stratas = c(5,10,15,20,30,40,50,60)
Nstrata = length(stratas)
Niters = 1000
###########################
## Result Objects
###########################
sim_mean = sim_cv = array(dim = c(NTime, ns, Nstrata, 3, Niters),
dimnames = list(paste0('Year_', 1:NTime),
sci_names,
NULL,
NULL))
Nstrata
##########################
## Simulating each optimization
##########################
settings$id = 1:nrow(settings)
istrata = isample = 1
#Load optimization data
sub_settings = subset(settings, nstrata == stratas[istrata])
sub_settings
##########################
## Simulating each optimization
##########################
settings$id = 1:nrow(settings)
#Load optimization data
sub_settings = subset(settings, nstrata == stratas[istrata])
sub_settings
temp_run = sub_settings$id[which.min(abs(sub_settings$n-
c(280,550,820)[isample]))]
temp_run
#Load optimization data
sub_settings = subset(settings, nstrata == stratas[istrata])
temp_run = sub_settings$id[which.min(abs(sub_settings$n-
c(280,550,820)[isample]))]
strata_allocation = strata_list[[temp_run]]$Allocation
stratapop = strata_list[[temp_run]]$Population
stratanos = res_df[,1+temp_run]
#Remove strata with only 1 sample allocated
str_idx = strata_allocation > 1
str_idx
stratapop
strata_allocation
for(iyear in 1:NTime){
for(iter in 1:Niters){
#Sample based on the stratification allocations
sample_vec = c()
for(i in which(str_idx == T) ){
available_cells = which(stratanos == i)
sample_cells = sample(x = available_cells,
size = strata_allocation[i],
replace = F)
sample_vec = c(sample_vec, sample_cells)
}
#Organize sample set and total number of samples
sample_vec = sort(sample_vec)
n = length(sample_vec)
stratano_samp =  stratanos[sample_vec]
sample_df = subset(frame_raw, year == iyear)[sample_vec,]
#Calculate Stratum Mean Density and Variance
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep=',', collapse=''),'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = mean)")
sample_mean = eval(parse(text = stmt))[,-1]
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep=',', collapse=''), 'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = var)")
sample_var = eval(parse(text = stmt))[,-1]
#How many samples are allocated in each strata
#How many sampling units are in each strata
Wh = (stratapop/N)[str_idx]
wh = (strata_allocation/stratapop)[str_idx]
#Calculate Total Abundance and Variance, calculate CV
SRS_var = colSums(sweep(x = sample_var, MARGIN = 1,
STATS = (Wh)^2*(1-wh)/
strata_allocation[str_idx],
FUN = '*'))
SRS_mean = colSums(sweep(x = sample_mean, MARGIN = 1,
STATS = Wh,
FUN = '*'))
strata_cv = sqrt(SRS_var) / SRS_mean
#Record mean and CV values
sim_mean[paste0('Year_',iyear),,istrata,isample,iter] = SRS_mean
sim_cv[paste0('Year_',iyear),,istrata,isample,iter] = strata_cv
if(iter%%100 == 0){
print(paste0('Finished with: Iteration ', iter, ', ', 'Year ', iyear,
', ', stratas[istrata], ' Strata and ', isample, ' Boat'))
}
}
}
###########################
## Result Objects
###########################
sim_mean = sim_cv = array(dim = c(NTime, ns, Nstrata, 3, Niters),
dimnames = list(paste0('Year_', 1:NTime),
sci_names,
NULL,
NULL))
##########################
## Simulating each optimization
##########################
settings$id = 1:nrow(settings)
for(istrata in c(1:3,9)){
for(isample in 1:3) {
#Load optimization data
sub_settings = subset(settings, nstrata == stratas[istrata])
temp_run = sub_settings$id[which.min(abs(sub_settings$n-
c(280,550,820)[isample]))]
strata_allocation = strata_list[[temp_run]]$Allocation
stratapop = strata_list[[temp_run]]$Population
stratanos = res_df[,1+temp_run]
#Remove strata with only 1 sample allocated
str_idx = strata_allocation > 1
for(iyear in 1:NTime){
for(iter in 1:Niters){
#Sample based on the stratification allocations
sample_vec = c()
for(i in which(str_idx == T) ){
available_cells = which(stratanos == i)
sample_cells = sample(x = available_cells,
size = strata_allocation[i],
replace = F)
sample_vec = c(sample_vec, sample_cells)
}
#Organize sample set and total number of samples
sample_vec = sort(sample_vec)
n = length(sample_vec)
stratano_samp =  stratanos[sample_vec]
sample_df = subset(frame_raw, year == iyear)[sample_vec,]
#Calculate Stratum Mean Density and Variance
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep=',', collapse=''),'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = mean)")
sample_mean = eval(parse(text = stmt))[,-1]
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep=',', collapse=''), 'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = var)")
sample_var = eval(parse(text = stmt))[,-1]
#How many samples are allocated in each strata
#How many sampling units are in each strata
Wh = (stratapop/N)[str_idx]
wh = (strata_allocation/stratapop)[str_idx]
#Calculate Total Abundance and Variance, calculate CV
SRS_var = colSums(sweep(x = sample_var, MARGIN = 1,
STATS = (Wh)^2*(1-wh)/
strata_allocation[str_idx],
FUN = '*'))
SRS_mean = colSums(sweep(x = sample_mean, MARGIN = 1,
STATS = Wh,
FUN = '*'))
strata_cv = sqrt(SRS_var) / SRS_mean
#Record mean and CV values
sim_mean[paste0('Year_',iyear),,istrata,isample,iter] = SRS_mean
sim_cv[paste0('Year_',iyear),,istrata,isample,iter] = strata_cv
if(iter%%100 == 0){
print(paste0('Finished with: Iteration ', iter, ', ', 'Year ', iyear,
', ', stratas[istrata], ' Strata and ', isample, ' Boat'))
}
}
}
}
}
istrata
isample
#Load optimization data
sub_settings = subset(settings, nstrata == stratas[istrata])
sub_settings
settings
stratas
stratas[istrata]
stratas
istrata
for(istrata in c(8)){
for(isample in 1:3) {
#Load optimization data
sub_settings = subset(settings, nstrata == stratas[istrata])
temp_run = sub_settings$id[which.min(abs(sub_settings$n-
c(280,550,820)[isample]))]
strata_allocation = strata_list[[temp_run]]$Allocation
stratapop = strata_list[[temp_run]]$Population
stratanos = res_df[,1+temp_run]
#Remove strata with only 1 sample allocated
str_idx = strata_allocation > 1
for(iyear in 1:NTime){
for(iter in 1:Niters){
#Sample based on the stratification allocations
sample_vec = c()
for(i in which(str_idx == T) ){
available_cells = which(stratanos == i)
sample_cells = sample(x = available_cells,
size = strata_allocation[i],
replace = F)
sample_vec = c(sample_vec, sample_cells)
}
#Organize sample set and total number of samples
sample_vec = sort(sample_vec)
n = length(sample_vec)
stratano_samp =  stratanos[sample_vec]
sample_df = subset(frame_raw, year == iyear)[sample_vec,]
#Calculate Stratum Mean Density and Variance
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep=',', collapse=''),'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = mean)")
sample_mean = eval(parse(text = stmt))[,-1]
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep=',', collapse=''), 'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = var)")
sample_var = eval(parse(text = stmt))[,-1]
#How many samples are allocated in each strata
#How many sampling units are in each strata
Wh = (stratapop/N)[str_idx]
wh = (strata_allocation/stratapop)[str_idx]
#Calculate Total Abundance and Variance, calculate CV
SRS_var = colSums(sweep(x = sample_var, MARGIN = 1,
STATS = (Wh)^2*(1-wh)/
strata_allocation[str_idx],
FUN = '*'))
SRS_mean = colSums(sweep(x = sample_mean, MARGIN = 1,
STATS = Wh,
FUN = '*'))
strata_cv = sqrt(SRS_var) / SRS_mean
#Record mean and CV values
sim_mean[paste0('Year_',iyear),,istrata,isample,iter] = SRS_mean
sim_cv[paste0('Year_',iyear),,istrata,isample,iter] = strata_cv
if(iter%%100 == 0){
print(paste0('Finished with: Iteration ', iter, ', ', 'Year ', iyear,
', ', stratas[istrata], ' Strata and ', isample, ' Boat'))
}
}
}
}
}
#################################
## Simulation Metrics
#################################
#True CV, Cv of Cv, Rrmse of Cv
true_cv_array = rrmse_est_array = rrmse_cv_array =
array(dim = c(NTime, ns, Nstrata, 3),
dimnames = list(paste0('Year_', 1:NTime), sci_names, NULL, NULL ))
for(iyear in 1:NTime){
for(istrata in 1:Nstrata){
for(isample in 1:3){
for(spp in sci_names){
iter_est = sim_mean[paste0('Year_', iyear),spp,istrata,isample,]
iter_cv = sim_cv[paste0('Year_', iyear), spp, istrata,isample, ]
true_cv = sd(iter_est) / true_mean[iyear, spp]
true_cv_array[paste0('Year_', iyear),spp,istrata,isample] = true_cv
rrmse_cv_array[paste0('Year_', iyear), spp, istrata,isample] =
sqrt(mean((iter_cv-true_cv)^2)) / mean(iter_cv)
rrmse_est_array[paste0('Year_', iyear), spp, istrata,isample] =
sqrt(mean((iter_est-true_mean[iyear,spp])^2))/
true_mean[iyear,spp]
}
}
}
}
#######################
## Save results
#######################
for(ivar in  c('rrmse_est_array', 'rrmse_cv_array', 'true_cv_array',
'sim_mean', 'sim_cv')){
assign(x=paste0('STRS_', ivar), value = get(ivar))
}
save(file=paste0(github_dir,
'Spatiotemporal_Optimization_Scheme2/',
'STRS_Sim_Res_Spatiotemporal_Flexible.RData'),
list = c(paste0('STRS_', c('rrmse_est_array', 'rrmse_cv_array',
'true_cv_array', 'sim_mean', 'sim_cv')),
'Niters'))
true_cv_array[,15,1,]
boxplot(true_cv_array[,15,1,])
for(ispp in 1:ns) boxplot(true_cv_array[,ispp,1,])
par(mfrow = c(5,3))
for(ispp in 1:ns) boxplot(true_cv_array[,ispp,1,])
par(mfrow = c(5,3), mar = c(3,3,1,1))
for(ispp in 1:ns) boxplot(true_cv_array[,ispp,1,], las = 1)
for(ispp in 1:ns) boxplot(rrmse_cv_array[,ispp,1,], las = 1)
for(ispp in 1:ns) boxplot(rrmse_cv_array[,ispp,8,], las = 1)
