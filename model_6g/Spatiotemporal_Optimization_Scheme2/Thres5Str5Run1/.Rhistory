library(sp); library(RColorBrewer); library(raster)
###############################
## Set up directories
###############################
which_machine = c('Zack_MAC'=1, 'Zack_PC' =2, 'Zack_GI_PC'=3)[2]
SamplingStrata_dir = paste0(c('/Users/zackoyafuso/',
'C:/Users/Zack Oyafuso/',
'C:/Users/zack.oyafuso/')[which_machine],
'Downloads/SamplingStrata-master/R')
github_dir = paste0(c('/Users/zack.oyafuso/Documents',
'C:/Users/Zack Oyafuso/Documents',
'C:/Users/zack.oyafuso/Work',
'C:/Users/zack.oyafuso/Work')[which_machine],
'/GitHub/Optimal_Allocation_GoA/')
#########################
## Load functions from SamplingStrata packages into global environment
## Load modified buildStrataDF function if using spatiotemporal modification
#########################
for(ifile in dir(SamplingStrata_dir, full.names = T)) source(ifile)
source(paste0(github_dir, 'modified_functions/buildStrataDF_Zack.R'))
###########################
## Load Data
###########################
load(paste0(github_dir, 'data/optimization_data.RData'))
load(paste0(github_dir, 'data/Extrapolation_depths.RData'))
###########################
## Load Current CV Simulation
###########################
stratas = c(5,10,15,20,25,30,40,50,60)
ns = 15
creep_rate = 0.05
threshold = 0.05
SamplingStrata_dir
buildStrataDF
stratas = c(5,10,15,20,25,30,40,50,60)
ns = 15
creep_rate = 0.05
threshold = 0.05
############################
istrata = 1
Run = 1
CV_constraints = rep(.3, ns)
current_n = 0
#Create CV dataframe
cv = list()
for(spp in 1:ns)
cv[[paste0('CV',spp)]] = as.numeric(CV_constraints[spp])
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Spatiotemporal_Optimization_Scheme2/',
'Thres',threshold*100,'Str',stratas[istrata],'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 200,#ifelse(stratas[istrata] <= 20, 100, 150),
pops = 30,
elitism_rate = 0.1,
mut_chance = 1 / (stratas[istrata] + 1),
nStrata = stratas[istrata],
showPlot = T,
parallel = F,
writeFiles = T)
optimStrata
optimizeStrata2
optimizeStrata2
summaryStrata
expected_CV
expected_CV
load("C:/Users/Zack Oyafuso/Documents/GitHub/Optimal_Allocation_GoA/Spatiotemporal_Optimization_Scheme2/Thres5Str5Run1/result_list.RData")
result_list[[1]]
load("C:/Users/Zack Oyafuso/Documents/GitHub/Optimal_Allocation_GoA/Spatiotemporal_Optimization_Scheme2/Thres10Str5Run1/output/outstrata.txt")
load("C:/Users/Zack Oyafuso/Documents/GitHub/Optimal_Allocation_GoA/Spatiotemporal_Optimization_Scheme2/Thres5Str5Run1/result_list.RData")
result_list[[1]]
str(result_list[[1]])
str(result_list[[1]]$aggr_strata)
result_list[[1]]$aggr_strata
optimStrata
################################################
## Optimization Scheme Two: Flexible CV Constraints
################################################
rm(list = ls())
###############################
## Import required packages
###############################
library(sp); library(RColorBrewer); library(raster)
###############################
## Set up directories
###############################
which_machine = c('Zack_MAC'=1, 'Zack_PC' =2, 'Zack_GI_PC'=3)[2]
SamplingStrata_dir = paste0(c('/Users/zackoyafuso/',
'C:/Users/Zack Oyafuso/',
'C:/Users/zack.oyafuso/')[which_machine],
'Downloads/SamplingStrata-master/R')
github_dir = paste0(c('/Users/zack.oyafuso/Documents',
'C:/Users/Zack Oyafuso/Documents',
'C:/Users/zack.oyafuso/Work',
'C:/Users/zack.oyafuso/Work')[which_machine],
'/GitHub/Optimal_Allocation_GoA/')
#########################
## Load functions from SamplingStrata packages into global environment
## Load modified buildStrataDF function if using spatiotemporal modification
#########################
for(ifile in dir(SamplingStrata_dir, full.names = T)) source(ifile)
source(paste0(github_dir, 'modified_functions/buildStrataDF_Zack.R'))
###########################
## Load Data
###########################
load(paste0(github_dir, 'data/optimization_data.RData'))
load(paste0(github_dir, 'data/Extrapolation_depths.RData'))
###########################
## Load Current CV Simulation
###########################
stratas = c(5,10,15,20,25,30,40,50,60)
ns = 15
creep_rate = 0.05
threshold = 0.05
############################
optimStrata
optimStrata
optimizeStrata2
strataGenalg2
buildStrataDF()
buildStrataDF
head(frame_raw)
################################################
## Optimization Scheme Two: Flexible CV Constraints
################################################
rm(list = ls())
###############################
## Import required packages
###############################
library(sp); library(RColorBrewer); library(raster)
###############################
## Set up directories
###############################
which_machine = c('Zack_MAC'=1, 'Zack_PC' =2, 'Zack_GI_PC'=3)[2]
SamplingStrata_dir = paste0(c('/Users/zackoyafuso/',
'C:/Users/Zack Oyafuso/',
'C:/Users/zack.oyafuso/')[which_machine],
'Downloads/SamplingStrata-master/R')
github_dir = paste0(c('/Users/zack.oyafuso/Documents',
'C:/Users/Zack Oyafuso/Documents',
'C:/Users/zack.oyafuso/Work',
'C:/Users/zack.oyafuso/Work')[which_machine],
'/GitHub/Optimal_Allocation_GoA/')
#########################
## Load functions from SamplingStrata packages into global environment
## Load modified buildStrataDF function if using spatiotemporal modification
#########################
for(ifile in dir(SamplingStrata_dir, full.names = T)) source(ifile)
source(paste0(github_dir, 'modified_functions/buildStrataDF_Zack.R'))
###########################
## Load Data
###########################
load(paste0(github_dir, 'data/optimization_data.RData'))
load(paste0(github_dir, 'data/Extrapolation_depths.RData'))
###########################
## Load Current CV Simulation
###########################
stratas = c(5,10,15,20,25,30,40,50,60)
ns = 15
creep_rate = 0.05
threshold = 0.05
buildStrataDF()
buildStrataDF
dataset = frame
############ Zack #############
dataset_raw = frame_raw
############ Zack #############
model=NULL
progress=TRUE
verbose=TRUE
# stdev1 is for sampling data
stdev1 <- function(x, w) {
mx <- sum(x * w)/sum(w)
sqrt(sum(w * (x - mx)^2)/(sum(w) - 1))
}
# stdev2 is for population data
stdev2 <- function(x, w) {
mx <- sum(x * w)/sum(w)
sqrt(sum(w * (x - mx)^2)/(sum(w)))
}
# stdev3 is for spatial models (part I)
stdev3 <- function(Y, W, beta1, beta2) {
a <- as.matrix(t(c(beta1,beta2)))
b <- cov(cbind(Y, W))
c <- as.matrix(c(beta1,beta2))
sqrt (a %*% b %*% c)
}
# stdev4 is for spatial models (part II)
stdev4 <- function(df,var_eps,range,gamma,i) {
st <- paste("Y <- df$Y",i,sep="")
eval(parse(text=st))
dist <- sqrt((outer(df$LON,df$LON,"-"))^2+(outer(df$LAT,df$LAT,"-"))^2)
pred <- beta1*Y + beta2*W
var_ntimes <- rep(var_eps,nrow(df))
var_ntimes <- var_ntimes*Y^(2*gamma)
sum_couples_var <- as.matrix(outer(var_ntimes,var_ntimes,"+"))
# prod_couples_std <- as.matrix(outer(sqrt(var_ntimes),sqrt(var_ntimes),"*"))
prod_couples_std <- sqrt(as.matrix(outer(var_ntimes,var_ntimes, "*")))
spatial_autocovariance <- prod_couples_std * exp(-1*dist/(range+0.0000001))
D2<-sum_couples_var-2*spatial_autocovariance
sum(sum_couples_var) / (2*nrow(df)^2)
sum(2*spatial_autocovariance) / (2*nrow(df)^2)
sum(sum_couples_var-2*spatial_autocovariance) / (2*nrow(df)^2)
var2 <- sum(D2)/(2*nrow(df)^2)
sqrt (var2)
}
# cov1 is for spatial models (part III)
cov1 <- function(df,psill,range,Y,W,beta1,beta2) {
preds <- beta1 * Y + beta2 * W
dist <- sqrt((outer(df$LON, df$LON, "-"))^2 + (outer(df$LAT, df$LAT, "-"))^2)
std_eps_ntimes <- sqrt(rep(psill, nrow(df)))
v <- var(preds)
v <- ifelse(is.na(v),0,v)
std_pred_ntimes <- sqrt(rep(v,nrow(df)))
prod_couples_std <- as.matrix(outer(std_eps_ntimes,std_pred_ntimes ),"*")
spatial_autocovariance <- prod_couples_std * exp(-1 * dist/(range + 1e-07))
D2 <-  2 * spatial_autocovariance
var2 <- sum(D2)/(2 * nrow(df)^2)
sqrt(var2)
}
colnames(dataset) <- toupper(colnames(dataset))
colnames(dataset_raw) <- toupper(colnames(dataset_raw))
head(dataset)
str(dataset)
str(dataset_rw)
str(dataset_raw)
nvarX <- length(grep("X", names(dataset)))
nvarY <- length(grep("Y", names(dataset)))
nvarX
nvarY
if (length(grep("WEIGHT", names(dataset))) == 1) {
if (verbose == TRUE) {
cat("\nComputations are being done on sampling data\n")
}
stdev <- "stdev1"
}
if (length(grep("WEIGHT", names(dataset))) == 0) {
dataset$WEIGHT <- rep(1, nrow(dataset))
dataset_raw$WEIGHT = rep(1, nrow(dataset_raw))
stdev <- "stdev2"
if (verbose == TRUE) {
cat("\nComputations are being done on population data\n")
}
}
names(dataset)
head(dataset)
#---------------------------------------------------------
# Check the validity of the model
if (!is.null(model)) {
if (nrow(model) != nvarY) stop("A model for each Y variable must be specified")
for (i in (1:nrow(model))) {
if (!(model$type[i] %in% c("linear","loglinear","spatial"))) stop("Type of model for Y variable ",i,"misspecified")
if (is.na(model$beta[i])) stop("beta for Y variable ",i,"must be specified")
if (is.na(model$sig2[i])) stop("sig2 for Y variable ",i,"must be specified")
if (model$type[i] == "spatial") {
if (is.na(model$beta2[i])) stop("beta2 for Y variable ",i,"must be specified")
if (is.na(model$range[i])) stop("range for Y variable ",i,"must be specified")
if (is.null(dataset$LON) | is.null(dataset$LON) ) stop("Missing coordinates on sampling frame")
}
if (model$type[i] == "linear" & is.na(model$gamma[i])) stop("gamma for Y variable ",i,"must be specified")
}
}
#---------------------------------------------------------
dataset$DOMAINVALUE <- factor(dataset$DOMAINVALUE)
str(dataset)
############ Zack #############
dataset_raw$DOMAINVALUE = factor(dataset_raw$DOMAINVALUE)
# dataset$DOMAINVALUE <- droplevels(dataset$DOMAINVALUE)
numdom <- length(levels(dataset$DOMAINVALUE))
numdom
#    numdom <- length(unique(dataset$DOMAINVALUE))
stratatot <- NULL
# create progress bar
if (progress == TRUE) pb <- txtProgressBar(min = 0, max = numdom, style = 3)
############ Zack #############
##################################
## Change X1 values of dataset_raw based on the
## X1 values of the dataset
##################################
dataset_raw$X1 = dataset$X1[match(dataset_raw$ID, dataset$ID)]
dataset_raw$X2 = dataset$X2[match(dataset_raw$ID, dataset$ID)]
############ Zack #############
(levels(dataset$DOMAINVALUE))
for (d in (levels(dataset$DOMAINVALUE)) ) {}
d
# dom <- unique(dataset$DOMAINVALUE)[d]
# dom <- levels(as.factor(dataset$DOMAINVALUE))[d]
dom <- d
dom
domain <- dataset[dataset$DOMAINVALUE == dom, ]
str(domain)
############ Zack #############
domain_raw <- dataset_raw[dataset_raw$DOMAINVALUE == dom, ]
str(domain_raw)
############ Zack #############
listX <- NULL
namesX <- NULL
for (i in 1:nvarX) {
name <- paste("X", i, sep = "")
namesX <- cbind(namesX, name)
if (i < nvarX)
listX <- paste(listX, "domain$X", i, ",", sep = "") else listX <- paste(listX, "domain$X", i, sep = "")
}
listX
listM <- NULL
listS <- NULL
for (i in 1:nvarY) {
listM <- paste(listM, "M", i, ",", sep = "")
listS <- paste(listS, "S", i, ",", sep = "")
}
listM
listS
stmt <- paste("domain$STRATO <- as.factor(paste(", listX,
",sep='*'))", sep = "")
eval(parse(text = stmt))
str(domain)
############ Zack #############
listX <- NULL
namesX <- NULL
for (i in 1:nvarX) {
name <- paste("X", i, sep = "")
namesX <- cbind(namesX, name)
if (i < nvarX)
listX <- paste(listX, "domain_raw$X", i, ",", sep = "") else listX <- paste(listX, "domain_raw$X", i, sep = "")
}
stmt <- paste("domain_raw$STRATO <- as.factor(paste(", listX,
",sep='*'))", sep = "")
eval(parse(text = stmt))
############ Zack #############
if (!is.null(dataset$COST)) {
cost <- tapply(domain$WEIGHT * domain$COST,domain$STRATO,sum) / tapply(domain$WEIGHT,domain$STRATO,sum)
}
cost
i = 1
WEIGHT <- NULL
STRATO <- NULL
Y <- NULL
############ Zack #############
stmt <- paste("Y <- domain_raw$Y", i, "[!is.na(domain_raw$Y",
i, ")]", sep = "")
Y
eval(parse(text = stmt))
Y
W <- NULL
stmt <- paste("W <- domain_raw$W", i, "[!is.na(domain_raw$W",
i, ")]", sep = "")
eval(parse(text = stmt))
stmt <- paste("WEIGHT <- domain_raw$WEIGHT[!is.na(domain_raw$Y",
i, ")]", sep = "")
eval(parse(text = stmt))
stmt <- paste("STRATO <- domain_raw$STRATO[!is.na(domain_raw$Y",
i, ")]", sep = "")
STRATO
stmt <- paste("Y <- domain_raw$Y", i, "[!is.na(domain_raw$Y",
i, ")]", sep = "")
eval(parse(text = stmt))
W <- NULL
stmt <- paste("W <- domain_raw$W", i, "[!is.na(domain_raw$W",
i, ")]", sep = "")
eval(parse(text = stmt))
stmt <- paste("WEIGHT <- domain_raw$WEIGHT[!is.na(domain_raw$Y",
i, ")]", sep = "")
eval(parse(text = stmt))
stmt <- paste("STRATO <- domain_raw$STRATO[!is.na(domain_raw$Y",
i, ")]", sep = "")
############ Zack #############
eval(parse(text = stmt))
STRATO <- factor(STRATO)
STRATO
is.null(model)
stmt <- paste("M", i, " <- tapply(WEIGHT * Y,STRATO,sum) / tapply(WEIGHT,STRATO,sum)", sep = "")
eval(parse(text = stmt))
M1
############ Zack #############
samp_raw= NULL
############ Zack #############
stmt <- paste("samp <- domain[!is.na(domain$Y", i, "),]", sep = "")
eval(parse(text = stmt))
head(samp)
str(samp)
############ Zack #############
stmt <- paste("samp_raw <- domain_raw[!is.na(domain_raw$Y", i, "),]", sep = "")
eval(parse(text = stmt))
############ Zack #############
str(samp_raw)
l.split <- split(samp, samp$STRATO, drop = TRUE)
############ Zack #############
l.split_raw =split(samp_raw, samp_raw$STRATO, drop = TRUE)
str(l.split_raw)
l.split_raw =split(samp_raw, samp_raw$STRATO, drop = TRUE)
stmt <- paste("S", i, " <- sapply(l.split_raw, function(df,x,w) ",
stdev, "(df[,x],df[,w]), x='Y", i, "', w='WEIGHT')",
sep = "")
############ Zack #############
eval(parse(text = stmt))
S1
l.split.raw[[1]]
l.split_raw[[1]]
str(S1)
head(S1)
l.split_raw[[1]]$Y1
var(l.split_raw[[1]]$Y1)
sd(l.split_raw[[1]]$Y1)
stdev
stdev2
sddev(l.split_raw[[1]]$Y1)
stdev(l.split_raw[[1]]$Y1)
stdev2(l.split_raw[[1]]$Y1)
stdev2(l.split_raw[[1]]$Y1, l.split_raw[[1]]$WEIGHT)
stdev2
head(M1)
mean(l.split_raw[[1]]$Y1)
expected_CV
expected_CV
load("C:/Users/Zack Oyafuso/Documents/GitHub/Optimal_Allocation_GoA/Spatiotemporal_Optimization_Scheme2/Thres5Str5Run1/result_list.RData")
strata = result_list[[1]]2
strata = result_list[[1]][[2]]
strata
M_h <- S_h <- NULL
if (is.null(strata$SOLUZ)) stop("There is no allocation of units in strata")
ndom <- length(unique(strata$DOM1))
nvars <- (ncol(strata) - 6) / 2
cv <- matrix(NA,nrow=ndom,ncol=nvars)
ndom
nvars
cv
nvars <- (ncol(strata) - 6) / 2
nvars
result_list[[2]]
result_list[[3]]
result_list[[1]]
result_list[[1]][[1]]
result_list[[1]][[2]]
nvars <- 15
cv <- matrix(NA,nrow=ndom,ncol=nvars)
colnames(cv) <- paste("cv(Y",c(1:nvars),")",sep="")
rownames(cv) <- paste("DOM",c(1:ndom),sep="")
k<-0
cv
k
for (i in (as.numeric(levels(as.factor(strata$DOM1))))) {
k<-k+1
stratadom <- strata[strata$DOM1 == i,]
for (j in 1:nvars) {
n_h <- stratadom$SOLUZ
N_h <- stratadom$N
stmt <- paste("S_h <- stratadom$S",j,sep="")
eval(parse(text=stmt))
stmt <- paste("M_h <- stratadom$M",j,sep="")
eval(parse(text=stmt))
Y_h <- N_h * M_h
Var_h <- (N_h^2) * (1 - n_h/N_h) * ((S_h^2)/n_h)
CV <- sqrt(sum(Var_h)) / sum(Y_h)
cv[k,j] <- CV
}
}
cv <- round(cv,3)
cv
Y_h
M_h
N_h
Var_h <- (N_h^2) * (1 - n_h/N_h) * ((S_h^2)/n_h)
Var_h
S_h
Y_h
Var_h
sum(Var_h)
Var_h
N_h
Y_h
source('~/.active-rstudio-document', echo=TRUE)
N_h
M_h
N_h * M_h
S_h
M_h
j
N_h * M_h
sum(Var_h)
sqrt(sum(Var_h))
M_h
strata
stmt <- paste("M_h <- stratadom$M",j,sep="")
eval(parse(text=stmt))
stmt
stratadom
M_h
N_h
sum(N_h)
sum(Y_h)
Y_h
sqrt(sum(Var_h))
sum(Y_h)
result_list[[1]]
str(result_list[[1]])
str(result_list[[1]]$framenew)
str(result_list[[1]]$framenew$Y15)
aggregate(Y15 ~ STATO, data = result_list[[1]]$framenew, FUN = mean)
aggregate(Y15 ~ STRATO, data = result_list[[1]]$framenew, FUN = mean)
aggregate(Y15 ~ STRATO, data = result_list[[1]]$framenew, FUN = length)
str(result_list[[1]]$indices)
str(result_list[[1]]$aggr_strata)
str(result_list[[1]]$framenew)
head(result_list[[1]]$framenew)
head(frame)
