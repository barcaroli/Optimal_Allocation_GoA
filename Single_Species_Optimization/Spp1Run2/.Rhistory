parallel = F,
writeFiles = T)
CV_constraints = 0.025
current_n = 0
#Create CV dataframe
cv = list()
cv[[paste0('CV',1)]] = CV_constraints
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 100,#ifelse(stratas[istrata] <= 20, 100, 150),
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
CV_constraints = 0.05
current_n = 0
#Create CV dataframe
cv = list()
cv[[paste0('CV',1)]] = CV_constraints
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 100,#ifelse(stratas[istrata] <= 20, 100, 150),
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
CV_constraints = 0.1
current_n = 0
#Create CV dataframe
cv = list()
cv[[paste0('CV',1)]] = CV_constraints
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 100,#ifelse(stratas[istrata] <= 20, 100, 150),
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
#Initial Condition
Run = 1
CV_constraints = 0.08
current_n = 0
#Create CV dataframe
cv = list()
cv[[paste0('CV',1)]] = CV_constraints
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 100,#ifelse(stratas[istrata] <= 20, 100, 150),
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
#Initial Condition
Run = 1
CV_constraints = 0.07
current_n = 0
#Create CV dataframe
cv = list()
cv[[paste0('CV',1)]] = CV_constraints
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 100,#ifelse(stratas[istrata] <= 20, 100, 150),
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
#Initial Condition
Run = 1
CV_constraints = 0.08
current_n = 0
#Create CV dataframe
cv = list()
cv[[paste0('CV',1)]] = CV_constraints
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 100,#ifelse(stratas[istrata] <= 20, 100, 150),
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
sum_stats = summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
#Plot Solution
goa = SpatialPointsDataFrame(
coords = Extrapolation_depths[,c('E_km', 'N_km')],
data = data.frame(Str_no = solution$framenew$STRATO) )
goa_ras = raster(goa, resolution = 5)
goa_ras =rasterize(x = goa, y = goa_ras, field = 'Str_no')
plot(goa_ras, axes = F,
col = terrain.colors(10)[sample(10)])
#Save Output
CV_constraints = expected_CV(strata = solution$aggr_strata)
current_n = sum(sum_stats$Allocation)
result_list = list(solution, sum_stats, CV_constraints, n = current_n)
save(list = 'result_list', file = 'result_list.RData')
#Set up next run
Run = Run + 1
CV_constraints = max(threshold, CV_constraints * (1 - creep_rate) )
#Create CV dataframe
cv = list()
for(spp in 1:1)
cv[[paste0('CV',1)]] = as.numeric(CV_constraints)
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
############################
## Optimizer
############################
par(mfrow = c(6,6), mar = c(2,2,0,0))
ispp = 1
frame = master_frame[,c('id', 'X1', 'X2', paste0('Y',ispp), 'domainvalue')]
frame_raw = master_frame_raw[,c('id', 'X1', 'X2',
paste0('Y',ispp), 'domainvalue')]
names(frame) = names(frame_raw) = c('id', 'X1', 'X2', 'Y1', 'domainvalue')
#Initial Condition
Run = 1
CV_constraints = 0.08
current_n = 0
#Create CV dataframe
cv = list()
cv[[paste0('CV',1)]] = CV_constraints
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 100,#ifelse(stratas[istrata] <= 20, 100, 150),
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
#Initial Condition
Run = 1
CV_constraints = 0.07
current_n = 0
#Create CV dataframe
cv = list()
cv[[paste0('CV',1)]] = CV_constraints
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 100,#ifelse(stratas[istrata] <= 20, 100, 150),
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
CV_constraints = 0.065
current_n = 0
#Create CV dataframe
cv = list()
cv[[paste0('CV',1)]] = CV_constraints
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 50,#ifelse(stratas[istrata] <= 20, 100, 150),
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
#Initial Condition
Run = 1
CV_constraints = 0.05
current_n = 0
#Create CV dataframe
cv = list()
cv[[paste0('CV',1)]] = CV_constraints
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 50,
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
CV_constraints = 0.045
current_n = 0
#Create CV dataframe
cv = list()
cv[[paste0('CV',1)]] = CV_constraints
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 50,
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
#Initial Condition
Run = 1
CV_constraints = 0.055
current_n = 0
#Create CV dataframe
cv = list()
cv[[paste0('CV',1)]] = CV_constraints
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 50,
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
CV_constraints = 0.05
current_n = 0
#Create CV dataframe
cv = list()
cv[[paste0('CV',1)]] = CV_constraints
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 50,
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
par(mfrow = c(6,6), mar = c(2,2,0,0))
ispp = 1
frame = master_frame[,c('id', 'X1', 'X2', paste0('Y',ispp), 'domainvalue')]
frame_raw = master_frame_raw[,c('id', 'X1', 'X2',
paste0('Y',ispp), 'domainvalue')]
names(frame) = names(frame_raw) = c('id', 'X1', 'X2', 'Y1', 'domainvalue')
#Initial Condition
Run = 1
CV_constraints = 0.0525
current_n = 0
#Create CV dataframe
cv = list()
cv[[paste0('CV',1)]] = CV_constraints
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 50,
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
Run = 1
CV_constraints = 0.0475
current_n = 0
#Create CV dataframe
cv = list()
cv[[paste0('CV',1)]] = CV_constraints
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 50,
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
sum_stats = summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
#Plot Solution
goa = SpatialPointsDataFrame(
coords = Extrapolation_depths[,c('E_km', 'N_km')],
data = data.frame(Str_no = solution$framenew$STRATO) )
goa_ras = raster(goa, resolution = 5)
goa_ras =rasterize(x = goa, y = goa_ras, field = 'Str_no')
plot(goa_ras, axes = F,
col = terrain.colors(10)[sample(10)])
#Save Output
CV_constraints = expected_CV(strata = solution$aggr_strata)
current_n = sum(sum_stats$Allocation)
result_list = list(solution, sum_stats, CV_constraints, n = current_n)
save(list = 'result_list', file = 'result_list.RData')
#Set up next run
Run = Run + 1
CV_constraints = max(threshold, CV_constraints * (1 - creep_rate) )
#Create CV dataframe
cv = list()
for(spp in 1:1)
cv[[paste0('CV',1)]] = as.numeric(CV_constraints)
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
cv
CV_constraints =  CV_constraints * (1 - creep_rate)
CV_constraints
CV_constraints =  CV_constraints * (1 - creep_rate)
CV_constraints
Run
while(current_n <= 820){
#Set wd for output files
temp_dir = paste0(github_dir, 'Single_Species_Optimization/',
'Spp', ispp,'Run',Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 50,
pops = 20,
elitism_rate = 0.1,
mut_chance = 1 / (10 + 1),
nStrata = 10,
showPlot = T,
parallel = F,
writeFiles = T)
sum_stats = summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
#Plot Solution
goa = SpatialPointsDataFrame(
coords = Extrapolation_depths[,c('E_km', 'N_km')],
data = data.frame(Str_no = solution$framenew$STRATO) )
goa_ras = raster(goa, resolution = 5)
goa_ras =rasterize(x = goa, y = goa_ras, field = 'Str_no')
plot(goa_ras, axes = F,
col = terrain.colors(10)[sample(10)])
#Save Output
CV_constraints = expected_CV(strata = solution$aggr_strata)
current_n = sum(sum_stats$Allocation)
result_list = list(solution, sum_stats, CV_constraints, n = current_n)
save(list = 'result_list', file = 'result_list.RData')
#Set up next run
Run = Run + 1
CV_constraints =  CV_constraints * (1 - creep_rate)
#Create CV dataframe
cv = list()
for(spp in 1:1)
cv[[paste0('CV',1)]] = as.numeric(CV_constraints)
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
}
