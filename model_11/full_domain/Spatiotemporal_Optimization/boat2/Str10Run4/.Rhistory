library(tidyr)
tidyr::spread(data = settings, value = cv, key = isample)
head(settings)
tidyr::spread(data = settings[,c("isample", "ispp", "cv")],
value = cv,
key = isample)
Current_STRS_Pop_CV
tidyr::spread(data = settings[,c("isample", "ispp", "cv")],
value = cv,
key = isample)[, -1]
SS_STRS_Pop_CV <- tidyr::spread(data = settings[,c("isample", "ispp", "cv")],
value = cv,
key = isample)[, -1]
rownames(SS_STRS_Pop_CV)
rownames(SS_STRS_Pop_CV) = sci_names
SS_STRS_Pop_CV
##################################
## Save
##################################
save(list = c("SRS_Pop_CV", "Current_STRS_Pop_CV", "SS_STRS_Pop_CV"),
file = paste0(github_dir, "Population_Variances.RData"))
###############################################################################
## Project:       Setting up Hawaii EEZ extrapolation grid
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
##                Yvonne Barkley
## Description:   Create covariate raster stack to predict onto
###############################################################################
rm(list = ls())
##################################################
####   Import Libraries
##################################################
library(raster)
library(sp)
library(rgdal)
library(rgeos)
library(ncdf4)
##################################################
####   Set up directores
##################################################
dir <- "G:/Oyafuso/whales/"
covar_dir <- paste0(dir, "covariate_data/")
##################################################
####   Import dataset for use in scaling variables
##################################################
df <- readRDS(paste0(dir, "covariate_data/CompletePm_25km_Comb_forZack_v2.rda"))
df$Year_Mo <- format(x = df$UTC,
format = "%Y_%m")
##################################################
####   temp600: temperature at 600 m
####   Average values from 2010, 2013, 2016, and 2017
####   Shift longitude values from the 0-360 scale to -180-180 scale by
####          shifting the x-values -360 degrees
####   Match the resolution of the mean_SST scale by resampling cells (thereby
####          also cropping to main_extent)
####   Convert from kelvin to Celcius
####   Center variable
##################################################
for(iyear in c(2010, 2013, 2016, 2017)){
temp_raster <- raster::stack(paste0(covar_dir, iyear, "-temp584.nc"))
names(temp_raster) <- paste0(substr(x = names(temp_raster),
start = 2, stop = 5),
"_",
substr(x = names(temp_raster),
start = 7, stop = 8))
assign(x = paste0("temp600_", iyear),
value = temp_raster)
}
for (i in unique(df$Year_Mo)) {
temp_sp <- sp::SpatialPoints(coords = df[df$Year_Mo == i,
c("Longitude", "Latitude")])
temp_ras <- get(paste0("temp600_",
substr(i, start = 1, stop = 4)))[[paste0("X", i)]]
temp_ras_sd <- raster::focal(x = temp_ras,
w = matrix(1/25, 5, 5),
fun = sd,
na.rm = T)
df$temp600_sd.r[df$Year_Mo == i] <- raster::extract(x = temp_ras_sd,
y = temp_sp)
}
head(df)
head(df$Year_Mo)
iyear = 2010
#Imported stack
temp_raster <- raster::stack(paste0(covar_dir, iyear, "-temp584.nc"))
names(temp_raster)
paste0(substr(x = names(temp_raster),
start = 2, stop = 5),
"_",
substr(x = names(temp_raster),
start = 7, stop = 8))
##################################################
####   temp600: temperature at 600 m
####   Average values from 2010, 2013, 2016, and 2017
####   Shift longitude values from the 0-360 scale to -180-180 scale by
####          shifting the x-values -360 degrees
####   Match the resolution of the mean_SST scale by resampling cells (thereby
####          also cropping to main_extent)
####   Convert from kelvin to Celcius
####   Center variable
##################################################
for(iyear in c(2010, 2013, 2016, 2017)){
#Imported stack
temp_raster <- raster::stack(paste0(covar_dir, iyear, "-temp584.nc"))
#
names(temp_raster) <- paste0(substr(x = names(temp_raster),
start = 2, stop = 5),
"_",
substr(x = names(temp_raster),
start = 7, stop = 8))
assign(x = paste0("temp600_", iyear),
value = temp_raster)
}
temp600_2010
unique(df$Year_Mo)
i =  unique(df$Year_Mo)[1]
i
df[df$Year_Mo == i,
c("Longitude", "Latitude")]
temp_sp <- sp::SpatialPoints(coords = df[df$Year_Mo == i,
c("Longitude", "Latitude")])
temp_sp
plot(temp_sp)
substr(i, start = 1, stop = 4)
paste0("temp600_",
substr(i, start = 1, stop = 4))
get(paste0("temp600_",
substr(i, start = 1, stop = 4)))
paste0("X", i)
#Extracts the raster from a given year and month
temp_ras <- get(paste0("temp600_",
substr(i, start = 1, stop = 4)))[[paste0("X", i)]]
temp_ras
i
#Focal stat on the temp_ras
temp_ras_sd <- raster::focal(x = temp_ras,
w = matrix(1/25, 5, 5),
fun = sd,
na.rm = T)
temp_ras_sd
plot(temp_ras_sd)
value(temp_ras_sd)
values(temp_ras_sd)
0/0
temp_ras_sd
temp_sp
raster::extract(x = temp_ras_sd,
y = temp_sp)
df$Year_Mo == i
df$temp600_sd.r[df$Year_Mo == i] <- raster::extract(x = temp_ras_sd,
y = temp_sp)
###############################################################################
## Project:       Setting up Hawaii EEZ extrapolation grid
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
##                Yvonne Barkley
## Description:   Create covariate raster stack to predict onto
###############################################################################
rm(list = ls())
##################################################
####   Import Libraries
##################################################
library(raster)
library(sp)
library(rgdal)
library(rgeos)
library(ncdf4)
##################################################
####   Set up directores
##################################################
dir <- "G:/Oyafuso/whales/"
covar_dir <- paste0(dir, "covariate_data/")
##################################################
####   Import dataset for use in scaling variables
##################################################
df <- readRDS(paste0(dir, "covariate_data/CompletePm_25km_Comb_forZack_v2.rda"))
df$Year_Mo <- format(x = df$UTC,
format = "%Y_%m")
##################################################
####   temp600: temperature at 600 m
####   Average values from 2010, 2013, 2016, and 2017
####   Shift longitude values from the 0-360 scale to -180-180 scale by
####          shifting the x-values -360 degrees
####   Match the resolution of the mean_SST scale by resampling cells (thereby
####          also cropping to main_extent)
####   Convert from kelvin to Celcius
####   Center variable
##################################################
for(iyear in c(2010, 2013, 2016, 2017)){
#Imported stack
temp_raster <- raster::stack(paste0(covar_dir, iyear, "-temp584.nc"))
#Changed names
names(temp_raster) <- paste0(substr(x = names(temp_raster),
start = 2, stop = 5),
"_",
substr(x = names(temp_raster),
start = 7, stop = 8))
#assigned
assign(x = paste0("temp600_", iyear),
value = temp_raster)
}
for (i in unique(df$Year_Mo)) {
#Make a spatial object subsetting a;slfj; s
temp_sp <- sp::SpatialPoints(coords = df[df$Year_Mo == i,
c("Longitude", "Latitude")])
#Extracts the raster from a given year and month
temp_ras <- get(paste0("temp600_",
substr(i, start = 1, stop = 4)))[[paste0("X", i)]]
#Focal stat on the temp_ras
temp_ras_sd <- raster::focal(x = temp_ras,
w = matrix(1/25, 5, 5),
fun = sd,
na.rm = T)
df$temp600_sd.r[df$Year_Mo == i] <- raster::extract(x = temp_ras_sd,
y = temp_sp)
}
summary(df)
temp_ras
plot(temp_ras)
temp_ras <- temp_ras - 273.15
###############################################################################
## Project:       Setting up Hawaii EEZ extrapolation grid
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
##                Yvonne Barkley
## Description:   Create covariate raster stack to predict onto
###############################################################################
rm(list = ls())
##################################################
####   Import Libraries
##################################################
library(raster)
library(sp)
library(rgdal)
library(rgeos)
library(ncdf4)
##################################################
####   Set up directores
##################################################
dir <- "G:/Oyafuso/whales/"
covar_dir <- paste0(dir, "covariate_data/")
##################################################
####   Import dataset for use in scaling variables
##################################################
df <- readRDS(paste0(dir, "covariate_data/CompletePm_25km_Comb_forZack_v2.rda"))
df$Year_Mo <- format(x = df$UTC,
format = "%Y_%m")
##################################################
####   temp600: temperature at 600 m
####   Average values from 2010, 2013, 2016, and 2017
####   Shift longitude values from the 0-360 scale to -180-180 scale by
####          shifting the x-values -360 degrees
####   Match the resolution of the mean_SST scale by resampling cells (thereby
####          also cropping to main_extent)
####   Convert from kelvin to Celcius
####   Center variable
##################################################
for(iyear in c(2010, 2013, 2016, 2017)){
#Imported stack
temp_raster <- raster::stack(paste0(covar_dir, iyear, "-temp584.nc"))
#Changed names
names(temp_raster) <- paste0(substr(x = names(temp_raster),
start = 2, stop = 5),
"_",
substr(x = names(temp_raster),
start = 7, stop = 8))
#assigned
assign(x = paste0("temp600_", iyear),
value = temp_raster)
}
for (i in unique(df$Year_Mo)) {
#Make a spatial object subsetting a;slfj; s
temp_sp <- sp::SpatialPoints(coords = df[df$Year_Mo == i,
c("Longitude", "Latitude")])
#Extracts the raster from a given year and month
temp_ras <- get(paste0("temp600_",
substr(i, start = 1, stop = 4)))[[paste0("X", i)]]
temp_ras <- temp_ras - 273.15
#Focal stat on the temp_ras
temp_ras_sd <- raster::focal(x = temp_ras,
w = matrix(1/25, 5, 5),
fun = sd,
na.rm = T)
df$temp600_sd.r[df$Year_Mo == i] <- raster::extract(x = temp_ras_sd,
y = temp_sp)
}
summary(sd)
summary(df)
for (i in unique(df$Year_Mo)) {
#Make a spatial object subsetting a;slfj; s
temp_sp <- sp::SpatialPoints(coords = df[df$Year_Mo == i,
c("Longitude", "Latitude")])
#Extracts the raster from a given year and month
temp_ras <- get(paste0("temp600_",
substr(i, start = 1, stop = 4)))[[paste0("X", i)]]
temp_ras <- temp_ras - 273.15
#Focal stat on the temp_ras
temp_ras_sd <- raster::focal(x = temp_ras,
w = matrix(1/25, 5, 5),
fun = sd,
na.rm = T)
plot(temp_ras_sd)
#Extract vals
df$temp600_sd.r[df$Year_Mo == i] <- raster::extract(x = temp_ras_sd,
y = temp_sp)
}
matrix(1/25, 5, 5)
load("~/GitHub/Optimal_Allocation_GoA/model_11/Spatiotemporal_Optimization/boat2/Str15Run2/result_list.RData")
result_list$n
result_list$CV_constraints
load("~/GitHub/Optimal_Allocation_GoA/model_11/Population_Variances.RData")
result_list$CV_constraints
result_list$CV_constraints
SRS_Pop_CV[, 2]
Current_STRS_Pop_CV[, 2]
SS_STRS_Pop_CV[, 2]
(result_list$CV_constraints * 0.90) + (SS_STRS_Pop_CV[, 2] * 0.10)
(result_list$CV_constraints * 0.90) + (SS_STRS_Pop_CV[, 2] * 0.10)
SRS_Pop_CV[, 2]
Current_STRS_Pop_CV[, 2]
(result_list$CV_constraints * 0.90) + (SS_STRS_Pop_CV[, 2] * 0.10)
# SRS_Pop_CV[, 2]
Current_STRS_Pop_CV[, 2]
(result_list$CV_constraints * 0.90) + (SS_STRS_Pop_CV[, 2] * 0.10)
# SRS_Pop_CV[, 2]
Current_STRS_Pop_CV[, 2]
(result_list$CV_constraints * 0.90) + (SS_STRS_Pop_CV[, 2] * 0.10)
# SRS_Pop_CV[, 2]
Current_STRS_Pop_CV[, 2]
result_list$CV_constraints <- (result_list$CV_constraints * 0.90) + (SS_STRS_Pop_CV[, 2] * 0.10)
result_list$CV_constraints <- (result_list$CV_constraints * 0.90) + (SS_STRS_Pop_CV[, 2] * 0.10)
# SRS_Pop_CV[, 2]
Current_STRS_Pop_CV[, 2]
load("~/GitHub/Optimal_Allocation_GoA/model_11/Population_Variances.RData")
load("~/GitHub/Optimal_Allocation_GoA/model_11/Spatiotemporal_Optimization/boat2/Str15Run2/result_list.RData")
result_list$CV_constraints <- (result_list$CV_constraints * 0.90) + (SS_STRS_Pop_CV[, 2] * 0.10)
load("~/GitHub/Optimal_Allocation_GoA/model_11/Population_Variances.RData")
load("~/GitHub/Optimal_Allocation_GoA/model_11/Spatiotemporal_Optimization/boat2/Str15Run2/result_list.RData")
result_list$CV_constraints
result_list$CV_constraints <- (result_list$CV_constraints * 0.90) + (SS_STRS_Pop_CV[, 2] * 0.10)
result_list$CV_constraints
result_list$CV_constraints <- (result_list$CV_constraints * 0.90) + (SS_STRS_Pop_CV[, 2] * 0.10)
# SRS_Pop_CV[, 2]
Current_STRS_Pop_CV[, 2]
result_list$CV_constraints
load("~/GitHub/Optimal_Allocation_GoA/model_11/Population_Variances.RData")
load("~/GitHub/Optimal_Allocation_GoA/model_11/Spatiotemporal_Optimization/boat2/Str15Run3/result_list.RData")
result_list$CV_constraints
Current_STRS_Pop_CV[, 2]
(result_list$CV_constraints <- (result_list$CV_constraints * 0.90) + (SS_STRS_Pop_CV[, 2] * 0.10))
# SRS_Pop_CV[, 2]
Current_STRS_Pop_CV[, 2]
load("~/GitHub/Optimal_Allocation_GoA/model_11/Spatiotemporal_Optimization/boat2/Str15Run4/result_list.RData")
load("~/GitHub/Optimal_Allocation_GoA/model_11/Population_Variances.RData")
load("~/GitHub/Optimal_Allocation_GoA/model_11/Spatiotemporal_Optimization/boat2/Str15Run4/result_list.RData")
load("~/GitHub/Optimal_Allocation_GoA/model_11/Population_Variances.RData")
Current_STRS_Pop_CV[, 2]
result_list$CV_constraints
load("~/GitHub/Optimal_Allocation_GoA/model_11/Spatiotemporal_Optimization/boat1/Str15Run3/result_list.RData")
Current_STRS_Pop_CV[, 1]
result_list$CV_constraints
install.packages(c("aqp", "callr", "cli", "digest", "doParallel", "DT", "fields", "labeling", "lme4", "nlme", "quantreg", "RcppArmadillo", "rgdal", "rmarkdown", "statmod", "tibble"))
install.packages(c("lme4", "nlme"))
array(data = 1:(3*4*5),
dim = c(3,4,5))
array_3d <- array(data = 1:(3*4*5),
dim = c(3,4,5))
array_3d <- array(data = 1:(2*2*3),
dim = c(2,2,3))
array_3d
array_3d <- array(data = 1:(2*2*3*4),
dim = c(2,2,3,4))
array_3d
array_3d <- array(data = 1:(2*2*3),
dim = c(2,2,3))
array_3d
array_2d <- array_3d
dim(array_2d) <- c(2, 6)
array_2d
array_3d <- array(data = 1:(2*2*3),
dim = c(2,2,3))
array_2d <- array_3d
dim(array_2d) <- c(6,2)
array_2d
##############################################################################
## Project:       Spatiotemporal Survey Optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Conduct SamplingStrata R package multispecies stratified
##                survey optimization
###############################################################################
rm(list = ls())
##################################################
####    Import required packages
##################################################
library(sp)
library(RColorBrewer)
library(raster)
##################################################
####   Set up directories
####
####   Set up some constants of the optimization
####   Multispeceis: Spatiotemporal Variance, species specific CV constraints
####   Single_Species: Spatiotemporal Variance, univariate optimization,
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
VAST_model <- "11"
domain <- c("full_domain", "trawlable")[1]
SamplingStrata_dir <- paste0(c("/Users/zackoyafuso/",
"C:/Users/Zack Oyafuso/",
"C:/Users/zack.oyafuso/")[which_machine],
"Downloads/SamplingStrata-master/R")
which_method = c("Multi_Species" = 1,
"Single_Species" = 2)[1]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/model_",
VAST_model, "/", domain, "/",
c("Spatiotemporal_Optimization/",
"Single_Species_Optimization/")[which_method])
##################################################
####   Load functions from SamplingStrata packages into global environment
####   Load modified buildStrataDF function to incorporate spatiotemporal
####   stratum variance instead of spatial variance
##################################################
for (ifile in dir(SamplingStrata_dir, full.names = T)) source(ifile)
source(paste0(dirname(dirname(dirname(github_dir))),
"/modified_functions/buildStrataDF_Zack.R"))
##################################################
####   Load Data
####   Load Population CVs for use in the thresholds
##################################################
load(paste0(dirname(github_dir), "/optimization_data.RData"))
load(paste0(dirname(dirname(dirname(github_dir))), "/data/Extrapolation_depths.RData"))
load(paste0(dirname(dirname(github_dir)), "/Population_Variances.RData"))
##################################################
####   Some Constants
##################################################
stratas <- c(5,10,15,20,30,60)
ns <- c(15, 1)[which_method]
##################################################
####   Run optimization
##################################################
par(mfrow = c(6,6),
mar = c(2,2,0,0))
isample <- 2
for (istrata in 2) {
temp_strata <- stratas[istrata]
##Initial Condition
Run <- 1
current_n <- 0
CV_constraints <- SRS_Pop_CV[, isample]
#Create CV dataframe
cv <- list()
for (spp in 1:ns) cv[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv[["DOM"]] <- 1
cv[["domainvalue"]] <- 1
cv <- as.data.frame(cv)
while (current_n <= c(280, 550, 820)[isample] ) {
#Set wd for output files, create a directory if it doesn"t exist yet
temp_dir = paste0(github_dir, "boat", isample, "/Str", temp_strata,
"Run", Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir, recursive = T)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 300,
pops = 30,
elitism_rate = 0.1,
mut_chance = 1 / (temp_strata + 1),
nStrata = temp_strata,
showPlot = T,
writeFiles = T)
sum_stats <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
#Plot Solution
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = solution$framenew$STRATO) )
goa_ras <- raster::raster(x = goa,
resolution = 5)
goa_ras <- raster::rasterize(x = goa,
y = goa_ras,
field = "Str_no")
png(filename = "solution.png",
width = 5,
height = 5,
units = "in",
res = 500)
plot(goa_ras, axes = F,
col = terrain.colors(temp_strata)[sample(temp_strata)])
dev.off()
#Save Output
CV_constraints <- expected_CV(strata = solution$aggr_strata)
current_n <- sum(sum_stats$Allocation)
result_list <- list(solution = solution,
sum_stats = sum_stats,
CV_constraints = CV_constraints,
n = current_n)
save(list = "result_list", file = "result_list.RData")
#Set up next run by changing upper CV constraints
Run <- Run + 1
CV_constraints <- 0.9*CV_constraints + 0.1*(SS_STRS_Pop_CV[, isample])
#Create CV dataframe in the formmat of SamplingStrata
cv <- list()
for (spp in 1:ns)
cv[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv[["DOM"]] <- 1
cv[["domainvalue"]] <- 1
cv <- as.data.frame(cv)
}
}
