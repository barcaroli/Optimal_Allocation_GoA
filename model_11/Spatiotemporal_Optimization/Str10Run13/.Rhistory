CV_constraints <- CV_constraints - creep_rate
}
#Apply lower threshold: if CV is lower than the threshold, set CV to
#to the lower theshold
for (ispp in 1:ns) {
CV_constraints[ispp] <-
ifelse(CV_constraints[ispp]<threshold[ispp, isample],
threshold[ispp, isample],
CV_constraints[ispp])
}
#Create CV dataframe in the formmat of SamplingStrata
cv <- list()
for (spp in 1:ns) cv[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv[["DOM"]] <- 1
cv[["domainvalue"]] <- 1
cv <- as.data.frame(cv)
}
}
###############################################################################
## Project:       Synthesize Optimization Results
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Synthesize all optimization results
##                sample sizes, expected CVs, solutions, allocations, etc
###############################################################################
rm(list = ls())
###############################################################################
## Project:       Synthesize Optimization Results
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Synthesize all optimization results
##                sample sizes, expected CVs, solutions, allocations, etc
###############################################################################
rm(list = ls())
##################################################
####  Set up directories
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
VAST_model <- "11"
github_dir <- paste0(c("/Users/zackoyafuso/Documents/",
"C:/Users/Zack Oyafuso/Documents/",
"C:/Users/zack.oyafuso/Work/")[which_machine],
"GitHub/Optimal_Allocation_GoA/model_", VAST_model, "/")
##################################################
####   Load Data
##################################################
load(paste0(github_dir, "optimization_data.RData"))
####   Define which optimization settings is being worked on
####
####   which_variance:
####   Spatial: spatial variance for stratum variance
####   Spatiotemporal: spatiotemporal variance for stratum variance
####
####   which_constraint:
####   one_CV: One CV constraint applied to all species
####   "": species specific CV constraints, assumed to be the default
##################################################
which_variance <- c("Spatiotemporal_Optimization_Scheme2/",
"Spatiotemporal_Optimization/",
"Spatial_Optimization/")[2]
result_dir <- paste0(github_dir, which_variance)
result_dir
##################################################
####   Empty Result Objects
##################################################
res_df <- data.frame(id = 1:N)
settings <- data.frame()
strata_stats_list <- strata_list <- list()
stratas <- c(5, 10, 15, 20, 30, 60)
NStratas = length(stratas)
##################################################
####   Collect optimization results from each strata
##################################################
# for (istrata in 1:length(stratas)) {
for (istrata in 1:NStratas) {
temp_strata <- stratas[istrata]
runs <- grep(x = dir(result_dir),
pattern = paste0("Str", temp_strata, "Run"),
value = T )
for (irun in runs) {
temp_dir <- paste0(result_dir,  irun, "/result_list.RData")
if (file.exists(temp_dir)) {
load(temp_dir)
#Solution: which strata is assigned to each extrapolation cell
res_df <- cbind(res_df,
result_list[[1]]$indices$X1 )
#Strata characteristics: sample size, population, sampling rate,
# strata variable cuts
strata_list <- c(strata_list,
list(result_list[[2]]))
#Strata statistics (mean and variance)
strata_stats_list <- c(strata_stats_list,
list(result_list[[1]]$aggr_strata))
#High-level settings: total sample size and expected CV across species
species_cv <- result_list[[3]]
attributes(species_cv)$dimnames[[1]] <- ""
attributes(species_cv)$dimnames[[2]] <- paste0("CV_", 1:ns)
cv <- max(as.numeric(species_cv))
n <- result_list$n
settings <- rbind(settings,
data.frame(strata = temp_strata, n, cv, species_cv))
}
}
}
settings$id <- 1:nrow(settings)
names(res_df)[-1] <- paste0("sol_", 1:(ncol(res_df)-1))
settings
##################################################
####   Save Objects
##################################################
save(list = c("res_df", "settings", "strata_list", "strata_stats_list"),
file = paste0(result_dir, "optimization_knitted_results.RData"))
###############################################################################
## Project:         Simulate Multispecies GoA Surveys
## Author:          Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:     Simulate surveys based on the optimized survey designs
###############################################################################
rm(list = ls())
##################################################
####  Set up directories
##################################################
which_machine <- c('Zack_MAC' = 1, 'Zack_PC' = 2, 'Zack_GI_PC' = 3)[3]
VAST_model <- "11"
github_dir <- paste0(c('/Users/zackoyafuso/Documents/',
'C:/Users/Zack Oyafuso/Documents/',
'C:/Users/zack.oyafuso/Work/')[which_machine],
"GitHub/Optimal_Allocation_GoA/model_", VAST_model, "/")
####   Define which optimization settings is being worked on
####
####   which_variance:
####   Spatial: spatial variance for stratum variance
####   Spatiotemporal: spatiotemporal variance for stratum variance
####
####   which_constraint:
####   one_CV: One CV constraint applied to all species
####   "": species specific CV constraints, assumed to be the default
##################################################
which_variance = c('Spatiotemporal_Optimization/',
'Spatiotemporal_Optimization_Scheme2/',
'Spatial_Optimization/')[1]
result_dir <- paste0(github_dir, which_variance)
##################################################
####    Load predicted density and optimization results
##################################################
load(paste0(github_dir, 'optimization_data.RData'))
load(paste0(result_dir, 'optimization_knitted_results.RData'))
##################################################
####   Result Objects
##################################################
stratas = c(5, 10, 15, 20, 30, 60)
NStratas = length(stratas)
sim_mean <- sim_cv <- array(dim = c(NTime, ns, nboats, NStratas, Niters),
dimnames = list(NULL, sci_names, NULL))
true_cv_array <- rrmse_cv_array <- rel_bias_est <- rel_bias_cv <-
array(dim = c(NTime, ns, nboats, NStratas),
dimnames = list(NULL, sci_names, NULL, NULL ))
##################################################
####   Simulating surveys from each optimized solution
##################################################
for (istrata in c(1:NStratas)) {
for (isample in 1:nboats) {
#Load optimization data
sub_settings = subset(settings, strata == stratas[istrata])
# sub_settings = settings
which_run <- which.min(abs(sub_settings$n - samples[isample]))
temp_run = sub_settings$id[which_run]
strata_allocation <- strata_list[[temp_run]]$Allocation
stratapop <- strata_list[[temp_run]]$Population
stratanos <- res_df[, 1+temp_run]
#Remove strata with only 1 sample allocated
str_idx <- strata_allocation > 1
for (iyear in 1:NTime) {
for (iter in 1:Niters) {
#Sample based on the stratification allocations
sample_vec <- c()
for (i in which(str_idx == T)) {
available_cells <- which(stratanos == i)
sample_cells <- sample(x = available_cells,
size = strata_allocation[i],
replace = F)
sample_vec <- c(sample_vec, sample_cells)
}
#Organize sample set and total number of samples
sample_vec <- sort(sample_vec)
n <- length(sample_vec)
stratano_samp <- stratanos[sample_vec]
sample_df <- subset(frame_raw, year == iyear)[sample_vec, ]
#Calculate Stratum Mean Density and Variance
stmt <- paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep=',', collapse=''),'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = mean)")
sample_mean <- eval(parse(text = stmt))[, -1]
stmt <- paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep=',', collapse=''), 'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = var)")
sample_var <- eval(parse(text = stmt))[, -1]
#How many samples are allocated in each strata
#How many sampling units are in each strata
Wh <- (stratapop / N)[str_idx]
wh <- (strata_allocation / stratapop)[str_idx]
#Calculate Total Abundance and Variance, calculate CV
SRS_var <- colSums(
sweep(x = sample_var,
MARGIN = 1,
STATS = Wh^2 * (1-wh)/ strata_allocation[str_idx],
FUN = '*')
)
SRS_mean <- colSums(
sweep(x = sample_mean,
MARGIN = 1,
STATS = Wh,
FUN = '*')
)
strata_cv <- sqrt(SRS_var) / SRS_mean
#Record mean and CV values
sim_mean[iyear, , isample, istrata, iter] <- SRS_mean
sim_cv[iyear, , isample, istrata, iter] <- strata_cv
if (iter%%100 == 0) {
print(paste0('Finished with: Iteration ', iter, ', ', 'Year ', iyear,
', and ', isample, ' Boat'))
}
}
}
}
}
##################################################
####   Simulating surveys from each optimized solution
##################################################
# for (istrata in c(1:NStratas)) {
for (istrata in 2) {
for (isample in 1:nboats) {
#Load optimization data
sub_settings = subset(settings, strata == stratas[istrata])
# sub_settings = settings
which_run <- which.min(abs(sub_settings$n - samples[isample]))
temp_run = sub_settings$id[which_run]
strata_allocation <- strata_list[[temp_run]]$Allocation
stratapop <- strata_list[[temp_run]]$Population
stratanos <- res_df[, 1+temp_run]
#Remove strata with only 1 sample allocated
str_idx <- strata_allocation > 1
for (iyear in 1:NTime) {
for (iter in 1:Niters) {
#Sample based on the stratification allocations
sample_vec <- c()
for (i in which(str_idx == T)) {
available_cells <- which(stratanos == i)
sample_cells <- sample(x = available_cells,
size = strata_allocation[i],
replace = F)
sample_vec <- c(sample_vec, sample_cells)
}
#Organize sample set and total number of samples
sample_vec <- sort(sample_vec)
n <- length(sample_vec)
stratano_samp <- stratanos[sample_vec]
sample_df <- subset(frame_raw, year == iyear)[sample_vec, ]
#Calculate Stratum Mean Density and Variance
stmt <- paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep=',', collapse=''),'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = mean)")
sample_mean <- eval(parse(text = stmt))[, -1]
stmt <- paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep=',', collapse=''), 'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = var)")
sample_var <- eval(parse(text = stmt))[, -1]
#How many samples are allocated in each strata
#How many sampling units are in each strata
Wh <- (stratapop / N)[str_idx]
wh <- (strata_allocation / stratapop)[str_idx]
#Calculate Total Abundance and Variance, calculate CV
SRS_var <- colSums(
sweep(x = sample_var,
MARGIN = 1,
STATS = Wh^2 * (1-wh)/ strata_allocation[str_idx],
FUN = '*')
)
SRS_mean <- colSums(
sweep(x = sample_mean,
MARGIN = 1,
STATS = Wh,
FUN = '*')
)
strata_cv <- sqrt(SRS_var) / SRS_mean
#Record mean and CV values
sim_mean[iyear, , isample, istrata, iter] <- SRS_mean
sim_cv[iyear, , isample, istrata, iter] <- strata_cv
if (iter%%100 == 0) {
print(paste0('Finished with: Iteration ', iter, ', ', 'Year ', iyear,
', and ', isample, ' Boat'))
}
}
}
}
}
##################################################
####   Simulation Metrics
##################################################
for(iyear in 1:NTime){
for(istrata in 1:NStratas){
for(isample in 1:3){
for(ispp in sci_names){
iter_est <- sim_mean[iyear, ispp, isample, istrata, ]
iter_cv <- sim_cv[iyear, ispp, isample, istrata, ]
true_cv <- sd(iter_est) / true_mean[iyear, ispp]
true_cv_array[iyear, ispp, isample, istrata] <- true_cv
rrmse_cv_array[iyear, ispp, isample, istrata] <-
sqrt(mean((iter_cv - true_cv)^2)) / mean(iter_cv)
abs_bias <- iter_est - true_mean[iyear, ispp]
rel_bias_est[iyear, ispp, isample, istrata] <-
mean(100* abs_bias / true_mean[iyear, ispp])
abs_bias <- iter_cv - true_cv
rel_bias_cv[iyear, ispp, isample, istrata] <-
mean(100 * abs_bias / true_cv)
}
}
}
}
##################################################
####   Save results
##################################################
for(ivar in  c('rrmse_cv_array', 'true_cv_array',
'sim_mean', 'sim_cv', 'rel_bias_est', 'rel_bias_cv')){
assign(x = paste0('STRS_', ivar), value = get(ivar))
}
save(file = paste0(github_dir, 'Spatiotemporal_Optimization/',
'STRS_Sim_Res_spatiotemporal.RData'),
list = c(paste0('STRS_',
c('rrmse_cv_array', 'true_cv_array', 'sim_mean', 'sim_cv',
'rel_bias_est', 'rel_bias_cv'))))
apply(STRS_true_cv_array, MARGIN = 2:3, median)
apply(STRS_true_cv_array[,,2,], MARGIN = 2:3, median)
apply(STRS_true_cv_array[,,,2], MARGIN = 2:3, median)
load("~/GitHub/Optimal_Allocation_GoA/model_11/Spatiotemporal_Optimization/STRS_Sim_Res_spatiotemporal.RData")
load("~/GitHub/Optimal_Allocation_GoA/model_11/Survey_Comparison_Simulations/Survey_Simulation_Results.RData")
load("~/GitHub/Optimal_Allocation_GoA/model_11/Survey_Comparison_Simulations/Simple_RS_Simulation_Results.RData")
apply(SRS_true_cv_array, MARGIN = 2:3, median)
apply(Survey_true_cv_array, MARGIN = 2:3, median)
apply(STRS_true_cv_array[,,,2], MARGIN = 2:3, median)
apply(SRS_true_cv_array, MARGIN = 2:3, median)
apply(Survey_true_cv_array, MARGIN = 2:3, median)
round(apply(STRS_true_cv_array[,,,2], MARGIN = 2:3, median), 2)
round(apply(SRS_true_cv_array, MARGIN = 2:3, median), 2)
round(apply(Survey_true_cv_array, MARGIN = 2:3, median), 2)
round(apply(STRS_true_cv_array[,,,2], MARGIN = 2:3, median), 2)
round(apply(Survey_true_cv_array, MARGIN = 2:3, median), 2)
source('~/GitHub/Optimal_Allocation_GoA/figure_plot/Survey_Comparison_Plots.R')
{
# png(filename = paste0(figure_dir, 'RRMSE_CV.png'),
#     units = 'mm', width = 200, height = 150, res = 500)
par(mfrow = c(5, 3), mar = c(0.5, 4, 0.5, 0), oma = c(2, 1, 2, 0.5))
for (ispp in c(10,  3,  5,
6,  7,  8,
13, 14, 9,
2,  4,  11,
1, 12, 15)) {
ymax = max(
c(Survey_rrmse_cv_array[,ispp,],
STRS_rrmse_cv_array[,ispp,,]
), na.rm = T)
plot(1, type = 'n',
ylim = c(0,ymax), xlim = c(0,8),
las = 1,
axes = F,
ann = F)
if(ispp == 3) {
legend(x = -1, y = .65,
col = c('red','blue','black'),
legend = paste(1:3, 'Boat'),
pch = 0,
horiz = T,
bty = 'n',
cex = 1.5,
lty = 1,
x.intersp = 0.25,
text.col = c('red', 'blue', 'black'),
xpd = NA)
}
axis(side = 2, las = 1)
if (ispp %in% c(10,12,15))  axis(side = 1,
at = c(2,6),
labels = c('Current', 'Optimized'),
cex.axis =1)
legend('top', sci_names[ispp], bty = 'n')
box()
axis(side = 2, las = 1)
boxplot(Survey_rrmse_cv_array[, ispp, ],
add = T,
at = 1:3,
axes = F,
border = c('red', 'blue', 'black'),
pch = 16)
boxplot(STRS_rrmse_cv_array[, ispp, , istrata ],
add = T,
at = 5:7,
axes = F,
border = c('red', 'blue', 'black'),
pch = 16)
}
mtext(side = 2, 'RRMSE of CV', outer = T, line = -.5)
# dev.off()
}
{
# png(filename = paste0(figure_dir, 'RRMSE_CV.png'),
#     units = 'mm', width = 200, height = 150, res = 500)
par(mfrow = c(5, 3), mar = c(0.5, 4, 0.5, 0), oma = c(2, 1, 2, 0.5))
for (ispp in c(10,  3,  5,
6,  7,  8,
13, 11, 9,
2,  4,  14,
1, 12, 15)) {
ymax = max(
c(Survey_rrmse_cv_array[,ispp,],
STRS_rrmse_cv_array[,ispp,,]
), na.rm = T)
plot(1, type = 'n',
ylim = c(0,ymax), xlim = c(0,8),
las = 1,
axes = F,
ann = F)
if(ispp == 3) {
legend(x = -1, y = .65,
col = c('red','blue','black'),
legend = paste(1:3, 'Boat'),
pch = 0,
horiz = T,
bty = 'n',
cex = 1.5,
lty = 1,
x.intersp = 0.25,
text.col = c('red', 'blue', 'black'),
xpd = NA)
}
axis(side = 2, las = 1)
if (ispp %in% c(10,12,15))  axis(side = 1,
at = c(2,6),
labels = c('Current', 'Optimized'),
cex.axis =1)
legend('top', sci_names[ispp], bty = 'n')
box()
axis(side = 2, las = 1)
boxplot(Survey_rrmse_cv_array[, ispp, ],
add = T,
at = 1:3,
axes = F,
border = c('red', 'blue', 'black'),
pch = 16)
boxplot(STRS_rrmse_cv_array[, ispp, , istrata ],
add = T,
at = 5:7,
axes = F,
border = c('red', 'blue', 'black'),
pch = 16)
}
mtext(side = 2, 'RRMSE of CV', outer = T, line = -.5)
# dev.off()
}
{
# png(filename = paste0(figure_dir, 'RRMSE_CV.png'),
#     units = 'mm', width = 200, height = 150, res = 500)
par(mfrow = c(5, 3), mar = c(0.5, 4, 0.5, 0), oma = c(2, 1, 2, 0.5))
for (ispp in c(10,  3,  5,
6,  7,  8,
14, 11, 9,
2,  4,  13,
1, 12, 15)) {
ymax = max(
c(Survey_rrmse_cv_array[,ispp,],
STRS_rrmse_cv_array[,ispp,,]
), na.rm = T)
plot(1, type = 'n',
ylim = c(0,ymax), xlim = c(0,8),
las = 1,
axes = F,
ann = F)
if(ispp == 3) {
legend(x = -1, y = .65,
col = c('red','blue','black'),
legend = paste(1:3, 'Boat'),
pch = 0,
horiz = T,
bty = 'n',
cex = 1.5,
lty = 1,
x.intersp = 0.25,
text.col = c('red', 'blue', 'black'),
xpd = NA)
}
axis(side = 2, las = 1)
if (ispp %in% c(10,12,15))  axis(side = 1,
at = c(2,6),
labels = c('Current', 'Optimized'),
cex.axis =1)
legend('top', sci_names[ispp], bty = 'n')
box()
axis(side = 2, las = 1)
boxplot(Survey_rrmse_cv_array[, ispp, ],
add = T,
at = 1:3,
axes = F,
border = c('red', 'blue', 'black'),
pch = 16)
boxplot(STRS_rrmse_cv_array[, ispp, , istrata ],
add = T,
at = 5:7,
axes = F,
border = c('red', 'blue', 'black'),
pch = 16)
}
mtext(side = 2, 'RRMSE of CV', outer = T, line = -.5)
# dev.off()
}
source('~/GitHub/Optimal_Allocation_GoA/figure_plot/Survey_Comparison_Plots.R')
source('~/GitHub/Optimal_Allocation_GoA/figure_plot/Survey_Comparison_Plots.R')
