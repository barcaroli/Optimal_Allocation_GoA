##################################
load( paste0(github_dir, 'optimization_data.RData') )
load( paste0(github_dir, 'Spatiotemporal_Optimization/',
'STRS_Sim_Res_spatiotemporal.RData') )
load( paste0(github_dir, 'Spatiotemporal_Optimization/',
'optimization_knitted_results.RData') )
istrata = 2
settings
isample = 1
###############################################################################
## Project:         Plot stratum variances for each species
## Author:          Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:
###############################################################################
rm(list = ls())
##################################################
####  Set up directories
##################################################
library(sp)
library(raster)
##################################################
####  Set up directories
##################################################
which_machine <- c('Zack_MAC' = 1, 'Zack_PC' = 2, 'Zack_GI_PC' = 3)[3]
VAST_model <- "11"
github_dir <- paste0(c('/Users/zackoyafuso/Documents/',
'C:/Users/Zack Oyafuso/Documents/',
'C:/Users/zack.oyafuso/Work/')[which_machine],
"GitHub/Optimal_Allocation_GoA/model_", VAST_model, "/")
figure_dir <- paste0(c('/Users/zackoyafuso/Google Drive/',
'C:/Users/Zack Oyafuso/Google Drive/')[which_machine],
'MS_Optimizations/TechMemo/figures/')
##################################
## Load Results
##################################
load( paste0(github_dir, 'optimization_data.RData') )
load( paste0(github_dir, 'Spatiotemporal_Optimization/',
'STRS_Sim_Res_spatiotemporal.RData') )
load( paste0(github_dir, 'Spatiotemporal_Optimization/',
'optimization_knitted_results.RData') )
istrata <- 2
isample <- 1
samples[isample]
idx <- settings$id[which.min(settings$n - samples[isample])]
idx
samples[isample])
samples[isample]
idx <- settings$id[which.min(abs(settings$n - samples[isample]))]
idx
strata_stats_list[[idx]]
strata_CV <- with( strata_stats_list[[idx]], paste0('S', 1:ns) / paste0("M", 1:ns) )
paste0('S', 1:ns)
strata_CV <- strata_stats_list[[idx]][, paste0('S', 1:ns)]
strata_CV
strata_CV <- sqrt(strata_stats_list[[idx]][, paste0('S', 1:ns)]) /
strata_stats_list[[idx]][, paste0('M', 1:ns)]
strata_CV
strata_CV <- sqrt(strata_stats_list[[idx]][, paste0('S', 1:ns)]) /
strata_stats_list[[idx]][, paste0('M', 1:ns)]
##################################
## Load Results
##################################
ispp =1
##################################
## Load Results
##################################
ispp <- 1
Wh = strata_list[[idx]]$Population / N
Wh
wh = strata_list[[idx]]$SamplingRate
wh
strata_var = strata_cv[, paste0("S", ispp)]
strata_var
strata_var <- strata_cv[, paste0("S", ispp)]
strata_var <- strata_CV[, paste0("S", ispp)]
strata_var
Wh^2
strata_var <- strata_CV[, paste0("S", ispp)] * Wh^2 * (1 - wh)
strata_var
strata_sd <- sqrt(strata_stats_list[[idx]][, paste0('S', 1:ns)])
Wh = strata_list[[idx]]$Population / N
wh = strata_list[[idx]]$SamplingRate
strata_var <- strata_sd[, paste0("S", ispp)] * Wh^2 * (1 - wh) /
goa <- SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = solution$framenew$STRATO) )
nh = strata_list[[idx]]$Allocation
nh
strata_var <- strata_sd[, paste0("S", ispp)] * Wh^2 * (1 - wh) / nh
strata_var
sum(strata_var)
strata_stats_list[[idx]]$M1
strata_stats_list[[idx]]$M1 * Wh
sum(strata_stats_list[[idx]]$M1 * Wh)
strata_sd
strata_var <- strata_stats_list[[idx]][, paste0('S', 1:ns)]
strata_var
strata_var <- strata_stats_list[[idx]][, paste0('S', 1:ns)]
Wh = strata_list[[idx]]$Population / N
wh = strata_list[[idx]]$SamplingRate
nh = strata_list[[idx]]$Allocation
strata_var <- strata_sd[, paste0("S", ispp)] * Wh^2 * (1 - wh) / nh
strata_var
strata_var <- strata_stats_list[[idx]][, paste0('S', 1:ns)]
strata_var
strata_var <- strata_stats_list[[idx]][, paste0("S", ispp)]
strata_var
strata_var <- strata_stats_list[[idx]][, paste0("S", ispp)]
Wh = strata_list[[idx]]$Population / N
wh = strata_list[[idx]]$SamplingRate
nh = strata_list[[idx]]$Allocation
strata_var <- strata_var * Wh^2 * (1 - wh) / nh
strata_var
strata_var <- strata_stats_list[[idx]][, paste0("S", ispp)]
strata_var
strata_var <- strata_stats_list[[idx]][, paste0("S", ispp)]
Wh = strata_list[[idx]]$Population / N
wh = strata_list[[idx]]$SamplingRate
nh = strata_list[[idx]]$Allocation
strata_var <- strata_var * Wh^2 * (1 - wh) / nh
strata_var
sum(strata_var)
sum(strata_stats_list[[idx]]$M1 * Wh)
17 / 3637
sqrt(17) / 3637
strata_var <- strata_stats_list[[idx]][, paste0("S", ispp)]
strata_var
Wh = strata_list[[idx]]$Population / N
wh = strata_list[[idx]]$SamplingRate
nh = strata_list[[idx]]$Allocation
Wh
strata_list[[idx]]$Population
strata_list[[idx]]$SamplingRate
strata_list[[idx]]$Allocation
strata_list[[idx]]$Allocation / strata_list[[idx]]$Allocation
strata_list[[idx]]$Allocation / strata_list[[idx]]$Population
nh = strata_list[[idx]]$Allocation / strata_list[[idx]]$Population
Wh = strata_list[[idx]]$Population / N
wh = strata_list[[idx]]$Allocation / strata_list[[idx]]$Population
nh = strata_list[[idx]]$Allocation
strata_var <- strata_var * Wh^2 * (1 - wh) / nh
strata_var <- strata_stats_list[[idx]][, paste0("S", ispp)]
Wh = strata_list[[idx]]$Population / N
wh = strata_list[[idx]]$Allocation / strata_list[[idx]]$Population
nh = strata_list[[idx]]$Allocation
strata_var <- strata_var * Wh^2 * (1 - wh) / nh
strata_var
strata_var
nh
wh
1 - wh
strata_var
strata_var <- strata_stats_list[[idx]][, paste0("S", ispp)]
Wh = strata_list[[idx]]$Population / N
wh = strata_list[[idx]]$Allocation / strata_list[[idx]]$Population
nh = strata_list[[idx]]$Allocation
strata_var2 <- strata_var * Wh^2 * (1 - wh) / nh
strata_var2
strata_var
Wh
strata_var2 <-  Wh^2 * (1 - wh) * strata_var / nh
strata_var2
sum(strata_var2)
strata_stats_list[[idx]][, paste0("S", ispp)]
strata_stats_list[[idx]][, paste0("M", ispp)]
strata_stats_list[[idx]][, paste0("M", ispp)] * Wh
sum(strata_stats_list[[idx]][, paste0("M", ispp)] * Wh)
sum(strata_var2)
sqrt(sum(strata_var2))
sqrt(sum(strata_var2)) / 3637
sqrt(sum(strata_var2)) / 3637 * 100
strata_stats_list[[idx]]
strata_var <- strata_stats_list[[idx]][, paste0("S", ispp)] ^ 2
strata_var
strata_var <- strata_stats_list[[idx]][, paste0("S", ispp)] ^ 2
Wh = strata_list[[idx]]$Population / N
wh = strata_list[[idx]]$Allocation / strata_list[[idx]]$Population
nh = strata_list[[idx]]$Allocation
strata_var2 <-  Wh^2 * (1 - wh) * strata_var / nh
strata_var2
sum(strata_var2)
sqrt(sum(strata_var2) )
sqrt(sum(strata_var2) ) / 3637
1 + idx
goa <- SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = strata_var2[res_df[, 1 + idx]] ) )
##################################
## Load Results
##################################
load( paste0(dirname(github_dir), 'data/Extrapolation_depths.RData') )
##################################
## Load Results
##################################
load( paste0(dirname(github_dir), '/data/Extrapolation_depths.RData') )
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = strata_var2[res_df[, 1 + idx]] ) )
goa_ras <- raster::raster(goa, resolution = 5)
goa_ras <- raster;;rasterize(x = goa, y = goa_ras, field = "Str_no")
goa_ras <- raster::rasterize(x = goa, y = goa_ras, field = "Str_no")
##################################################
####  Set up directories
##################################################
library(sp)
library(raster)
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = strata_var2[res_df[, 1 + idx]] ) )
goa_ras <- raster::raster(goa, resolution = 5)
goa_ras <- raster::rasterize(x = goa, y = goa_ras, field = "Str_no")
plot(goa_ras, axes = F,
col = terrain.colors(temp_strata)[sample(temp_strata)])
plot(goa_ras, axes = F,
col = terrain.colors(100))
strata_var2
sqrt(strata_var2)
strata_CV = sqrt(strata_var2) / strata_stats_list[[idx]][, paste0("M", ispp)]
strata_CV
strata_CV = sqrt(strata_var2) / strata_stats_list[[idx]][, paste0("M", ispp)] * 100
strata_CV
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = strata_CV[res_df[, 1 + idx]] ) )
goa_ras <- raster::raster(goa, resolution = 5)
goa_ras <- raster::rasterize(x = goa, y = goa_ras, field = "Str_no")
plot(goa_ras, axes = F, col = terrain.colors(100))
##################################
## Load Results
##################################
for (ispp in 1:ns){
isample <- 1
strata_list[[idx]]$Allocationidx <- settings$id[which.min(abs(settings$n - samples[isample]))]
strata_var <- strata_stats_list[[idx]][, paste0("S", ispp)]^2
Wh = strata_list[[idx]]$Population / N
wh = strata_list[[idx]]$Allocation / strata_list[[idx]]$Population
nh = strata_list[[idx]]$Allocation
strata_var2 <-  Wh^2 * (1 - wh) * strata_var / nh
strata_CV = sqrt(strata_var2) / strata_stats_list[[idx]][, paste0("M", ispp)] * 100
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = strata_CV[res_df[, 1 + idx]] ) )
goa_ras <- raster::raster(goa, resolution = 5)
goa_ras <- raster::rasterize(x = goa, y = goa_ras, field = "Str_no")
plot(goa_ras, axes = F, col = terrain.colors(100))
}
##################################
## Load Results
##################################
par(mfrow = c(5,3), mar = c(0,0,0,0))
for (ispp in 1:ns){
isample <- 1
strata_list[[idx]]$Allocationidx <- settings$id[which.min(abs(settings$n - samples[isample]))]
strata_var <- strata_stats_list[[idx]][, paste0("S", ispp)]^2
Wh = strata_list[[idx]]$Population / N
wh = strata_list[[idx]]$Allocation / strata_list[[idx]]$Population
nh = strata_list[[idx]]$Allocation
strata_var2 <-  Wh^2 * (1 - wh) * strata_var / nh
strata_CV = sqrt(strata_var2) / strata_stats_list[[idx]][, paste0("M", ispp)] * 100
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = strata_CV[res_df[, 1 + idx]] ) )
goa_ras <- raster::raster(goa, resolution = 5)
goa_ras <- raster::rasterize(x = goa, y = goa_ras, field = "Str_no")
plot(goa_ras, axes = F, col = terrain.colors(100))
}
mtext(side = 1, text = sci_names[ispp], line - 02)
mtext(side = 1, text = sci_names[ispp], line = -2)
##################################
## Load Results
##################################
par(mfrow = c(5, 3), mar = c(0, 0, 0, 0))
for (ispp in 1:ns){
isample <- 1
strata_list[[idx]]$Allocationidx <- settings$id[which.min(abs(settings$n - samples[isample]))]
strata_var <- strata_stats_list[[idx]][, paste0("S", ispp)]^2
Wh = strata_list[[idx]]$Population / N
wh = strata_list[[idx]]$Allocation / strata_list[[idx]]$Population
nh = strata_list[[idx]]$Allocation
strata_var2 <-  Wh^2 * (1 - wh) * strata_var / nh
strata_CV = sqrt(strata_var2) / strata_stats_list[[idx]][, paste0("M", ispp)] * 100
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = strata_CV[res_df[, 1 + idx]] ) )
goa_ras <- raster::raster(goa, resolution = 5)
goa_ras <- raster::rasterize(x = goa, y = goa_ras, field = "Str_no")
plot(goa_ras, axes = F, col = rev(terrain.colors(100)))
mtext(side = 1, text = sci_names[ispp], line = -2)
}
ispp = 8
strata_stats_list[[idx]][, paste0("M", ispp)]
1
1
1
1
isample <- 1
strata_list[[idx]]$Allocationidx <- settings$id[which.min(abs(settings$n - samples[isample]))]
strata_var <- strata_stats_list[[idx]][, paste0("S", ispp)]^2
Wh = strata_list[[idx]]$Population / N
wh = strata_list[[idx]]$Allocation / strata_list[[idx]]$Population
nh = strata_list[[idx]]$Allocation
strata_var2 <-  Wh^2 * (1 - wh) * strata_var / nh
strata_CV = sqrt(strata_var2) / strata_stats_list[[idx]][, paste0("M", ispp)] * 100
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = strata_CV[res_df[, 1 + idx]] ) )
goa_ras <- raster::raster(goa, resolution = 5)
goa_ras <- raster::rasterize(x = goa, y = goa_ras, field = "Str_no")
strata_CV
strata_stats_list[[idx]][, paste0("M", ispp)
]
strata_var
###############################################################################
## Project:       Spatiotemporal Survey Optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Conduct SamplingStrata R package multispecies stratified
##                survey optimization
###############################################################################
rm(list = ls())
##################################################
####    Import required packages
##################################################
library(sp)
library(RColorBrewer)
library(raster)
##################################################
####   Set up directories
####
####   Set up some constants of the optimization
####   Flexible: Spatiotemporal Variance, species specific CV constraints
####   Spatial:  Spatial Variance, 1 CV constraint
####   Single_Species: Spatiotemporal Variance, univariate optimization,
####                   one CV constraint
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
VAST_model <- "11"
SamplingStrata_dir <- paste0(c("/Users/zackoyafuso/",
"C:/Users/Zack Oyafuso/",
"C:/Users/zack.oyafuso/")[which_machine],
"Downloads/SamplingStrata-master/R")
which_method = c("Flexible" = 1,
"Spatial" = 2,
"Single_Species" = 3)[3]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/model_",
VAST_model, "/",
c("Spatiotemporal_Optimization/",
"Spatial_Optimization/",
"Single_Species_Optimization/")[which_method])
##################################################
####   Load functions from SamplingStrata packages into global environment
####   Load modified buildStrataDF function if using spatiotemporal
####   stratum variance
##################################################
if (which_method %in% c(1,3)) {
for (ifile in dir(SamplingStrata_dir, full.names = T)) source(ifile)
source(paste0(dirname(dirname(github_dir)),
"/modified_functions/buildStrataDF_Zack.R"))
}
if (which_method %in% 2) {
library(SamplingStrata)
}
##################################################
####   Load Data
##################################################
load(paste0(dirname(github_dir), "/optimization_data.RData"))
load(paste0(dirname(dirname(github_dir)), "/data/Extrapolation_depths.RData"))
##################################################
####   If doing a survey comparison (for models 10x and 11)
####   Load Simulated Survey metrics for use in threshold levels
##################################################
if (VAST_model %in% c(paste0(10, letters[1:4]), '11') ) {
load(paste0(dirname(github_dir), "/Survey_Comparison_Simulations/",
"Survey_Simulation_Results.RData"))
}
stratas <- c(5,10,15,20,30,60)
ns <- c(15, 15, 1)[which_method]
##################################################
####   If Single_Species: subset just the one species
##################################################
SS_which_species <- 2 #which species are we doing?
if (which_method == 3) {
SS_which_species <- 13 #which species are we doing?
frame <- frame[,c("id", "X1", "X2", paste0("Y", SS_which_species),
"domainvalue")]
frame_raw <- frame_raw[,c("id", "X1", "X2",
paste0("Y", SS_which_species),
"domainvalue", "year")]
names(frame)[4] <- names(frame_raw)[4] <- "Y1"
github_dir = paste0(github_dir, gsub(x = sci_names[SS_which_species],
pattern = ' ',
replacement = '_'), '/')
if(!dir.exists(github_dir)) dir.create(github_dir)
}
##################################################
####  lower CV threshold
####  If doing a survey comparison, set to the median of the simulated surveys
####  Else: set to 0.10 for all scenarios (naive assumption)
##################################################
if (VAST_model %in% c(paste0(10, letters[1:4]), '11') ) {
threshold <- list(apply(Survey_true_cv_array,
MARGIN = 2:3, FUN = median),
apply(Survey_true_cv_array,
MARGIN = 2:3, FUN = median),
matrix(0, nrow = ns, ncol = 3))[[which_method]]
} else {
threshold <- matrix(0.1, nrow = ns, ncol = 3)
}
##################################################
####   Run optimization
##################################################
par(mfrow = c(6,6), mar = c(2,2,0,0))
for (istrata in 2) {
temp_strata <- stratas[istrata]
##Initial Condition
Run <- 1
isample <- 1
current_n <- 0
##Initial Upper CV constraints
if (VAST_model %in% c(paste0(10, letters[1:4]), '11') ) {
CV_constraints <- list(
rep(c(.4, 0.3, 0.2)[isample], ns),
rep(c(.4, 0.3, 0.2)[isample], ns),
c(0.09, 0.20, 0.10,
0.09, 0.15, 0.07,
0.05, 0.09, 0.15,
0.09, 0.20, 0.06,
0.30, 0.20, 0.06)[SS_which_species])[[which_method]]
creep_rate <- c(0.1, 0.05, 0.025)[isample]
} else {
CV_constraints <- list(
rep(c(.4, 0.3, 0.2)[isample], ns),
rep(c(.2, 0.15, 0.1)[isample], ns))[[which_method]]
creep_rate <- c(0.02, 0.01)[which_method]
}
#Create CV dataframe
cv <- list()
for (spp in 1:ns) cv[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv[["DOM"]] <- 1
cv[["domainvalue"]] <- 1
cv <- as.data.frame(cv)
while(current_n <= 820){ #Run until you reach 820 samples
#Set wd for output files, create a directory if it doesn"t exist yet
temp_dir = paste0(github_dir, "Str", temp_strata, "Run",Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 200,
pops = 30,
elitism_rate = 0.1,
mut_chance = 1 / (temp_strata + 1),
nStrata = temp_strata,
showPlot = T,
parallel = F,
writeFiles = T)
sum_stats <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
#Plot Solution
goa <- SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = solution$framenew$STRATO) )
goa_ras <- raster(goa, resolution = 5)
goa_ras <- rasterize(x = goa, y = goa_ras, field = "Str_no")
png(filename = "solution.png", width = 5, height = 5, units = "in",
res = 500)
plot(goa_ras, axes = F,
col = terrain.colors(temp_strata)[sample(temp_strata)])
dev.off()
#Save Output
CV_constraints <- expected_CV(strata = solution$aggr_strata)
current_n <- sum(sum_stats$Allocation)
isample <- ifelse(current_n < 280, 1, #1 boat
ifelse(current_n < 550, 2, #2 boat
3)) #3 boat
result_list <- list(solution = solution,
sum_stats = sum_stats,
CV_constraints = CV_constraints,
n = current_n)
save(list = "result_list", file = "result_list.RData")
#Set up next run by changing upper CV constraints
#If doing a survey comparison, reduce CV proportionally
#Else: reduce CV absolutely
Run <- Run + 1
if (VAST_model %in% c(paste0(10, letters[1:4]), '11') ) {
creep_rate <- c(0.1, 0.05, 0.05)[isample]
CV_constraints <- CV_constraints * (1 - creep_rate)
} else {
CV_constraints <- CV_constraints - creep_rate
}
#Apply lower threshold: if CV is lower than the threshold, set CV to
#to the lower theshold
for (ispp in 1:ns) {
CV_constraints[ispp] <-
ifelse(CV_constraints[ispp]<threshold[ispp, isample],
threshold[ispp, isample],
CV_constraints[ispp])
}
#Create CV dataframe in the formmat of SamplingStrata
cv <- list()
for (spp in 1:ns) cv[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv[["DOM"]] <- 1
cv[["domainvalue"]] <- 1
cv <- as.data.frame(cv)
}
}
source('~/.active-rstudio-document')
