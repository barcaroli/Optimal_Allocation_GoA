############################################
## We then plot Pearson residuals.  If there are visible patterns (areas with
## consistently positive or negative residuals accross or within years) then
## this is an indication of the model "overshrinking" results towards the
## intercept, and model results should then be treated with caution.
############################################
PResid = plot_residuals(Lat_i=Data_Geostat[,'Lat'],
Lon_i=Data_Geostat[,'Lon'],
TmbData=TmbData,
Report=Report,
Q=Q,
spatial_list = Spatial_List,
extrapolation_list = Extrapolation_List,
working_dir=paste0(result_dir, 'diagnostics/'),
Year_Set=Year_Set,
Years2Include=Years2Include,
mar=c(0,0,2,0),
oma=c(3.5,3.5,0,0),
cex=1.8)
save(list = c('Q', 'PResid'),
file = paste0(result_dir, 'diagnostics/', 'diagnostics.RData'))
############################################
## Plot Density across years for each Species
############################################
{
png(paste0(result_dir, 'diagnostics/density.png'),
units = 'in', height = 5, width = 7, res = 500)
#Plot layout
par(mar = c(0,0,0,0), oma = rep(0.5,4), mfrow = c(4,3))
for(iyear in Years2Include){
#Extract density values for a species in a year,
vals  = Report$D_gcy[,1,iyear]
val_cuts = c(0,quantile(vals[vals > 1], probs = seq(0,1,length=9) ))
#plot density
goa = SpatialPointsDataFrame(
coords = Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')],
data = data.frame(density = vals) )
goa_ras = raster(goa, resolution = 5)
goa_ras = rasterize(x = goa, y = goa_ras, field = 'density')
values(goa_ras) = cut(x = values(goa_ras), breaks = val_cuts)
colors = c('white', brewer.pal(n = 7, name = 'Oranges'), 'black')
image(goa_ras, asp = 1, axes = F, ann = F, add = F,
col = colors)
#Year label
text(x = goa_ras@extent[1] + 0.7*diff(goa_ras@extent[1:2]),
y = goa_ras@extent[3]+ 0.7*diff(goa_ras@extent[3:4]),
Year_Set[iyear], cex = 1)
#Add value legend
val_cuts = round(val_cuts[-1])
legend('bottom', fill = colors, bty = 'n',
ncol = 3, cex = 0.65,
legend = c('<1', paste0('1-', val_cuts[2]),
paste0(val_cuts[2:(length(val_cuts)-1)], '-',
val_cuts[3:length(val_cuts)])) )
#Add land
plot(AK, add = T, col = 'tan', border = F)
plot(CA, add = T, col = 'tan', border = F)
box()
}
dev.off()
}
############################################
## Plot Omega of the 1st and second components
############################################
{
png(filename = paste0(result_dir, 'diagnostics/omega.png'),
units = 'in', height = 6, width = 12, res = 500)
#Plot layout
par(mar = c(0,0,0,0), oma = c(0,0,2,0))
layout(mat = matrix(c(1:2), byrow = T, nrow = 1),
widths = c(1,0.2))
offset = 0
#Empty plot
plot(1, type = 'n', axes = F,
xlim = xrange, ylim = yrange + c(-0.5*yrange_diff, 0))
for(omegatype in 1:2){ #Two types for the 0/1 and pos components
#Extract spatial component
scaled_var = list(Report$Omega1_gc[,1],
Report$Omega2_gc[,1])[[omegatype]]
#Scale to standard normal
scaled_var = (scaled_var - mean(scaled_var)) / sd(scaled_var)
goa = SpatialPointsDataFrame(
coords = Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')],
data = data.frame(var = scaled_var) )
goa_ras = raster(goa, resolution = 5)
goa_ras = rasterize(x = goa, y = goa_ras, field = 'var')
goa_ras = raster::shift(goa_ras, y = -offset*yrange*0.075)
#Plot spatial effect
colors = rev(brewer.pal(n = 11, name = 'Spectral'))
image(goa_ras, add = T, col = colors, asp = 1)
offset=offset + 1
box()
}
#Plot legend
plot(1, type = 'n', axes = F, ann = F, xlim = c(0,1), ylim = c(0,10))
plotrix::color.legend(xl = 0.1,
xr = 0.5,
yb = 1,
yt = 9,
legend = -3:3,
rect.col = colorRampPalette(colors)(1000) ,
gradient = 'y', align = 'rb')
#Title
mtext(side = 3, outer = T,
"Spatial Effect in Occurrence (Top) and Positive Response (Bottom)",
line = 0, font = 2)
dev.off()
rm(offset, omegatype, scaled_var)
}
############################################
## Plot Epsilon for the first, middle and last year
## for each of the 1st and second components
############################################
{
png(paste0(result_dir, 'diagnostics/epsilon.png'),
units = 'in', height = 5, width = 6, res = 500)
#Plot layout
par(mar = c(0,0,0,0), oma = c(0.5, 0.5, 3, 0.5), mfrow = c(4,3))
for(iyear in Years2Include){
#Empty plot
plot(1, type = 'n',  axes = F,
xlim = xrange, ylim = yrange + c(-1*yrange_diff, 0))
#Year label
legend('topleft', legend = Year_Set[iyear], bty = 'n')
box()
offset = 0
for(epstype in 1:2){ #Two types for the 0/1 and positive components
#Extract spatiotemporal component
scaled_var = list(Report$Epsilon1_gct[,1,iyear],
Report$Epsilon2_gct[,1,iyear])[[epstype]]
#Scale to standard normal
scaled_var = (scaled_var - mean(scaled_var)) / sd(scaled_var)
goa = SpatialPointsDataFrame(
coords = Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')],
data = data.frame(var = scaled_var) )
goa_ras = raster(goa, resolution = 5)
goa_ras = rasterize(x = goa, y = goa_ras, field = 'var')
goa_ras = raster::shift(goa_ras, dy = -offset*yrange*0.12)
#Plot spatiotemporal effect
colors = rev(brewer.pal(n = 11, name = 'Spectral'))
image(goa_ras, add = T, col = colors, asp = 1)
temp_yrange = extent(goa_ras)[3:4]
offset=offset + 1
}
}
#Plot legend
plot(1, type = 'n', axes = F, ann = F, xlim = c(0,1), ylim = c(0,10))
plotrix::color.legend(xl = 0.05, xr = 0.95, yb = 3.5, yt = 5.5, align = 'rb',
legend = -3:3, gradient = 'x', cex = 0.75,
rect.col = colorRampPalette(colors)(1000))
#Title
mtext(side = 3, outer = T,
paste0("Spatiotemporal Effect in Occurrence (Top)",
" and Positive Response (Bottom)"), line = 1)
dev.off()
}
############################################
## Index of abundance
## Compare VAST estimates with Design-Based (Stratified RS) estimates
############################################
Index = plot_biomass_index( DirName=paste0(result_dir, 'diagnostics/'),
TmbData=TmbData,
Sdreport=Opt[["SD"]],
Year_Set=Year_Set,
Years2Include=Years2Include,
strata_names = strata.limits <- data.frame(
'STRATA' = c("All_areas"),#, "west_of_140W"),
'west_border' = c(-Inf),#, -Inf),
'east_border' = c(Inf)#, -140)
)[,1],
use_biascorr=TRUE,
category_names=levels(Data_Geostat[,'spp']) )
{
png(paste0(result_dir, 'diagnostics/indices_comparison_DBE.png'),
width = 12, height = 6, units = 'in', res = 500)
par(mfrow = c(1,1), mar = c(3,3,2,1), oma = c(0,2.5,0,0))
GOA_DBE = readRDS(file = paste0(github_dir,
"data/GOA_biomass_indices_wnames.rds") )
#Design based Estimator and SD Interval
temp_DBE = subset(GOA_DBE, SPECIES_NAME == which_spp &
YEAR %in% Year_Set[Years2Include])
temp_DBE = temp_DBE[order(temp_DBE$YEAR),]
upper_DBE = (temp_DBE$TOTAL_BIOMASS + sqrt(temp_DBE$BIOMASS_VAR))/1e6
lower_DBE = (temp_DBE$TOTAL_BIOMASS - sqrt(temp_DBE$BIOMASS_VAR))/1e6
#VAST SD Intervals
upper = (Index_Ests + Index_SDs)/1e6
lower = (Index_Ests - Index_SDs)/1e6
#Empty plot
plot(x = Year_Set[Years2Include], Index_Ests/1e6, type = 'n',
ylab = 'Index', xlab = "Year", las = 1,
ylim = c(0, max(c(upper, upper_DBE) )) )
#Plot VAST interals
polygon(x = c(Year_Set[Years2Include],
rev(Year_Set[Years2Include])),
y = c(lower, rev(upper)), col = 'grey', lty = 'dotted')
lines(x = Year_Set[Years2Include], Index_Ests/1e6)
points(x = Year_Set[Years2Include], Index_Ests/1e6, pch= 16)
#Plot design-based intervals
points(Year_Set[Years2Include],
temp_DBE$TOTAL_BIOMASS/1e6, col = 'red', pch = 16)
lines(Year_Set[Years2Include],
temp_DBE$TOTAL_BIOMASS/1e6, col = 'red')
segments(x0 = Year_Set[Years2Include],
x1 = Year_Set[Years2Include],
y0 = lower_DBE,
y1 = upper_DBE,
col = 'red')
#Plot Legend
# plot(1, type = 'n', axes = F, ann = F)
legend('topleft', legend = c('DBE', 'VAST'),
col = c('red', 'black'), pch = 16, lty=1, cex = 1)
mtext(side = 2, outer = T, text = 'Abundance Index (million metric tons)',
line = 1)
dev.off()
}
############################################
## Direction of "geometric anisotropy"
## We can visualize which direction has faster or slower decorrelation
## (termed "geometric anisotropy")
############################################
plot_anisotropy( FileName=paste0(result_dir, 'diagnostics/Aniso.png'),
Report=Report,
TmbData=TmbData )
}
source('~/GitHub/MS_OM_GoA/ForMadison/diagnostics.R', echo=TRUE)
source('~/GitHub/MS_OM_GoA/ForMadison/diagnostics.R', echo=TRUE)
###############################################################################
## Project:       Spatiotemporal Survey Optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Conduct SamplingStrata R package multispecies stratified
##                survey optimization
###############################################################################
rm(list = ls())
##################################################
####    Import required packages
##################################################
library(sp)
library(RColorBrewer)
library(raster)
##################################################
####   Set up directories
####
####   Set up some constants of the optimization
####   Flexible: Spatiotemporal Variance, species specific CV constraints
####   Spatial:  Spatial Variance, 1 CV constraint
####   Single_Species: Spatiotemporal Variance, univariate optimization,
####                   one CV constraint
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[2]
##################################################
####   Set up directories
####
####   Set up some constants of the optimization
####   Flexible: Spatiotemporal Variance, species specific CV constraints
####   Spatial:  Spatial Variance, 1 CV constraint
####   Single_Species: Spatiotemporal Variance, univariate optimization,
####                   one CV constraint
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
VAST_model <- "11"
SamplingStrata_dir <- paste0(c("/Users/zackoyafuso/",
"C:/Users/Zack Oyafuso/",
"C:/Users/zack.oyafuso/")[which_machine],
"Downloads/SamplingStrata-master/R")
which_method = c("Flexible" = 1,
"Spatial" = 2,
"Single_Species" = 3)[3]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/model_",
VAST_model, "/",
c("Spatiotemporal_Optimization/",
"Spatial_Optimization/",
"Single_Species_Optimization/")[which_method])
##################################################
####   Load functions from SamplingStrata packages into global environment
####   Load modified buildStrataDF function if using spatiotemporal
####   stratum variance
##################################################
if (which_method %in% c(1,3)) {
for (ifile in dir(SamplingStrata_dir, full.names = T)) source(ifile)
source(paste0(dirname(dirname(github_dir)),
"/modified_functions/buildStrataDF_Zack.R"))
}
if (which_method %in% 2) {
library(SamplingStrata)
}
##################################################
####   Load Data
##################################################
load(paste0(dirname(github_dir), "/optimization_data.RData"))
load(paste0(dirname(dirname(github_dir)), "/data/Extrapolation_depths.RData"))
##################################################
####   If doing a survey comparison (for models 10x and 11)
####   Load Simulated Survey metrics for use in threshold levels
##################################################
if (VAST_model %in% c(paste0(10, letters[1:4]), '11') ) {
load(paste0(dirname(github_dir), "/Survey_Comparison_Simulations/",
"Survey_Simulation_Results.RData"))
}
stratas <- c(5,10,15,20,30,60)
ns <- c(15, 15, 1)[which_method]
##################################################
####   If Single_Species: subset just the one species
##################################################
SS_which_species <- 2 #which species are we doing?
if (which_method == 3) {
SS_which_species <- 14 #which species are we doing?
frame <- frame[,c("id", "X1", "X2", paste0("Y", SS_which_species),
"domainvalue")]
frame_raw <- frame_raw[,c("id", "X1", "X2",
paste0("Y", SS_which_species),
"domainvalue", "year")]
names(frame)[4] <- names(frame_raw)[4] <- "Y1"
github_dir = paste0(github_dir, gsub(x = sci_names[SS_which_species],
pattern = ' ',
replacement = '_'), '/')
if(!dir.exists(github_dir)) dir.create(github_dir)
}
##################################################
####  lower CV threshold
####  If doing a survey comparison, set to the median of the simulated surveys
####  Else: set to 0.10 for all scenarios (naive assumption)
##################################################
if (VAST_model %in% c(paste0(10, letters[1:4]), '11') ) {
threshold <- list(apply(Survey_true_cv_array,
MARGIN = 2:3, FUN = median),
apply(Survey_true_cv_array,
MARGIN = 2:3, FUN = median),
matrix(0, nrow = ns, ncol = 3))[[which_method]]
} else {
threshold <- matrix(0.1, nrow = ns, ncol = 3)
}
##################################################
####   Run optimization
##################################################
par(mfrow = c(6,6), mar = c(2,2,0,0))
for (istrata in 2) {
temp_strata <- stratas[istrata]
##Initial Condition
Run <- 1
isample <- 1
current_n <- 0
##Initial Upper CV constraints
if (VAST_model %in% c(paste0(10, letters[1:4]), '11') ) {
CV_constraints <- list(
rep(c(.4, 0.3, 0.2)[isample], ns),
rep(c(.4, 0.3, 0.2)[isample], ns),
c(0.09, 0.20, 0.10,
0.09, 0.15, 0.07,
0.05, 0.09, 0.15,
0.09, 0.20, 0.06,
0.30, 0.20, 0.06)[SS_which_species])[[which_method]]
creep_rate <- c(0.1, 0.05, 0.025)[isample]
} else {
CV_constraints <- list(
rep(c(.4, 0.3, 0.2)[isample], ns),
rep(c(.2, 0.15, 0.1)[isample], ns))[[which_method]]
creep_rate <- c(0.02, 0.01)[which_method]
}
#Create CV dataframe
cv <- list()
for (spp in 1:ns) cv[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv[["DOM"]] <- 1
cv[["domainvalue"]] <- 1
cv <- as.data.frame(cv)
while(current_n <= 820){ #Run until you reach 820 samples
#Set wd for output files, create a directory if it doesn"t exist yet
temp_dir = paste0(github_dir, "Str", temp_strata, "Run",Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 200,
pops = 30,
elitism_rate = 0.1,
mut_chance = 1 / (temp_strata + 1),
nStrata = temp_strata,
showPlot = T,
parallel = F,
writeFiles = T)
sum_stats <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
#Plot Solution
goa <- SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = solution$framenew$STRATO) )
goa_ras <- raster(goa, resolution = 5)
goa_ras <- rasterize(x = goa, y = goa_ras, field = "Str_no")
png(filename = "solution.png", width = 5, height = 5, units = "in",
res = 500)
plot(goa_ras, axes = F,
col = terrain.colors(temp_strata)[sample(temp_strata)])
dev.off()
#Save Output
CV_constraints <- expected_CV(strata = solution$aggr_strata)
current_n <- sum(sum_stats$Allocation)
isample <- ifelse(current_n < 280, 1, #1 boat
ifelse(current_n < 550, 2, #2 boat
3)) #3 boat
result_list <- list(solution = solution,
sum_stats = sum_stats,
CV_constraints = CV_constraints,
n = current_n)
save(list = "result_list", file = "result_list.RData")
#Set up next run by changing upper CV constraints
#If doing a survey comparison, reduce CV proportionally
#Else: reduce CV absolutely
Run <- Run + 1
if (VAST_model %in% c(paste0(10, letters[1:4]), '11') ) {
creep_rate <- c(0.1, 0.05, 0.05)[isample]
CV_constraints <- CV_constraints * (1 - creep_rate)
} else {
CV_constraints <- CV_constraints - creep_rate
}
#Apply lower threshold: if CV is lower than the threshold, set CV to
#to the lower theshold
for (ispp in 1:ns) {
CV_constraints[ispp] <-
ifelse(CV_constraints[ispp]<threshold[ispp, isample],
threshold[ispp, isample],
CV_constraints[ispp])
}
#Create CV dataframe in the formmat of SamplingStrata
cv <- list()
for (spp in 1:ns) cv[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv[["DOM"]] <- 1
cv[["domainvalue"]] <- 1
cv <- as.data.frame(cv)
}
}
source('~/.active-rstudio-document', echo=TRUE)
temp_strata <- stratas[istrata]
##Initial Condition
Run <- 1
isample <- 1
current_n <- 0
##Initial Upper CV constraints
if (VAST_model %in% c(paste0(10, letters[1:4]), '11') ) {
CV_constraints <- list(
rep(c(.4, 0.3, 0.2)[isample], ns),
rep(c(.4, 0.3, 0.2)[isample], ns),
c(0.09, 0.20, 0.10,
0.09, 0.15, 0.07,
0.05, 0.09, 0.15,
0.09, 0.20, 0.11,
0.30, 0.20, 0.06)[SS_which_species])[[which_method]]
creep_rate <- c(0.1, 0.05, 0.025)[isample]
} else {
CV_constraints <- list(
rep(c(.4, 0.3, 0.2)[isample], ns),
rep(c(.2, 0.15, 0.1)[isample], ns))[[which_method]]
creep_rate <- c(0.02, 0.01)[which_method]
}
CV_constraints
#Create CV dataframe
cv <- list()
for (spp in 1:ns) cv[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv[["DOM"]] <- 1
cv[["domainvalue"]] <- 1
cv <- as.data.frame(cv)
#Set wd for output files, create a directory if it doesn"t exist yet
temp_dir = paste0(github_dir, "Str", temp_strata, "Run",Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 200,
pops = 30,
elitism_rate = 0.1,
mut_chance = 1 / (temp_strata + 1),
nStrata = temp_strata,
showPlot = T,
parallel = F,
writeFiles = T)
sum_stats <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
#Plot Solution
goa <- SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = solution$framenew$STRATO) )
goa_ras <- raster(goa, resolution = 5)
goa_ras <- rasterize(x = goa, y = goa_ras, field = "Str_no")
png(filename = "solution.png", width = 5, height = 5, units = "in",
res = 500)
plot(goa_ras, axes = F,
col = terrain.colors(temp_strata)[sample(temp_strata)])
dev.off()
plot(goa_ras, axes = F,
col = terrain.colors(temp_strata)[sample(temp_strata)])
plot(goa_ras, axes = F,
col = terrain.colors(temp_strata)[sample(temp_strata)])
#Save Output
CV_constraints <- expected_CV(strata = solution$aggr_strata)
current_n <- sum(sum_stats$Allocation)
isample <- ifelse(current_n < 280, 1, #1 boat
ifelse(current_n < 550, 2, #2 boat
3)) #3 boat
result_list <- list(solution = solution,
sum_stats = sum_stats,
CV_constraints = CV_constraints,
n = current_n)
save(list = "result_list", file = "result_list.RData")
result_list
result_list$CV_constraints
