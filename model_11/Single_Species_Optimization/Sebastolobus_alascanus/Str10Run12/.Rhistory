las = 1,
pch = 16,
ylim = c(0, 1100),
xlim = c(plot_settings$xmin[irow],
plot_settings$xmax[irow]),
ann = F,
axes = F)
box()
if (istrata == 60) axis(side = 1)
lines(n ~ cv,
data = settings,
subset = strata == istrata)
}
abline(h = samples,
col = "grey",
lty = "dashed")
text(x = plot_settings$xlabel[irow],
y = samples,
labels = paste(1:3, "Boat"),
pos = 1)
text(x = plot_settings$xlabel[irow],
y = plot_settings$ymax[irow],
labels = paste(istrata, "Strata"),
font = 2,
pos = 1,
cex = 1.25)
if (istrata == 5) mtext(side = 3,
text = paste(plot_settings$type[irow],
"Optimization"),
line = 1)
}
}
mtext(side = 1,
text = "Upper CV Constraint",
outer = T,
line = 3)
mtext(side = 2,
text = "Total Sample Size",
outer = T,
line = 4)
dev.off()
}
#####################################################
## Supplemental Figure 4
#####################################################
plot_settings <-
data.frame(type = c("Spatial", "Spatiotemporal"),
xmin = c(0.09, 0.15),
xmax = c(0.24, 0.30),
xlabel = c(0.22, 0.2775))
{
png(paste0(figure_dir, "Supplemental_Figures/SFig4_N_CV_Tradeoff.png"),
width = 140,
height = 180,
res = 500,
units = "mm")
par(mfcol = c(6, 2),
mar = c(0, 0, 0, 0),
oma = c(4, 6, 3, 0.5))
for(irow in 1:2){
##########################
## Load Data
##########################
load(paste0(github_dir, plot_settings$type[irow],
"_Optimization/optimization_knitted_results.RData"))
for (istrata in c(5, 10, 15, 20, 30, 60)) {
#############################
## Plot
#############################
if (irow == 1) {
sub_settings = subset(settings,
strata == istrata)
sub_settings = sub_settings[order(sub_settings$cv, decreasing = T), ]
plot(n ~ cv,
data = sub_settings,
las = 1,
pch = 16,
ylim = c(0, 1100),
xlim = c(plot_settings$xmin[irow],
plot_settings$xmax[irow]),
ann = F,
axes = F)
box()
axis(side = 2,
las = 1)
if (istrata == 60) axis(side = 1)
lines(n ~ cv,
data = sub_settings,
subset = strata == istrata)
}
if (irow == 2) {
plot(n ~ cv,
data = settings,
subset = strata == istrata,
las = 1,
pch = 16,
ylim = c(0, 1100),
xlim = c(plot_settings$xmin[irow],
plot_settings$xmax[irow]),
ann = F,
axes = F)
box()
if (istrata == 60) axis(side = 1)
lines(n ~ cv,
data = settings,
subset = strata == istrata)
}
abline(h = samples,
col = "grey",
lty = "dashed")
text(x = plot_settings$xlabel[irow],
y = samples,
labels = paste(1:3, "Boat"),
pos = 1)
text(x = plot_settings$xlabel[irow],
y = plot_settings$ymax[irow],
labels = paste(istrata, "Strata"),
font = 2,
pos = 1,
cex = 1.25)
if (istrata == 5) mtext(side = 3,
text = paste(plot_settings$type[irow],
"Optimization"),
line = 1)
}
}
mtext(side = 1,
text = "Upper CV Constraint",
outer = T,
line = 3)
mtext(side = 2,
text = "Total Sample Size",
outer = T,
line = 4)
dev.off()
}
##################################################
####   Set up directories
##################################################
rm(list = ls())
modelno = '10b'
VAST_dir = paste0("C:/Users/Zack Oyafuso/Google Drive/VAST_Runs/",
"VAST_output", modelno, "/")
diag_dir = paste0("C:/Users/Zack Oyafuso/Google Drive/VAST_Runs/diagnostics/",
"VAST_model", modelno, "/")
github_dir = paste0('C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/')
##################################################
#### Import: Species Set
#### Design-based estimates
#### VAST fit
##################################################
spp_df = read.csv(paste0(github_dir, "data/spp_df.csv"),
check.names=F, header = T, row.names = 'modelno')
GOA_DBE = readRDS(file = paste0("C:/Users/Zack Oyafuso/Documents/GitHub/",
"MS_OM_GoA/data/",
"GOA_biomass_indices_wnames.rds") )
load(file = paste0(VAST_dir, 'fit.RData'))
VAST_dir
modelno = '10d'
VAST_dir = paste0("C:/Users/Zack Oyafuso/Google Drive/VAST_Runs/",
"VAST_output", modelno, "/")
diag_dir = paste0("C:/Users/Zack Oyafuso/Google Drive/VAST_Runs/diagnostics/",
"VAST_model", modelno, "/")
github_dir = paste0('C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/')
##################################################
#### Import: Species Set
#### Design-based estimates
#### VAST fit
##################################################
spp_df = read.csv(paste0(github_dir, "data/spp_df.csv"),
check.names=F, header = T, row.names = 'modelno')
GOA_DBE = readRDS(file = paste0("C:/Users/Zack Oyafuso/Documents/GitHub/",
"MS_OM_GoA/data/",
"GOA_biomass_indices_wnames.rds") )
load(file = paste0(VAST_dir, 'fit.RData'))
dir(VAST_dir)
GOA_DBE = readRDS(file = paste0("C:/Users/Zack Oyafuso/Documents/GitHub/",
"GoA_MS_OM_GoA/data/",
"GOA_biomass_indices_wnames.rds") )
load(file = paste0(VAST_dir, 'fit.RData'))
GOA_DBE = readRDS(file = paste0("C:/Users/Zack Oyafuso/Documents/GitHub/",
"GOA_MS_OM_GoA/data/",
"GOA_biomass_indices_wnames.rds") )
GOA_DBE = readRDS(file = paste0("C:/Users/Zack Oyafuso/Documents/GitHub/",
"MS_OM_GoA/data/",
"GOA_biomass_indices_wnames.rds") )
GOA_DBE
GOA_DBE
VAST_dir = paste0("C:/Users/Zack Oyafuso/Google Drive/GOA_VAST_Runs/",
"VAST_output", modelno, "/")
diag_dir = paste0("C:/Users/Zack Oyafuso/Google Drive/VAST_Runs/diagnostics/",
"VAST_model", modelno, "/")
github_dir = paste0('C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/')
##################################################
#### Import: Species Set
#### Design-based estimates
#### VAST fit
##################################################
spp_df = read.csv(paste0(github_dir, "data/spp_df.csv"),
check.names=F, header = T, row.names = 'modelno')
GOA_DBE = readRDS(file = paste0("C:/Users/Zack Oyafuso/Documents/GitHub/",
"MS_OM_GoA/data/",
"GOA_biomass_indices_wnames.rds") )
load(file = paste0(VAST_dir, 'fit.RData'))
##################################################
#### Constants
##################################################
Year_Set = seq(min(fit$data_frame[,'t_i']),max(fit$data_frame[,'t_i']))
Years2Include = which( Year_Set %in% sort(unique(fit$data_frame[,'t_i'])))
Index_Ests = fit$Report$Index_cyl[,Years2Include,1]
Index_SDs = matrix(data = fit$parameter_estimates$SD$sd[attributes(fit$parameter_estimates$SD$value)$names == "Index_cyl"], nrow = 15 )[,Years2Include]
sci_names = names(spp_df)[unlist(spp_df[modelno,])]
sci_names = sort(sci_names)
spp_to_include = which(!(sci_names %in% 'Sebastes B_R') == T)
ns = length(spp_to_include)
Index_Ests
###############################################################################
## Project:       Compare Design- and VAST-based abundance indices
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Plot mean and CIs of abundance indices
###############################################################################
##################################################
####   Set up directories
##################################################
rm(list = ls())
modelno = '6g'
VAST_dir = paste0("C:/Users/Zack Oyafuso/Google Drive/GOA_VAST_Runs/",
"VAST_output", modelno, "/")
diag_dir = paste0("C:/Users/Zack Oyafuso/Google Drive/VAST_Runs/diagnostics/",
"VAST_model", modelno, "/")
github_dir = paste0('C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/')
##################################################
#### Import: Species Set
#### Design-based estimates
#### VAST fit
##################################################
spp_df = read.csv(paste0(github_dir, "data/spp_df.csv"),
check.names=F, header = T, row.names = 'modelno')
GOA_DBE = readRDS(file = paste0("C:/Users/Zack Oyafuso/Documents/GitHub/",
"MS_OM_GoA/data/",
"GOA_biomass_indices_wnames.rds") )
load(file = paste0(VAST_dir, 'fit.RData'))
##################################################
#### Constants
##################################################
Year_Set = seq(min(fit$data_frame[,'t_i']),max(fit$data_frame[,'t_i']))
Years2Include = which( Year_Set %in% sort(unique(fit$data_frame[,'t_i'])))
Index_Ests = fit$Report$Index_cyl[,Years2Include,1]
Index_SDs = matrix(data = fit$parameter_estimates$SD$sd[attributes(fit$parameter_estimates$SD$value)$names == "Index_cyl"], nrow = 15 )[,Years2Include]
sci_names = names(spp_df)[unlist(spp_df[modelno,])]
sci_names = sort(sci_names)
spp_to_include = which(!(sci_names %in% 'Sebastes B_R') == T)
ns = length(spp_to_include)
Index_Ests
VAST_dir
Index_Ests / 1e6
round(Index_Ests / 1e6, 3)
?readRDS
Index_SDs
fit$parameter_estimates$SD$value)$names == "Index_cyl"
##################################################
#### Constants
##################################################
Year_Set <- seq(min(fit$data_frame[,"t_i"]),
max(fit$data_frame[,"t_i"]))
##################################################
#### Constants
##################################################
Year_Set <- seq(min(fit$data_frame[,"t_i"]),
max(fit$data_frame[,"t_i"]))
Years2Include <- which( Year_Set %in% sort(unique(fit$data_frame[,"t_i"])))
Years2Include
fit$parameter_estimates$SD$sd
fit$parameter_estimates$SD
fit$parameter_estimates$SD$sd
fit$parameter_estimates$SD
str(fit$parameter_estimates$SD)
attributes(fit$parameter_estimates$SD$value)
attributes(fit$parameter_estimates$SD$value)$names
attributes(fit$parameter_estimates$SD$value)$names == "Index_cyl"
Index_idx = attributes(fit$parameter_estimates$SD$value)$names == "Index_cyl"
Index_SDs <- matrix(data = fit$parameter_estimates$SD$sd[Index_idx],
nrow = 15)[,Years2Include]
Index_SDs
sci_names <- names(spp_df)[unlist(spp_df[modelno,])]
sci_names
sci_names <- sort(names(spp_df)[unlist(spp_df[modelno,])])
sci_names <- sort(names(spp_df)[unlist(spp_df[modelno,])])
sci_names
spp_to_include = which(!(sci_names %in% "Sebastes B_R") == T)
ns = length(spp_to_include)
par(mfrow = c(3, 5),
mar = c(3, 3, 2, 1),
oma = c(0, 2.5, 0, 0))
order(temp_DBE$YEAR)
spp_to_include
spp = 1
#Design based Estimator and SD Interval
temp_DBE <- subset(GOA_DBE,
SPECIES_NAME == sci_names[spp] &
YEAR %in% Year_Set[Years2Include])
temp_DBE
temp_DBE <- temp_DBE[order(temp_DBE$YEAR), ]
upper_DBE <- (temp_DBE$TOTAL_BIOMASS + sqrt(temp_DBE$BIOMASS_VAR))/1e6
lower_DBE <- (temp_DBE$TOTAL_BIOMASS - sqrt(temp_DBE$BIOMASS_VAR))/1e6
#VAST SD Intervals
upper = (Index_Ests + Index_SDs)/1e6
lower = (Index_Ests - Index_SDs)/1e6
###############################################################################
## Project:       Spatiotemporal Survey Optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Conduct SamplingStrata R package multispecies stratified
##                survey optimization
###############################################################################
rm(list = ls())
##################################################
####    Import required packages
##################################################
library(sp)
library(RColorBrewer)
library(raster)
##################################################
####   Set up directories
####
####   Set up some constants of the optimization
####   Flexible: Spatiotemporal Variance, species specific CV constraints
####   Spatial:  Spatial Variance, 1 CV constraint
####   Single_Species: Spatiotemporal Variance, univariate optimization,
####                   one CV constraint
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[2]
VAST_model <- "11"
SamplingStrata_dir <- paste0(c("/Users/zackoyafuso/",
"C:/Users/Zack Oyafuso/",
"C:/Users/zack.oyafuso/")[which_machine],
"Downloads/SamplingStrata-master/R")
which_method = c("Flexible" = 1,
"Spatial" = 2,
"Single_Species" = 3)[3]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/model_",
VAST_model, "/",
c("Spatiotemporal_Optimization/",
"Spatial_Optimization/",
"Single_Species_Optimization/")[which_method])
##################################################
####   Load functions from SamplingStrata packages into global environment
####   Load modified buildStrataDF function if using spatiotemporal
####   stratum variance
##################################################
if (which_method %in% c(1,3)) {
for (ifile in dir(SamplingStrata_dir, full.names = T)) source(ifile)
source(paste0(dirname(dirname(github_dir)),
"/modified_functions/buildStrataDF_Zack.R"))
}
if (which_method %in% 2) {
library(SamplingStrata)
}
##################################################
####   Load Data
##################################################
load(paste0(dirname(github_dir), "/optimization_data.RData"))
load(paste0(dirname(dirname(github_dir)), "/data/Extrapolation_depths.RData"))
##################################################
####   If doing a survey comparison (for models 10x and 11)
####   Load Simulated Survey metrics for use in threshold levels
##################################################
if (VAST_model %in% c(paste0(10, letters[1:4]), '11') ) {
load(paste0(dirname(github_dir), "/Survey_Comparison_Simulations/",
"Survey_Simulation_Results.RData"))
}
stratas <- c(5,10,15,20,30,60)
ns <- c(15, 15, 1)[which_method]
##################################################
####   If Single_Species: subset just the one species
##################################################
SS_which_species <- 2 #which species are we doing?
sci_names
##################################################
####   If Single_Species: subset just the one species
##################################################
SS_which_species <- 2 #which species are we doing?
if (which_method == 3) {
SS_which_species <- 15 #which species are we doing?
frame <- frame[,c("id", "X1", "X2", paste0("Y", SS_which_species),
"domainvalue")]
frame_raw <- frame_raw[,c("id", "X1", "X2",
paste0("Y", SS_which_species),
"domainvalue", "year")]
names(frame)[4] <- names(frame_raw)[4] <- "Y1"
github_dir = paste0(github_dir, gsub(x = sci_names[SS_which_species],
pattern = ' ',
replacement = '_'), '/')
if(!dir.exists(github_dir)) dir.create(github_dir)
}
##################################################
####  lower CV threshold
####  If doing a survey comparison, set to the median of the simulated surveys
####  Else: set to 0.10 for all scenarios (naive assumption)
##################################################
if (VAST_model %in% c(paste0(10, letters[1:4]), '11') ) {
threshold <- list(apply(Survey_true_cv_array,
MARGIN = 2:3, FUN = median),
apply(Survey_true_cv_array,
MARGIN = 2:3, FUN = median),
matrix(0, nrow = ns, ncol = 3))[[which_method]]
} else {
threshold <- matrix(0.1, nrow = ns, ncol = 3)
}
##################################################
####   Run optimization
##################################################
par(mfrow = c(6,6), mar = c(2,2,0,0))
for (istrata in 2) {
temp_strata <- stratas[istrata]
##Initial Condition
Run <- 1
isample <- 1
current_n <- 0
##Initial Upper CV constraints
if (VAST_model %in% c(paste0(10, letters[1:4]), '11') ) {
CV_constraints <- list(
rep(c(.4, 0.3, 0.2)[isample], ns),
rep(c(.4, 0.3, 0.2)[isample], ns),
c(0.09, 0.20, 0.10,
0.09, 0.08, 0.07,
0.05, 0.09, 0.15,
0.09, 0.20, 0.06,
0.30, 0.20, 0.06)[SS_which_species])[[which_method]]
creep_rate <- c(0.1, 0.05, 0.025)[isample]
} else {
CV_constraints <- list(
rep(c(.4, 0.3, 0.2)[isample], ns),
rep(c(.2, 0.15, 0.1)[isample], ns))[[which_method]]
creep_rate <- c(0.02, 0.01)[which_method]
}
#Create CV dataframe
cv <- list()
for (spp in 1:ns) cv[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv[["DOM"]] <- 1
cv[["domainvalue"]] <- 1
cv <- as.data.frame(cv)
while(current_n <= 820){ #Run until you reach 820 samples
#Set wd for output files, create a directory if it doesn"t exist yet
temp_dir = paste0(github_dir, "Str", temp_strata, "Run",Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 200,
pops = 30,
elitism_rate = 0.1,
mut_chance = 1 / (temp_strata + 1),
nStrata = temp_strata,
showPlot = T,
parallel = F,
writeFiles = T)
sum_stats <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
#Plot Solution
goa <- SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = solution$framenew$STRATO) )
goa_ras <- raster(goa, resolution = 5)
goa_ras <- rasterize(x = goa, y = goa_ras, field = "Str_no")
png(filename = "solution.png", width = 5, height = 5, units = "in",
res = 500)
plot(goa_ras, axes = F,
col = terrain.colors(temp_strata)[sample(temp_strata)])
dev.off()
#Save Output
CV_constraints <- expected_CV(strata = solution$aggr_strata)
current_n <- sum(sum_stats$Allocation)
isample <- ifelse(current_n < 280, 1, #1 boat
ifelse(current_n < 550, 2, #2 boat
3)) #3 boat
result_list <- list(solution = solution,
sum_stats = sum_stats,
CV_constraints = CV_constraints,
n = current_n)
save(list = "result_list", file = "result_list.RData")
#Set up next run by changing upper CV constraints
#If doing a survey comparison, reduce CV proportionally
#Else: reduce CV absolutely
Run <- Run + 1
if (VAST_model %in% c(paste0(10, letters[1:4]), '11') ) {
creep_rate <- c(0.1, 0.05, 0.05)[isample]
CV_constraints <- CV_constraints * (1 - creep_rate)
} else {
CV_constraints <- CV_constraints - creep_rate
}
#Apply lower threshold: if CV is lower than the threshold, set CV to
#to the lower theshold
for (ispp in 1:ns) {
CV_constraints[ispp] <-
ifelse(CV_constraints[ispp]<threshold[ispp, isample],
threshold[ispp, isample],
CV_constraints[ispp])
}
#Create CV dataframe in the formmat of SamplingStrata
cv <- list()
for (spp in 1:ns) cv[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv[["DOM"]] <- 1
cv[["domainvalue"]] <- 1
cv <- as.data.frame(cv)
}
}
