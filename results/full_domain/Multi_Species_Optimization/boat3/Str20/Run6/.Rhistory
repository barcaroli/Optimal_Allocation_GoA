labels = 1:5),
id = 1:n_cells,
X1 = with(Extrapolation_depths, E_km - min(E_km)),
X2 = Extrapolation_depths$DEPTH_EFH,
WEIGHT = n_years),
matrix(data = apply(X = D_gct[, , years_included],
MARGIN = c(1, 2),
FUN = sum),
ncol = ns_opt,
dimnames = list(NULL, paste0("Y", 1:ns_all))),
matrix(data = apply(X = D_gct[, , years_included],
MARGIN = c(1, 2),
FUN = function(x) sum(x^2)),
ncol = ns_opt,
dimnames = list(NULL, paste0("Y", 1:ns_all, "_SQ_SUM")))
)
###############################################################################
rm(list = ls())
##################################################
####    Set up directories here first
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/")
##################################################
####   Load the true density, true index, and spatial domain dataset
##################################################
load(paste0(github_dir,  "data/fit_density.RData"))
load(paste0(github_dir,  "data/fit_Index.RData"))
load(paste0(github_dir, "/data/Extrapolation_depths.RData"))
##################################################
####   Constants used throughout all scripts
##################################################
## Years to use
year_set <- 1996:2019
years_included <- c(1, 4, 8, 10, 12, 14, 16, 18, 20, 22, 24)
n_years <- length(years_included)
## Number of sampling grids
n_cells <- nrow(Extrapolation_depths)
## Scientific and common names used in optimization
sci_names_opt <- c("Atheresthes stomias", "Gadus chalcogrammus",
"Gadus macrocephalus", "Glyptocephalus zachirus",
"Hippoglossoides elassodon", "Hippoglossus stenolepis",
"Lepidopsetta bilineata", "Lepidopsetta polyxystra",
"Microstomus pacificus", "Sebastes alutus", "Sebastes B_R",
"Sebastes brevispinis", "Sebastes polyspinis",
"Sebastes variabilis", "Sebastolobus alascanus" )
common_names_opt <- c("arrowtooth flounder", "Alaska pollock", "Pacific cod",
"rex sole", "flathead sole", "Pacific halibut",
"southern rock sole", "northern rock sole",
"Pacific Dover sole", "Pacific ocean perch",
"blackspotted/rougheye\nrockfishes",
"silvergrey rockfish", "northern rockfish",
"dusky rockfish", "shortspine thornyhead")
ns_opt <- length(sci_names_opt)
## Scientific and common names not used in optimization, but evaluated
## when simulating surveys
sci_names_eval <- c("Anoplopoma fimbria", "Beringraja spp.", "Octopus spp.",
"Pleurogrammus monopterygius", "Sebastes borealis",
# "Sebastes ruberrimus",
"Sebastes variegatus", "Squalus suckleyi")
common_names_eval <- c("sablefish", "skates spp.", "Octopus spp.",
"Atka mackerel", "shortraker rockfish",
# "yelloweye rockfish",
"harlequin rockfish", "spiny dogfish")
ns_eval <- length(sci_names_eval)
## In case we need it, all species names together
sci_names_all <- sort(c(sci_names_opt, sci_names_eval))
common_names_all <- c(common_names_opt,
common_names_eval)[order(c(sci_names_opt,
sci_names_eval))]
ns_all <- ns_opt + ns_eval
spp_idx_opt <- which(sci_names_all %in% sci_names_opt)
spp_idx_eval <- which(sci_names_all %in% sci_names_eval)
## Sample sizes across 1, 2, and 3 boats
samples <- c(280, 550, 820)
n_boats <- length(samples)
## Number of strata to input into optimization
stratas <- c(10, 15, 20)
n_strata <- length(stratas)
## Specify Management Districts
districts <- data.frame("reg_area" = c("WRA", "CRA",
"CRA", "ERA", "ERA"),
"district" = c("W", "Chirikof",
"Kodiak", "Yakutat", "SE"),
"domainvalue" = 1:5,
"W_lon" = c(-170, -159, -154, -147, -140),
"E_lon" = c(-159, -154, -147, -140, -132))
n_dom <- nrow(districts)
district_vals <- cut(x = Extrapolation_depths$Lon,
breaks = c(-170, -159, -154, -147, -140, -132),
labels = 1:5)
## Number of times to simulate survey
n_iters <- 1000
obs_cv <- c(0, 0.1, 0.25, 0.5, 1) #low to high sampling CVs
n_obs_cv <- length(obs_cv)
##################################################
####   Our df will have fields for:
####   domain: only one domain so the value is just 1
####   id: unique ID for each sampling cell
####   X1: strata variable 1: longitude in eastings (km). Because the
####           optimization does not read in negative values, I shift the
####           values so that the lowest value is 0
####   X2: strata variable 2: depth of cell (m)
####
####   Variables used to more efficiently calcualte stratum variance
####
####   WEIGHT: number of observed years
####   Y1, Y2, ... : density for a given cell summed across observed years
####   Y1_SQ_SUM, Y2_SQ_SUM, ... : density-squared for a given cell,
####           summed across observed years
##################################################
frame_all <- cbind(data.frame(domainvalue = 1,
id = 1:n_cells,
X1 = with(Extrapolation_depths, E_km - min(E_km)),
X2 = Extrapolation_depths$DEPTH_EFH,
WEIGHT = n_years),
matrix(data = apply(X = D_gct[, , years_included],
MARGIN = c(1, 2),
FUN = sum),
ncol = ns_all,
dimnames = list(NULL, paste0("Y", 1:ns_all))),
matrix(data = apply(X = D_gct[, , years_included],
MARGIN = c(1, 2),
FUN = function(x) sum(x^2)),
ncol = ns_all,
dimnames = list(NULL, paste0("Y", 1:ns_all, "_SQ_SUM")))
)
frame_district <- cbind(data.frame(
domainvalue = cut(x = Extrapolation_depths$Lon,
breaks = c(-170, -159, -154, -147, -140, -132),
labels = 1:5),
id = 1:n_cells,
X1 = with(Extrapolation_depths, E_km - min(E_km)),
X2 = Extrapolation_depths$DEPTH_EFH,
WEIGHT = n_years),
matrix(data = apply(X = D_gct[, , years_included],
MARGIN = c(1, 2),
FUN = sum),
ncol = ns_opt,
dimnames = list(NULL, paste0("Y", 1:ns_all))),
matrix(data = apply(X = D_gct[, , years_included],
MARGIN = c(1, 2),
FUN = function(x) sum(x^2)),
ncol = ns_opt,
dimnames = list(NULL, paste0("Y", 1:ns_all, "_SQ_SUM")))
)
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/optimization_data.R', echo=TRUE)
head(frame_all)
head(frame_district)
load("~/GitHub/Optimal_Allocation_GoA/data/optimization_data.RData")
head(Frame)
head(frame)
head(frame_all)
n_cells / 2
###############################################################################
## Project:       Simple Optimization Example
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Run a very simple and short optimization on Gulf of Alaska
##                groundfishes. This is a reduced form of the actual
##                multispecies optimization.
###############################################################################
rm(list = ls())
github_dir <- paste0("C:/Users/zack.oyafuso/Work/GitHub",
"/Optimal_Allocation_GoA/")
##################################################
####  Install a forked version of the SamplingStrata Package from
####  zoyafuso-NOAA's Github page
####
####  Import other required packages
##################################################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
library(SamplingStrata)
library(sp)
library(RColorBrewer)
library(raster)
##################################################
####   Load input data
##################################################
load(paste0(github_dir, "data/optimization_data.RData"), verbose = T)
load(paste0(github_dir, "/data/Extrapolation_depths.RData"), verbose = T)
####
####   The next three quantities are used to speed up the population stratum
####   variance caluclation, which includes both spatial and temporal variation
####   across all cells within a stratum:
####
####   YS: VAST-predicted density of species S summed over observed years
####   YS_SQ_SUM: VAST-predicted squared density of species s summed
####   over observed years
####   WEIGHT: number of observed years
##################################################
which_spp <- c(2, 5, 21)
n_spp <- length(which_spp)
sci_names_all[which_spp]
frame <- frame_all[, c("id", "X1", "X2", "WEIGHT",
paste0("Y", which_spp),
paste0("Y", which_spp, "_SQ_SUM"),
"domainvalue")]
names(frame)[names(frame) %in% paste0("Y", which_spp)] <- paste0("Y", 1:n_spp)
names(frame)[names(frame) %in% paste0("Y", which_spp, "_SQ_SUM")] <-
paste0("Y", 1:n_spp, "_SQ_SUM")
head(frame)
##################################################
####   Specify the population CV to optimize over: the optimization will
###    minimize total sample size subject to these population CV constraints.
###    Specify one CV (upper-constraint) value for each species of interest
##################################################
CV_constraints = rep(0.1, n_spp)
#Create CV dataframe
cv_input <- list()
for (spp in 1:n_spp) cv_input[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv_input[["DOM"]] <- 1
cv_input[["domainvalue"]] <- 1
(cv_input <- as.data.frame(cv_input))
##################################################
####  Install a forked version of the SamplingStrata Package from
####  zoyafuso-NOAA's Github page
####
####  Import other required packages
##################################################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
library(SamplingStrata)
library(sp)
library(RColorBrewer)
library(raster)
##################################################
####   Load input data
##################################################
load(paste0(github_dir, "data/optimization_data.RData"), verbose = T)
load(paste0(github_dir, "/data/Extrapolation_depths.RData"), verbose = T)
##################################################
####   For speed, we'll subset just three species:
####   Atheresthes stomias, Gadus macrocephalus, Sebastolobus alascanus
####
####   The frame df contains information for each cell in the spatial domain
####   The X variabces are the habitat variables
####   X1: scaled UTM eastings
####   X2: depth (m)
####
####   The next three quantities are used to speed up the population stratum
####   variance caluclation, which includes both spatial and temporal variation
####   across all cells within a stratum:
####
####   YS: VAST-predicted density of species S summed over observed years
####   YS_SQ_SUM: VAST-predicted squared density of species s summed
####   over observed years
####   WEIGHT: number of observed years
##################################################
which_spp <- c(2, 5, 21)
n_spp <- length(which_spp)
sci_names_all[which_spp]
frame <- frame_all[, c("id", "X1", "X2", "WEIGHT",
paste0("Y", which_spp),
paste0("Y", which_spp, "_SQ_SUM"),
"domainvalue")]
names(frame)[names(frame) %in% paste0("Y", which_spp)] <- paste0("Y", 1:n_spp)
names(frame)[names(frame) %in% paste0("Y", which_spp, "_SQ_SUM")] <-
paste0("Y", 1:n_spp, "_SQ_SUM")
head(frame)
##################################################
####   Specify the population CV to optimize over: the optimization will
###    minimize total sample size subject to these population CV constraints.
###    Specify one CV (upper-constraint) value for each species of interest
##################################################
CV_constraints = rep(0.1, n_spp)
#Create CV dataframe
cv_input <- list()
for (spp in 1:n_spp) cv_input[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv_input[["DOM"]] <- 1
cv_input[["domainvalue"]] <- 1
(cv_input <- as.data.frame(cv_input))
##################################################
####   Run optimization
####   If you want to save the output, first setwd() to the directory you want
####   the output saved to, then turn the writeFiles argumenet to TRUE
####   Iterations are set to 50 for speed but in practice should be in the
####   hundreds. Population size (number of candidate solutions) is 10 for
####   speed but in practice should be higher (e.g., 30 or 50).
####   See ?SamplingStrata::optimStrata for descriptions of the other arguments
##################################################
num_of_strata = 10
solution <- SamplingStrata::optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 50,
pops = 10,
elitism_rate = 0.1,
mut_chance = 1 / (num_of_strata + 1),
nStrata = num_of_strata,
showPlot = T,
parallel = F,
writeFiles = F)
########
solution <- SamplingStrata::optimStrata(method = "continuous",
errors = cv_input,
framesamp = frame,
iter = 50,
pops = 10,
elitism_rate = 0.1,
mut_chance = 1 / (num_of_strata + 1),
nStrata = num_of_strata,
showPlot = T,
parallel = F,
writeFiles = F)
##################################################
####   Save result objects:
####   Stratum Characteristcs (sum_stats),
####   optimized CV (opt_CV): may be slightly lower than specified constraints,
####   and which cells belong to each stratum (solution_by_strata)
##################################################
(sum_stats <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE) )
(opt_CV <- expected_CV(strata = solution$aggr_strata))
solution_by_strata <- solution$framenew$STRATO
##################################################
####   Plot coarse map of the solution
##################################################
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[, c("E_km", "N_km")],
data = data.frame(Str_no = solution_by_strata) )
goa_ras <- raster::raster(goa,
resolution = 5)
goa_ras <- raster::rasterize(x = goa,
y = goa_ras,
field = "Str_no")
plot(goa_ras,
axes = F,
col = colorRampPalette(brewer.pal(name = "Paired", n = 12))(num_of_strata))
###############################################################################
## Project:       Spatiotemporal Survey Optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Conduct SamplingStrata R package multispecies stratified
##                survey optimization
###############################################################################
rm(list = ls())
##################################################
####  Install a forked version of the SamplingStrata Package from
####  zoyafuso-NOAA's Github page
####
####  Import other required packages
##################################################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
library(SamplingStrata)
library(sp)
library(RColorBrewer)
library(raster)
##################################################
####   Set up directories based on whether the optimization is being conducted
####        on a multi-species or single-species level
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/")
##################################################
####   Load Data
####   Load Population CVs for use in the thresholds
##################################################
load(paste0(github_dir, "/data/optimization_data.RData"))
load(paste0(github_dir, "/data/Extrapolation_depths.RData"))
##################################################
####   Create optimization scenarios
##################################################
scen <- data.frame(nstrata = c(3,5,10, 10,15,20),
which_domain = rep(c("district", "full_domain"), each = 3))
##################################################
####   Collect optimization results from each strata
##################################################
for (irow in 6) {
for(isample in n_boats) {
##################################################
####   Constants to specify before doing optimization
##################################################
which_domain <- scen$which_domain[irow]
frame <- switch( which_domain,
"full_domain" = frame_all,
"district" = frame_district)[, c("domainvalue", "id",
"X1", "X2", "WEIGHT",
paste0("Y", spp_idx_opt),
paste0("Y", spp_idx_opt,
"_SQ_SUM"))]
names(frame)[names(frame) %in% paste0("Y", spp_idx_opt)] <-
paste0("Y", 1:ns_opt)
names(frame)[names(frame) %in% paste0("Y", spp_idx_opt, "_SQ_SUM")] <-
paste0("Y", 1:ns_opt, "_SQ_SUM")
n_dom <- length(unique(frame$domainvalue))
temp_strata <- rep(x = scen$nstrata[irow], times = n_dom)
##Initial Condition
run <- 1
current_n <- 0
## Load SRS information to initialize the starting points for the CVs
load(paste0(github_dir, "results/", which_domain, "/srs_pop_cv.RData"))
cv_constraints <- get(paste0("srs_pop_cv_", which_domain))[, , isample]
cv_constraints <- switch(which_domain,
"district" = cv_constraints[spp_idx_opt, ],
"full_domain" = cv_constraints[spp_idx_opt])
cv <- list()
for (spp in 1:ns_opt)
cv[[paste0("CV", spp)]] <-
as.numeric(switch(which_domain,
"district" = cv_constraints[spp, ],
"full_domain" = cv_constraints[spp]))
cv[["DOM"]] <- 1:n_dom
cv[["domainvalue"]] <- 1:n_dom
cv <- as.data.frame(cv)
load(paste0(github_dir, "results/", which_domain,
"/Single_Species_Optimization/",
"optimization_knitted_results.RData"))
ss_strs_pop_cv <-
switch(which_domain,
"district" = t(subset(x = settings_district,
subset = iboat == isample &
spp %in% spp_idx_opt,
select = paste(1:5))),
"full_domain" = unlist(subset(x = settings_agg_full_domain,
subset = iboat == isample &
spp %in% spp_idx_opt,
select = cv)))
##################################################
####   Run optimization
##################################################
while (current_n <= c(280, 550, 820)[isample] ) {
#Set wd for output files, create a directory if it doesn"t exist yet
temp_dir = paste0(github_dir, "results/", which_domain,
"/Multi_Species_Optimization/boat", isample,
"/Str", temp_strata[1], "/Run", run)
if(!dir.exists(temp_dir)) dir.create(temp_dir, recursive = T)
setwd(temp_dir)
#Run optimization
if(which_domain == "full_domain") par(mfrow = c(6,6), mar = c(2,2,0,0))
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 300,
pops = 50,
elitism_rate = 0.1,
mut_chance = 1 / (temp_strata[1] + 1),
nStrata = temp_strata,
showPlot = T,
writeFiles = T)
sum_stats <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
#Plot Solution
plot_solution <- as.factor(paste(solution$framenew$DOMAINVALUE,
solution$framenew$STRATO))
plot_solution <- as.integer(plot_solution)
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("Lon", "Lat")],
data = data.frame(Str_no = plot_solution) )
goa_ras <- raster::raster(x = goa,
resolution = 0.075)
goa_ras <- raster::rasterize(x = goa,
y = goa_ras,
field = "Str_no")
png(filename = "solution.png",
width = 5,
height = 3,
units = "in",
res = 500)
par(mfrow = c(1, 1),
mar = c(1, 1, 1, 1))
plot( goa_ras,
axes = F,
asp = 1,
col = colorRampPalette(
brewer.pal(n = 11,
name = "Paired"))(sum(temp_strata))[sample(1:sum(temp_strata))] )
rect(xleft = districts$W_lon,
xright = districts$E_lon,
ybottom = tapply(X = Extrapolation_depths$Lat,
INDEX = district_vals,
FUN = min),
ytop = tapply(X = Extrapolation_depths$Lat,
INDEX = district_vals,
FUN = max))
text(x = rowMeans(districts[, c("W_lon", "E_lon")]),
y = tapply(X = Extrapolation_depths$Lat,
INDEX = district_vals,
FUN = max),
labels = districts$district,
pos = 3)
box()
dev.off()
#Save Output
cv_constraints <- expected_CV(strata = solution$aggr_strata)
current_n <- sum(sum_stats$Allocation)
result_list <- list(solution = solution,
sum_stats = sum_stats,
cv_constraints = cv_constraints,
n = current_n)
save(list = "result_list", file = "result_list.RData")
#Set up next run by changing upper CV constraints
run <- run + 1
cv_constraints <- 0.95 * cv_constraints + 0.05 * ss_strs_pop_cv
#Create CV dataframe in the formmat of SamplingStrata
cv <- list()
for (spp in 1:ns_opt)
cv[[paste0("CV", spp)]] <- as.numeric(cv_constraints[, spp])
cv[["DOM"]] <- 1:n_dom
cv[["domainvalue"]] <- 1:n_dom
cv <- as.data.frame(cv)
}
}
}
