"cell_areas" = Extrapolation_depths$Area_km2,
"obs_CV" = obs_CV[ierror],
"solution" = switch(
isurvey,
"Current" = Extrapolation_depths$stratum_new_label,
"STRS" = res_df[, paste0("sol_", iboat)]),
"allocation" = switch(
isurvey,
"Current" = allocations[, paste0("boat", iboat)],
"STRS" = strata_list[[iboat]]$Allocation),
"true_density" = true_mean,
"true_index_district" = true_index_district,
"post_strata" = district_vals
)
)
# for (iter in 1:Niters) {
for (iter in 1:100) {
set.seed(1000 + iter)
for (ierror in 1:nobs_CV) {
for (iboat in 1:3) {
for (isurvey in c("Current", "STRS")) {
sim_survey <-
do_STRS(
input = list(
"density" = D_gct[1:N , 1:ns_all, Years2Include],
"cell_areas" = Extrapolation_depths$Area_km2,
"obs_CV" = obs_CV[ierror],
"solution" = switch(
isurvey,
"Current" = Extrapolation_depths$stratum_new_label,
"STRS" = res_df[, paste0("sol_", iboat)]),
"allocation" = switch(
isurvey,
"Current" = allocations[, paste0("boat", iboat)],
"STRS" = strata_list[[iboat]]$Allocation),
"true_density" = true_mean,
"true_index_district" = true_index_district,
"post_strata" = district_vals
)
)
## Record results based on whether it's current or optimized surveys
stmt <- paste0(isurvey, "_sim_mean",
"[ierror, , , iboat, iter] = sim_survey$mean_denisty")
eval(parse(text = stmt))
stmt <- paste0(isurvey, "_sim_cv",
"[ierror, , , iboat, iter] = sim_survey$cv")
eval(parse(text = stmt))
stmt <- paste0(isurvey, "_rel_bias_est",
"[ierror, , , iboat, iter] = sim_survey$rel_bias")
eval(parse(text = stmt))
stmt <- paste0(isurvey,
"_rel_bias_index_district[ierror, , , iboat, , iter]",
" <- sim_survey$bias_index_district")
eval(parse(text = stmt))
}
}
}
if(iter%%10 == 0) print(paste("Finished with Iteration", iter))
}
##################################
## Calculate Performance Metric
##################################
for (ierror in 1:nobs_CV) {
for (iboat in 1:3) {
for (isurvey in c("Current", "STRS")) {
for (ispp in 1:ns_all) {
for(iyear in 1:NTime) {
## Calculate True CV
stmt <- paste0(
isurvey, "_true_cv_array[ierror, iyear, ispp, iboat]",
" <- temp_true_cv <- sd(", isurvey,
"_sim_mean[ierror, iyear, ispp, iboat,], na.rm = T) / ",
"true_mean[ispp, iyear]")
eval(parse(text = stmt))
temp_sim_cv <- get(paste0(isurvey,
"_sim_cv"))[ierror, iyear, ispp, iboat,]
## Calculate RRMSE of CV
stmt <- paste0(
isurvey, "_rrmse_cv_array[ierror, iyear, ispp, iboat] <- ",
"sqrt(mean((temp_sim_cv - temp_true_cv)^2, na.rm = T)) / ",
"mean(temp_sim_cv, na.rm = T)")
eval(parse(text = stmt))
}
}
}
}
}
str(STRS_rel_bias_index_district)
STRS_rel_bias_index_district["obsCV=0", "year_1", "Atheresthes stomias", "boat_2", , 1:100]
boxplot(STRS_rel_bias_index_district["obsCV=0", "year_1", "Atheresthes stomias", "boat_2", , 1:100])
boxplot(t(STRS_rel_bias_index_district["obsCV=0", "year_1", "Atheresthes stomias", "boat_2", , 1:100]))
boxplot(t(STRS_rel_bias_index_district["obsCV=0", "year_1", "Sebastes brevispinis", "boat_2", , 1:100]))
STRS_rel_bias_est
str(STRS_rel_bias_est)
STRS_rel_bias_est[1,1,"Atheresthes stomias", "boat_2",]
STRS_rel_bias_est[1,1,"Atheresthes stomias", "boat_2",1:100]
boxplot(STRS_rel_bias_est[1,1,"Atheresthes stomias", "boat_2",1:100])
boxplot(STRS_rel_bias_est[1,1,"Atheresthes stomias", "boat_2",1:100]); abline(h = 0)
boxplot(STRS_rel_bias_est[1,1,"Sebastes brevispinis", "boat_2",1:100]); abline(h = 0)
boxplot(STRS_rel_bias_est[1,1,"Sebastes polyspinis", "boat_2",1:100]); abline(h = 0)
boxplot(STRS_rel_bias_est[1,1,"Sebastes aleutus", "boat_2",1:100]); abline(h = 0)
boxplot(STRS_rel_bias_est[1,1,"Sebastes alutus", "boat_2",1:100]); abline(h = 0)
# for (iter in 1:Niters) {
for (iter in 201:1000) {
set.seed(1000 + iter)
for (ierror in 1:nobs_CV) {
for (iboat in 1:3) {
for (isurvey in c("Current", "STRS")) {
sim_survey <-
do_STRS(
input = list(
"density" = D_gct[1:N , 1:ns_all, Years2Include],
"cell_areas" = Extrapolation_depths$Area_km2,
"obs_CV" = obs_CV[ierror],
"solution" = switch(
isurvey,
"Current" = Extrapolation_depths$stratum_new_label,
"STRS" = res_df[, paste0("sol_", iboat)]),
"allocation" = switch(
isurvey,
"Current" = allocations[, paste0("boat", iboat)],
"STRS" = strata_list[[iboat]]$Allocation),
"true_density" = true_mean,
"true_index_district" = true_index_district,
"post_strata" = district_vals
)
)
## Record results based on whether it's current or optimized surveys
stmt <- paste0(isurvey, "_sim_mean",
"[ierror, , , iboat, iter] = sim_survey$mean_denisty")
eval(parse(text = stmt))
stmt <- paste0(isurvey, "_sim_cv",
"[ierror, , , iboat, iter] = sim_survey$cv")
eval(parse(text = stmt))
stmt <- paste0(isurvey, "_rel_bias_est",
"[ierror, , , iboat, iter] = sim_survey$rel_bias")
eval(parse(text = stmt))
stmt <- paste0(isurvey,
"_rel_bias_index_district[ierror, , , iboat, , iter]",
" <- sim_survey$bias_index_district")
eval(parse(text = stmt))
}
}
}
if(iter%%10 == 0) print(paste("Finished with Iteration", iter))
}
boxplot(STRS_rel_bias_est[1,1,"Sebastes alutus", "boat_2",1:300]); abline(h = 0)
boxplot(Current_rel_bias_est[1,1,"Sebastes alutus", "boat_2",1:300]); abline(h = 0)
boxplot(Current_rel_bias_index_district[1,1,"Sebastes alutus", "boat_2", ,1:300]); abline(h = 0)
boxplot(t(Current_rel_bias_index_district[1,1,"Sebastes alutus", "boat_2", ,1:300])); abline(h = 0)
boxplot(t(Current_rel_bias_index_district[1,1,"Sebastolobus alascanus", "boat_2", ,1:300])); abline(h = 0)
boxplot(t(STRS_rel_bias_index_district[1,1,"Sebastolobus alascanus", "boat_2", ,1:300])); abline(h = 0)
boxplot(Current_rel_bias_est[1,1,"Sebastes alutus", "boat_2",1:300]); abline(h = 0)
boxplot(Current_rel_bias_est[1,1,"Sebastolobus alascanus", "boat_2",1:300]); abline(h = 0)
boxplot(STRS_rel_bias_est[1,1,"Sebastolobus alascanus", "boat_2",1:300]); abline(h = 0)
# for (iter in 1:Niters) {
for (iter in 331:1000) {
set.seed(1000 + iter)
for (ierror in 1:nobs_CV) {
for (iboat in 1:3) {
for (isurvey in c("Current", "STRS")) {
sim_survey <-
do_STRS(
input = list(
"density" = D_gct[1:N , 1:ns_all, Years2Include],
"cell_areas" = Extrapolation_depths$Area_km2,
"obs_CV" = obs_CV[ierror],
"solution" = switch(
isurvey,
"Current" = Extrapolation_depths$stratum_new_label,
"STRS" = res_df[, paste0("sol_", iboat)]),
"allocation" = switch(
isurvey,
"Current" = allocations[, paste0("boat", iboat)],
"STRS" = strata_list[[iboat]]$Allocation),
"true_density" = true_mean,
"true_index_district" = true_index_district,
"post_strata" = district_vals
)
)
## Record results based on whether it's current or optimized surveys
stmt <- paste0(isurvey, "_sim_mean",
"[ierror, , , iboat, iter] = sim_survey$mean_denisty")
eval(parse(text = stmt))
stmt <- paste0(isurvey, "_sim_cv",
"[ierror, , , iboat, iter] = sim_survey$cv")
eval(parse(text = stmt))
stmt <- paste0(isurvey, "_rel_bias_est",
"[ierror, , , iboat, iter] = sim_survey$rel_bias")
eval(parse(text = stmt))
stmt <- paste0(isurvey,
"_rel_bias_index_district[ierror, , , iboat, , iter]",
" <- sim_survey$bias_index_district")
eval(parse(text = stmt))
}
}
}
if(iter%%10 == 0) print(paste("Finished with Iteration", iter))
}
str(STRS_rel_bias_index_district)
STRS_rel_bias_index_district["obsCV=0", "year_1", , "boat_2", , ]
str(STRS_rel_bias_index_district["obsCV=0", "year_1", , "boat_2", , ])
boxplot(t(STRS_rel_bias_index_district["obsCV=0", "year_1", "Atheresthes stomias", "boat_2", , ]))
boxplot(t(STRS_rel_bias_index_district["obsCV=0",
"year_1",
"Atheresthes stomias",
"boat_2",
, ]))
abline(h = 0)
sci_names_all
boxplot(t(STRS_rel_bias_index_district["obsCV=0",
"year_1",
""Anoplopoma fimbria"",
"boat_2",
, ]))
boxplot(t(STRS_rel_bias_index_district["obsCV=0",
"year_1",
"Anoplopoma fimbria",
"boat_2",
, ]))
boxplot(t(Current_rel_bias_index_district["obsCV=0",
"year_1",
"Atheresthes stomias",
"boat_2",
, ]))
sci_names_all
boxplot(t(STRS_rel_bias_index_district["obsCV=0",
"year_1",
"Anoplopoma fimbria",
"boat_2",
, ]))
abline(h = 0)
boxplot(t(Current_rel_bias_index_district["obsCV=0",
"year_1",
"Anoplopoma fimbria",
"boat_2",
,
]))
abline(h = 0)
boxplot(t(STRS_rel_bias_index_district["obsCV=0",
"year_1",
"Sebastolobus alascanus",
"boat_2",
, ]))
abline(h = 0)
boxplot(t(Current_rel_bias_index_district["obsCV=0",
"year_1",
"Sebastolobus alascanus",
"boat_2",
,
]))
abline(h = 0)
boxplot(t(STRS_rel_bias_index_district["obsCV=0",
"year_1",
"Sebastes polyspinis",
"boat_2",
, ]))
abline(h = 0)
boxplot(t(Current_rel_bias_index_district["obsCV=0",
"year_1",
"Sebastes polyspinis",
"boat_2",
,
]))
abline(h = 0)
boxplot(t(Current_rel_bias_index_district["obsCV=0",
"year_1",
"Sebastes brevispinis",
"boat_2",
,
]))
boxplot(t(STRS_rel_bias_index_district["obsCV=0",
"year_1",
"Sebastes brevispinis",
"boat_2",
, ]))
abline(h = 0)
boxplot(t(Current_rel_bias_index_district["obsCV=0",
"year_1",
"Sebastes brevispinis",
"boat_2",
,
]))
abline(h = 0)
boxplot(t(STRS_rel_bias_index_district["obsCV=0.5",
"year_1",
"Sebastes brevispinis",
"boat_2",
, ]))
abline(h = 0)
boxplot(t(Current_rel_bias_index_district["obsCV=0.5",
"year_1",
"Sebastes brevispinis",
"boat_2",
,
]))
abline(h = 0)
object.size(Current_rel_bias_index_district)
object.size(Current_rel_bias_index_district) * 1e-6
sci_names_all
boxplot(t(STRS_rel_bias_index_district["obsCV=0.5",
"year_1",
"Squalus suckleyi",
"boat_2",
, ]))
abline(h = 0)
boxplot(t(Current_rel_bias_index_district["obsCV=0.5",
"year_1",
"Squalus suckleyi",
"boat_2",
,
]))
abline(h = 0)
boxplot(t(STRS_rel_bias_index_district["obsCV=0.5",
"year_1",
"Sebastes brevispinis",
"boat_2",
, ]))
abline(h = 0)
boxplot(t(Current_rel_bias_index_district["obsCV=0.5",
"year_1",
"Sebastes brevispinis",
"boat_2",
,
]))
abline(h = 0)
str(STRS_rel_bias_est)
STRS_rel_bias_est["obsCV=0.5",
"year_1",
"Sebastes brevispinis",
"boat_2", ]
boxplot(STRS_rel_bias_est["obsCV=0.5",
"year_1",
"Sebastes brevispinis",
"boat_2", ])
boxplot(STRS_rel_bias_est["obsCV=0.5",
"year_1",
"Sebastes brevispinis", , ])
boxplot(t(STRS_rel_bias_est["obsCV=0.5",
"year_1",
"Sebastes brevispinis", , ]))
abline(h = 0)
abline(h = 0)
boxplot(t(Current_rel_bias_est["obsCV=0.5",
"year_1",
"Sebastes brevispinis", , ]))
abline(h = 0)
##################################
## Calculate Performance Metric
##################################
for (ierror in 1:nobs_CV) {
for (iboat in 1:3) {
for (isurvey in c("Current", "STRS")) {
for (ispp in 1:ns_all) {
for(iyear in 1:NTime) {
## Calculate True CV
stmt <- paste0(
isurvey, "_true_cv_array[ierror, iyear, ispp, iboat]",
" <- temp_true_cv <- sd(", isurvey,
"_sim_mean[ierror, iyear, ispp, iboat,], na.rm = T) / ",
"true_mean[ispp, iyear]")
eval(parse(text = stmt))
temp_sim_cv <- get(paste0(isurvey,
"_sim_cv"))[ierror, iyear, ispp, iboat,]
## Calculate RRMSE of CV
stmt <- paste0(
isurvey, "_rrmse_cv_array[ierror, iyear, ispp, iboat] <- ",
"sqrt(mean((temp_sim_cv - temp_true_cv)^2, na.rm = T)) / ",
"mean(temp_sim_cv, na.rm = T)")
eval(parse(text = stmt))
}
}
}
}
}
source('~/.active-rstudio-document', echo=TRUE)
for (which_species in c(11, 13, 15)) {
##################################################
####   Constants to set up based on which_domain and which_species
##################################################
district_vals <- switch(which_domain,
"full_domain" = rep(1, n_cells),
"district" = district_vals)
n_dom <- length(unique(district_vals))
frame <- switch( which_domain,
"full_domain" = frame_all,
"district" = frame_district)[, c("domainvalue", "id",
"X1", "X2", "WEIGHT",
paste0("Y", which_species),
paste0("Y", which_species,
"_SQ_SUM"))]
names(frame)[6:7] <- paste0("Y", c("1", "1_SQ_SUM") )
no_strata <- switch(which_domain,
"full_domain" = 10,
"district" = rep(5, n_dom))
result_dir = paste0(github_dir,
"results/", which_domain, "/Single_Species_Optimization/",
gsub(x = sci_names_all[which_species],
pattern = ' ',
replacement = '_'), '/')
if(!dir.exists(result_dir)) dir.create(path = result_dir, recursive = T)
##################################################
####   Run optimization
##################################################
##Initial Conditions
run <- 1
current_n <- 0
## Initiate CVs to be those calculated under SRS
srs_stats <- SamplingStrata::buildStrataDF(
dataset = cbind( subset(frame, select = -c(X1, X2)),
X1 = 1))
srs_n <- as.numeric(280 * table(district_vals) / n_cells)
srs_var <- srs_stats$S1^2 * (1 - srs_n / n_cells) / srs_n
srs_cv <- sqrt(srs_var) / srs_stats$M1
cv <- list()
cv[["CV1"]] <- srs_cv
cv[["DOM"]] <- 1:n_dom
cv[["domainvalue"]] <- 1:n_dom
cv <- as.data.frame(cv)
while (current_n <= 820 ) {
#Set wd for output files, create a directory if it doesn"t exist yet
temp_dir = paste0(result_dir, "Run", run)
if(!dir.exists(temp_dir)) dir.create(temp_dir, recursive = T)
setwd(temp_dir)
#Run optimization
par(mfrow = c(6,6),
mar = c(2,2,0,0))
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 300,
pops = 50,
elitism_rate = 0.1,
mut_chance = 1 / (no_strata[1] + 1),
nStrata = no_strata,
showPlot = T,
writeFiles = T)
sum_stats <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
plot_solution <- as.factor(paste(solution$framenew$DOMAINVALUE,
solution$framenew$STRATO))
plot_solution <- as.integer(plot_solution)
##Save a plot of the solution
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[, c("Lon", "Lat")],
data = data.frame(Str_no = plot_solution) )
goa_ras <- raster::raster(x = goa,
resolution = 0.075)
goa_ras <- raster::rasterize(x = goa,
y = goa_ras,
field = "Str_no")
png(filename = "solution.png",
width = 5,
height = 5,
units = "in",
res = 500)
par(mfrow = c(1, 1),
mar = c(1, 1, 1, 1))
plot(goa_ras,
axes = F,
asp = 1,
col = colorRampPalette(
brewer.pal(n = 11,
name = "Paired"))(length(unique(plot_solution)) ) )
rect(xleft = districts$W_lon,
xright = districts$E_lon,
ybottom = tapply(X = Extrapolation_depths$Lat,
INDEX = district_vals,
FUN = min),
ytop = tapply(X = Extrapolation_depths$Lat,
INDEX = district_vals,
FUN = max))
text(x = rowMeans(districts[, c("W_lon", "E_lon")]),
y = tapply(X = Extrapolation_depths$Lat,
INDEX = district_vals,
FUN = max),
labels = districts$district,
pos = 3)
box()
dev.off()
## Save Output
CV_constraints <- expected_CV(strata = solution$aggr_strata)
current_n <- sum(sum_stats$Allocation)
result_list <- list(solution = solution,
sum_stats = sum_stats,
CV_constraints = CV_constraints,
n = current_n)
save(list = "result_list", file = "result_list.RData")
## Set up next run by changing slightly reducing the CV constraints
## CVs are reduced proportionally, based on the effort level
run <- run + 1
effort_level <- as.integer(cut(x = current_n,
breaks = c(0, samples, 1000),
labels = 1:4))
CV_constraints <- CV_constraints * c(0.90, 0.95, 0.975)[effort_level]
#Create CV dataframe in the format of SamplingStrata
cv <- list()
cv[["CV1"]] <- as.numeric(CV_constraints)
cv[["DOM"]] <- 1:n_dom
cv[["domainvalue"]] <- 1:n_dom
cv <- as.data.frame(cv)
}
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
which_species
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
