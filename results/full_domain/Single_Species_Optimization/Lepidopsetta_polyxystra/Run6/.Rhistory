"district" = frame_district)
n_dom <- length(unique(frame$domainvalue))
###########################
## Empty Result objects
###########################
master_res_df <- data.frame(id = 1:n_cells)
master_settings <- master_settings_district <- data.frame()
master_strata_list <- master_strata_stats_list <- list()
master_tradeoff <- list()
##########################
##########################
id <- 0
for (ispp in 1:ns_all) {
## For a given species and boat scenario, collect all runs
runs = dir(paste0(github_dir, "results/", idom,
"/Single_Species_Optimization/",
gsub(x = sci_names_all[ispp],
pattern = " ",
replacement = "_")),
full.names = T)
## For each run
if (length(runs) > 0) {
for (irun in runs) {
#Load run
temp_file <- paste0(irun, "/result_list.RData")
if (file.exists(temp_file)) {
id <- id + 1
load(temp_file)
## master_settings_district: result of optimization (CV, sample size)
## by district (aka domain)
master_settings_district <- rbind(
master_settings_district,
data.frame(id = id,
domain = 1:n_dom,
spp = ispp,
n = tapply(X = result_list$sum_stats$Allocation,
INDEX = result_list$sum_stats$Domain,
FUN = sum),
cv = as.numeric(result_list[[3]]))
)
## master_settings: result of optimization (CV, sample size)
## distict-aggregated
agg_strata <- result_list$solution$aggr_strata
agg_strata$STRATO <- 1:nrow(agg_strata)
agg_strata$DOM1 <- 1
master_settings <- rbind(
master_settings,
data.frame(id = id,
spp = ispp,
n = result_list$n,
cv = as.numeric(SamplingStrata::expected_CV(
strata = agg_strata) ) )
)
#master_res_df: solution (which cell belongs to which stratum?)
plot_solution <- with(result_list$solution$framenew,
as.factor(paste(DOMAINVALUE, STRATO)))
plot_solution <- as.integer(plot_solution)
master_res_df <- cbind(master_res_df,
plot_solution)
#master_strata_list: stratum-level details of solution
master_strata_list <- c(master_strata_list,
list(result_list[[2]]))
#master_strata_stats_list: stratum-level means and variances
master_strata_stats_list <- c(master_strata_stats_list,
list(result_list$solution$aggr_strata))
}
}
}
}
####################################
## Subset those solutions that correspond to 1, 2, and 3 boats
####################################
sol_idx <- c()
for (ispp in 1:ns_all) {
for (isample in samples) {
#Find solution closet to isample, append to sol_idx
sol_idx <-
c(sol_idx,
as.factor(with(master_settings[master_settings$spp == ispp, ],
id[which.min(abs(n - isample))]))
)
}
}
settings_agg <- master_settings[sol_idx,]
res_df <- master_res_df[, 1 + sol_idx]
strata_list <- master_strata_list[sol_idx]
strata_stats_list <- master_strata_stats_list[sol_idx]
vars_to_save <- c("settings_agg", "res_df", "strata_list", "strata_stats_list")
for (ivar in vars_to_save) {
assign(x = paste0(ivar, "_", idom),
value = get(ivar))
}
settings_agg
####################################
## Subset those solutions that correspond to 1, 2, and 3 boats
####################################
sol_idx <- c()
for (ispp in 1:ns_all) {
for (isample in samples) {
#Find solution closet to isample, append to sol_idx
sol_idx <-
c(sol_idx, with(master_settings[master_settings$spp == ispp, ],
id[which.min(abs(n - isample))])
)
}
}
settings_agg <- master_settings[sol_idx,]
res_df <- master_res_df[, 1 + sol_idx]
strata_list <- master_strata_list[sol_idx]
strata_stats_list <- master_strata_stats_list[sol_idx]
vars_to_save <- c("settings_agg", "res_df", "strata_list", "strata_stats_list")
for (ivar in vars_to_save) {
assign(x = paste0(ivar, "_", idom),
value = get(ivar))
}
settings_agg
settings_district <- subset(x = master_settings_district,
subset = id %in% sol_idx )
settings_district
settings_agg
settings_agg$iboat <- rep(1:n_boats, times = ns_all)
settings_agg
settings_agg <- master_settings[sol_idx,]
settings_agg$iboat <- rep(1:n_boats, times = ns_all)
res_df <- master_res_df[, 1 + sol_idx]
strata_list <- master_strata_list[sol_idx]
strata_stats_list <- master_strata_stats_list[sol_idx]
vars_to_save <- c("settings_agg", "res_df", "strata_list", "strata_stats_list")
for (ivar in vars_to_save) {
assign(x = paste0(ivar, "_", idom),
value = get(ivar))
}
settings_district <- subset(x = master_settings_district,
subset = id %in% sol_idx )
settings_district
settings_agg
settings_agg$iboat
settings_district$id
head(settings_agg)
master_settings_district
master_settings_district$id
match(master_settings_district$id, settings_agg$id)
match(settings_agg$id, master_settings_district$id)
str(master_settings_district)
settings_district <- subset(x = master_settings_district,
subset = id %in% sol_idx )
match(settings_agg$id, settings_district$id)
head(settings_district)
str(settings_district)
match(settings_agg$id, settings_district$id)
match(settings_district$id, settings_agg$id)
master_settings_district[match(settings_district$id, settings_agg$id), ]
settings_district[match(settings_district$id, settings_agg$id), ]
settings_district[match(settings_district$id, settings_agg$id), ]
settings_district
match(settings_district$id, settings_agg$id)
settings_district[match(settings_agg$id, settings_district$id), ]
settings_district <- settings_district[match(settings_agg$id,
settings_district$id), ]
settings_district <- subset(x = master_settings_district,
subset = id %in% sol_idx )
settings_district <- settings_district[match(settings_agg$id,
settings_district$id), ]
head(settings_district[order(settings_district$spp),])
head(settings_district[order(settings_district$spp, settings_district$domain),])
?order
head(settings_district[order(settings_district$domain, settings_district$spp),])
frame <- switch( idom,
"full_domain" = frame_all,
"district" = frame_district)
n_dom <- length(unique(frame$domainvalue))
###########################
## Empty Result objects
###########################
master_res_df <- data.frame(id = 1:n_cells)
master_settings <- master_settings_district <- data.frame()
master_strata_list <- master_strata_stats_list <- list()
master_tradeoff <- list()
##########################
##########################
id <- 0
for (ispp in 1:ns_all) {
## For a given species and boat scenario, collect all runs
runs = dir(paste0(github_dir, "results/", idom,
"/Single_Species_Optimization/",
gsub(x = sci_names_all[ispp],
pattern = " ",
replacement = "_")),
full.names = T)
## For each run
if (length(runs) > 0) {
for (irun in runs) {
#Load run
temp_file <- paste0(irun, "/result_list.RData")
if (file.exists(temp_file)) {
id <- id + 1
load(temp_file)
## master_settings_district: result of optimization (CV, sample size)
## by district (aka domain)
master_settings_district <- rbind(
master_settings_district,
data.frame(id = id,
domain = 1:n_dom,
spp = ispp,
n = tapply(X = result_list$sum_stats$Allocation,
INDEX = result_list$sum_stats$Domain,
FUN = sum),
cv = as.numeric(result_list[[3]]))
)
## master_settings: result of optimization (CV, sample size)
## distict-aggregated
agg_strata <- result_list$solution$aggr_strata
agg_strata$STRATO <- 1:nrow(agg_strata)
agg_strata$DOM1 <- 1
master_settings <- rbind(
master_settings,
data.frame(id = id,
spp = ispp,
n = result_list$n,
cv = as.numeric(SamplingStrata::expected_CV(
strata = agg_strata) ) )
)
#master_res_df: solution (which cell belongs to which stratum?)
plot_solution <- with(result_list$solution$framenew,
as.factor(paste(DOMAINVALUE, STRATO)))
plot_solution <- as.integer(plot_solution)
master_res_df <- cbind(master_res_df,
plot_solution)
#master_strata_list: stratum-level details of solution
master_strata_list <- c(master_strata_list,
list(result_list[[2]]))
#master_strata_stats_list: stratum-level means and variances
master_strata_stats_list <- c(master_strata_stats_list,
list(result_list$solution$aggr_strata))
}
}
}
}
####################################
## Subset those solutions that correspond to 1, 2, and 3 boats
####################################
sol_idx <- c()
for (ispp in 1:ns_all) {
for (isample in samples) {
#Find solution closet to isample, append to sol_idx
sol_idx <-
c(sol_idx, with(master_settings[master_settings$spp == ispp, ],
id[which.min(abs(n - isample))])
)
}
}
settings_agg <- master_settings[sol_idx,]
settings_agg$iboat <- rep(1:n_boats, times = ns_all)
res_df <- master_res_df[, 1 + sol_idx]
strata_list <- master_strata_list[sol_idx]
strata_stats_list <- master_strata_stats_list[sol_idx]
vars_to_save <- c("settings_agg", "res_df", "strata_list", "strata_stats_list")
for (ivar in vars_to_save) {
assign(x = paste0(ivar, "_", idom),
value = get(ivar))
}
subset(x = master_settings_district,
subset = id %in% sol_idx )
settings_district <- subset(x = master_settings_district,
subset = id %in% sol_idx )
settings_district <- settings_district[match(settings_agg$id,
settings_district$id), ]
settings_district
settings_district <- subset(x = master_settings_district,
subset = id %in% sol_idx )
settings_district <- settings_district[match(settings_district$id,
settings_agg$id), ]
settings_district
settings_district <- subset(x = master_settings_district,
subset = id %in% sol_idx )
settings_district
match(settings_district$id, sol_idx)
settings_district <- settings_district[match(settings_district$id,
sol_idx)]
settings_district <- settings_district[match(settings_district$id,
sol_idx),]
settings_district
match(sol_idx,
settings_district$id)
settings_district <- subset(x = master_settings_district,
subset = id %in% sol_idx )
settings_district
temp_settings_district <- subset(x = master_settings_district,
subset = id %in% sol_idx )
settings_district <- data.frame()
for (idx in sol_idx) {
settings_district <- rbind(settings_district,
subset(temp_settings_district,
subset = id %in% idx))
}
settings_district
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/knitting_runs_SS.R', echo=TRUE)
settings_agg
ns_all
settings_agg$iboat <- rep(1:n_boats, times = ns_all)
idom
sci_names_all[18]
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/Survey_Optimization_SS.R', echo=TRUE)
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/Survey_Optimization_SS.R', echo=TRUE)
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/Survey_Optimization_SS.R', echo=TRUE)
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/knitting_runs_SS.R', echo=TRUE)
settings_agg
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/Survey_Optimization_SS.R', echo=TRUE)
run
## Save Output
CV_constraints <- expected_CV(strata = solution$aggr_strata)
current_n <- sum(sum_stats$Allocation)
current_n
CV_constraints
CV_constraints = CV_constraints * 1.1
CV_constraints
#Create CV dataframe in the format of SamplingStrata
cv <- list()
cv[["CV1"]] <- as.numeric(CV_constraints)
cv[["DOM"]] <- 1:n_dom
cv[["domainvalue"]] <- 1:n_dom
cv <- as.data.frame(cv)
cv
while (current_n <= 280 ) {
#Set wd for output files, create a directory if it doesn"t exist yet
temp_dir = paste0(result_dir, "Run", run)
if(!dir.exists(temp_dir)) dir.create(temp_dir, recursive = T)
setwd(temp_dir)
#Run optimization
par(mfrow = c(6,6),
mar = c(2,2,0,0))
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 300,
pops = 50,
elitism_rate = 0.1,
mut_chance = 1 / (no_strata[1] + 1),
nStrata = no_strata,
showPlot = T,
writeFiles = T)
sum_stats <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
plot_solution <- as.factor(paste(solution$framenew$DOMAINVALUE,
solution$framenew$STRATO))
plot_solution <- as.integer(plot_solution)
##Save a plot of the solution
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[, c("Lon", "Lat")],
data = data.frame(Str_no = plot_solution) )
goa_ras <- raster::raster(x = goa,
resolution = 0.075)
goa_ras <- raster::rasterize(x = goa,
y = goa_ras,
field = "Str_no")
png(filename = "solution.png",
width = 5,
height = 5,
units = "in",
res = 500)
par(mfrow = c(1, 1),
mar = c(1, 1, 1, 1))
plot(goa_ras,
axes = F,
asp = 1,
col = colorRampPalette(
brewer.pal(n = 11,
name = "Paired"))(length(unique(plot_solution)) ) )
rect(xleft = districts$W_lon,
xright = districts$E_lon,
ybottom = tapply(X = Extrapolation_depths$Lat,
INDEX = district_vals,
FUN = min),
ytop = tapply(X = Extrapolation_depths$Lat,
INDEX = district_vals,
FUN = max))
text(x = rowMeans(districts[, c("W_lon", "E_lon")]),
y = tapply(X = Extrapolation_depths$Lat,
INDEX = district_vals,
FUN = max),
labels = districts$district,
pos = 3)
box()
dev.off()
## Save Output
CV_constraints <- expected_CV(strata = solution$aggr_strata)
current_n <- sum(sum_stats$Allocation)
result_list <- list(solution = solution,
sum_stats = sum_stats,
CV_constraints = CV_constraints,
n = current_n)
save(list = "result_list", file = "result_list.RData")
## Set up next run by changing slightly reducing the CV constraints
## CVs are reduced proportionally, based on the effort level
run <- run + 1
effort_level <- as.integer(cut(x = current_n,
breaks = c(0, 200, samples, 1000),
labels = 1:5))
CV_constraints <- CV_constraints * c(0.90, 0.95, 0.975)[effort_level]
#Create CV dataframe in the format of SamplingStrata
cv <- list()
cv[["CV1"]] <- as.numeric(CV_constraints)
cv[["DOM"]] <- 1:n_dom
cv[["domainvalue"]] <- 1:n_dom
cv <- as.data.frame(cv)
}
#Set wd for output files, create a directory if it doesn"t exist yet
temp_dir = paste0(result_dir, "Run", run)
if(!dir.exists(temp_dir)) dir.create(temp_dir, recursive = T)
setwd(temp_dir)
#Run optimization
par(mfrow = c(6,6),
mar = c(2,2,0,0))
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 300,
pops = 50,
elitism_rate = 0.1,
mut_chance = 1 / (no_strata[1] + 1),
nStrata = no_strata,
showPlot = T,
writeFiles = T)
sum_stats <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
plot_solution <- as.factor(paste(solution$framenew$DOMAINVALUE,
solution$framenew$STRATO))
plot_solution <- as.integer(plot_solution)
##Save a plot of the solution
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[, c("Lon", "Lat")],
data = data.frame(Str_no = plot_solution) )
goa_ras <- raster::raster(x = goa,
resolution = 0.075)
goa_ras <- raster::rasterize(x = goa,
y = goa_ras,
field = "Str_no")
png(filename = "solution.png",
width = 5,
height = 5,
units = "in",
res = 500)
par(mfrow = c(1, 1),
mar = c(1, 1, 1, 1))
plot(goa_ras,
axes = F,
asp = 1,
col = colorRampPalette(
brewer.pal(n = 11,
name = "Paired"))(length(unique(plot_solution)) ) )
rect(xleft = districts$W_lon,
xright = districts$E_lon,
ybottom = tapply(X = Extrapolation_depths$Lat,
INDEX = district_vals,
FUN = min),
ytop = tapply(X = Extrapolation_depths$Lat,
INDEX = district_vals,
FUN = max))
text(x = rowMeans(districts[, c("W_lon", "E_lon")]),
y = tapply(X = Extrapolation_depths$Lat,
INDEX = district_vals,
FUN = max),
labels = districts$district,
pos = 3)
box()
dev.off()
## Save Output
CV_constraints <- expected_CV(strata = solution$aggr_strata)
current_n <- sum(sum_stats$Allocation)
result_list <- list(solution = solution,
sum_stats = sum_stats,
CV_constraints = CV_constraints,
n = current_n)
save(list = "result_list", file = "result_list.RData")
run
CV_constraints
CV_constraints = CV_constraints * 0.95
#Create CV dataframe in the format of SamplingStrata
cv <- list()
cv[["CV1"]] <- as.numeric(CV_constraints)
cv[["DOM"]] <- 1:n_dom
cv[["domainvalue"]] <- 1:n_dom
cv <- as.data.frame(cv)
#Set wd for output files, create a directory if it doesn"t exist yet
temp_dir = paste0(result_dir, "Run", run)
if(!dir.exists(temp_dir)) dir.create(temp_dir, recursive = T)
setwd(temp_dir)
#Run optimization
par(mfrow = c(6,6),
mar = c(2,2,0,0))
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 300,
pops = 50,
elitism_rate = 0.1,
mut_chance = 1 / (no_strata[1] + 1),
nStrata = no_strata,
showPlot = T,
writeFiles = T)
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/knitting_runs_SS.R', echo=TRUE)
plot_solution
solution
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/knitting_runs_SS.R', echo=TRUE)
settings_agg
settings_agg_full_domain
settings_agg_full_domain
vars_to_save
