strata_input$stratum <- 1:nrow(strata_input)
strata_input$DOM1 = factor(strata_input$DOM1)
strata_input <- subset(x = strata_input,
select = c(stratum, N, X1, M1, S1, CENS, COST, DOM1))
SamplingStrata::bethel(stratif = strata_input,
errors = cv)
errors
cv
strata
str(strata)
cv <- list()
cv[["DOM1"]] <- factor(paste0("DOM", 1:n_dom))
cv[["CV1"]] <- current_cv
cv[["domainvalue"]] <- 1:n_dom
cv <- as.data.frame(cv)
cv
cv <- list()
cv[["DOM1"]] <- factor(1:n_dom)
cv[["CV1"]] <- current_cv
cv[["domainvalue"]] <- 1:n_dom
cv <- as.data.frame(cv)
strata_input <- master_strata_stats_list[[settings$id[irow]]]
strata_input$stratum <- 1:nrow(strata_input)
strata_input$DOM1 = factor(strata_input$DOM1)
strata_input <- subset(x = strata_input,
select = c(stratum, N, X1, M1, S1, CENS, COST, DOM1))
SamplingStrata::bethel(stratif = strata_input,
errors = cv)
strata_input
cv <- list()
cv[["DOM"]] <- factor(1:n_dom)
cv[["CV1"]] <- current_cv
cv[["domainvalue"]] <- 1:n_dom
cv <- as.data.frame(cv)
strata_input <- master_strata_stats_list[[settings$id[irow]]]
strata_input$stratum <- 1:nrow(strata_input)
strata_input$DOM = factor(strata_input$DOM1)
strata_input <- subset(x = strata_input,
select = c(stratum, N, X1, M1, S1, CENS, COST, DOM1))
SamplingStrata::bethel(stratif = strata_input,
errors = cv)
cv
strata_input
strata_input
str(strata_input)
str(cv)
strata_input <- subset(x = strata_input,
select = c(stratum, N, X1, M1, S1, CENS, COST, DOM1))
strata_input <- subset(x = strata_input,
select = c(stratum, N, X1, M1, S1, CENS, COST, DOM))
strata_input$DOM = factor(strata_input$DOM1)
strata_input <- subset(x = strata_input,
select = c(stratum, N, X1, M1, S1, CENS, COST, DOM))
strata_input
SamplingStrata::bethel(stratif = strata_input,
errors = cv)
sum(grepl("DOM1", toupper(colnames(strata)), fixed = TRUE))
sum(grepl("DOM1", toupper(colnames(strata_input)), fixed = TRUE))
strata_input
colnames(strata_input)
strata_input <- master_strata_stats_list[[settings$id[irow]]]
strata_input$stratum <- 1:nrow(strata_input)
strata_input$DOM1 = factor(strata_input$DOM1)
strata_input <- subset(x = strata_input,
select = c(stratum, N, X1, M1, S1, CENS, COST, DOM1))
SamplingStrata::bethel(stratif = strata_input,
errors = cv)
sum(grepl("DOM1", toupper(colnames(strata_input)), fixed = TRUE))
nrow(cv)
current_cv
cv <- list()
cv <- list()
cv[["DOM"]] <- factor(1:n_dom)
cv[["CV1"]] <- current_cv
cv[["domainvalue"]] <- 1:n_dom
cv <- as.data.frame(cv)
cv
errors
cv[["DOM"]] <- factor(paste0("DOM", 1:n_dom))
cv
cv <- list()
cv[["DOM"]] <- factor(paste0("DOM", 1:n_dom))
cv[["CV1"]] <- current_cv
cv[["domainvalue"]] <- 1:n_dom
cv <- as.data.frame(cv)
cv
strata_input <- master_strata_stats_list[[settings$id[irow]]]
strata_input
###############################################################################
## Project:       Knitting Result for univariate STRS optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:
###############################################################################
rm(list = ls())
###############################
## Set up directories
###############################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/")
###############################
## Import required packages
###############################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
library(SamplingStrata)
###########################
## Load Data
###########################
load(paste0(github_dir, "/data/optimization_data.RData"))
load(paste0(github_dir, "/data/Extrapolation_depths.RData"))
idom <- "district"
district_vals <- switch(idom,
"full_domain" = rep(1, n_cells),
"district" = district_vals)
n_dom <- length(unique(district_vals))
###########################
## Empty Result objects
###########################
master_res_df <- data.frame(id = 1:n_cells)
master_settings <- master_settings_district <- data.frame()
master_strata_list <- master_strata_stats_list <- list()
master_tradeoff <- list()
##########################
##########################
id <- 0
for (ispp in 1:ns_all) {
## For a given species and boat scenario, collect all runs
runs = dir(paste0(github_dir, "results/", idom,
"/Single_Species_Optimization/",
gsub(x = sci_names_all[ispp],
pattern = " ",
replacement = "_")),
full.names = T)
## For each run
if (length(runs) > 0) {
for (irun in runs) {
#Load run
temp_file <- paste0(irun, "/result_list.RData")
if (file.exists(temp_file)) {
id <- id + 1
load(temp_file)
## master_settings_district: result of optimization (CV, sample size)
## by district (aka domain)
master_settings_district <- rbind(
master_settings_district,
data.frame(id = id,
domain = 1:n_dom,
spp = ispp,
n = tapply(X = result_list$sum_stats$Allocation,
INDEX = result_list$sum_stats$Domain,
FUN = sum),
cv = as.numeric(result_list[[3]]))
)
## master_settings: result of optimization (CV, sample size)
## distict-aggregated
agg_strata <- result_list$solution$aggr_strata
agg_strata$STRATO <- 1:nrow(agg_strata)
agg_strata$DOM1 <- 1
master_settings <- rbind(
master_settings,
data.frame(id = id,
spp = ispp,
n = result_list$n,
cv = as.numeric(SamplingStrata::expected_CV(
strata = agg_strata) ) )
)
#master_res_df: solution (which cell belongs to which stratum?)
plot_solution <- with(result_list$solution$framenew,
as.factor(paste(DOMAINVALUE, STRATO)))
plot_solution <- as.integer(plot_solution)
master_res_df <- cbind(master_res_df,
plot_solution)
#master_strata_list: stratum-level details of solution
master_strata_list <- c(master_strata_list,
list(result_list[[2]]))
#master_strata_stats_list: stratum-level means and variances
master_strata_stats_list <- c(master_strata_stats_list,
list(result_list$solution$aggr_strata))
}
}
}
}
####################################
## Subset those solutions that correspond to 1, 2, and 3 boats
####################################
sol_idx <- c()
for (ispp in 1:ns_all) {
for (isample in samples) {
#Find solution closet to isample, append to sol_idx
sol_idx <- c(sol_idx,
with(master_settings[master_settings$spp == ispp, ],
id[which.min(abs(n - isample))])
)
}
}
settings <- master_settings[sol_idx,]
settings_district <- subset(master_settings_district, id %in% sol_idx )
res_df <- master_res_df[, 1 + sol_idx]
strata_list <- master_strata_list[sol_idx]
strata_stats_list <- master_strata_stats_list[sol_idx]
?assign(x = )
ivar = "settings"
idom
paste0(ivar, "_", idom)
settings_district
settings_agg <- master_settings[sol_idx,]
ivar = "settings_agg"
paste0(ivar, "_", idom)
idom
for (ivar in c("settings_agg", "res_df", "strata_list", "strata_stats_list")) {
assign(x = paste0(ivar, "_", idom),
value = get(ivar))
}
strata_list_district
rm(c("settings_agg", "res_df", "strata_list", "strata_stats_list"))
rm("settings_agg", "res_df", "strata_list", "strata_stats_list")
###############################################################################
## Project:       Knitting Result for univariate STRS optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:
###############################################################################
rm(list = ls())
###############################
## Set up directories
###############################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/")
###############################
## Import required packages
###############################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
library(SamplingStrata)
###########################
## Load Data
###########################
load(paste0(github_dir, "/data/optimization_data.RData"))
for(idom in c("full_domain", "district")) {
district_vals <- switch(idom,
"full_domain" = rep(1, n_cells),
"district" = district_vals)
n_dom <- length(unique(district_vals))
###########################
## Empty Result objects
###########################
master_res_df <- data.frame(id = 1:n_cells)
master_settings <- master_settings_district <- data.frame()
master_strata_list <- master_strata_stats_list <- list()
master_tradeoff <- list()
##########################
##########################
id <- 0
for (ispp in 1:ns_all) {
## For a given species and boat scenario, collect all runs
runs = dir(paste0(github_dir, "results/", idom,
"/Single_Species_Optimization/",
gsub(x = sci_names_all[ispp],
pattern = " ",
replacement = "_")),
full.names = T)
## For each run
if (length(runs) > 0) {
for (irun in runs) {
#Load run
temp_file <- paste0(irun, "/result_list.RData")
if (file.exists(temp_file)) {
id <- id + 1
load(temp_file)
## master_settings_district: result of optimization (CV, sample size)
## by district (aka domain)
master_settings_district <- rbind(
master_settings_district,
data.frame(id = id,
domain = 1:n_dom,
spp = ispp,
n = tapply(X = result_list$sum_stats$Allocation,
INDEX = result_list$sum_stats$Domain,
FUN = sum),
cv = as.numeric(result_list[[3]]))
)
## master_settings: result of optimization (CV, sample size)
## distict-aggregated
agg_strata <- result_list$solution$aggr_strata
agg_strata$STRATO <- 1:nrow(agg_strata)
agg_strata$DOM1 <- 1
master_settings <- rbind(
master_settings,
data.frame(id = id,
spp = ispp,
n = result_list$n,
cv = as.numeric(SamplingStrata::expected_CV(
strata = agg_strata) ) )
)
#master_res_df: solution (which cell belongs to which stratum?)
plot_solution <- with(result_list$solution$framenew,
as.factor(paste(DOMAINVALUE, STRATO)))
plot_solution <- as.integer(plot_solution)
master_res_df <- cbind(master_res_df,
plot_solution)
#master_strata_list: stratum-level details of solution
master_strata_list <- c(master_strata_list,
list(result_list[[2]]))
#master_strata_stats_list: stratum-level means and variances
master_strata_stats_list <- c(master_strata_stats_list,
list(result_list$solution$aggr_strata))
}
}
}
}
####################################
## Subset those solutions that correspond to 1, 2, and 3 boats
####################################
sol_idx <- c()
for (ispp in 1:ns_all) {
for (isample in samples) {
#Find solution closet to isample, append to sol_idx
sol_idx <- c(sol_idx,
with(master_settings[master_settings$spp == ispp, ],
id[which.min(abs(n - isample))])
)
}
}
settings_agg <- master_settings[sol_idx,]
if (idom == "district") {
settings_district <- subset(master_settings_district, id %in% sol_idx )
}
res_df <- master_res_df[, 1 + sol_idx]
strata_list <- master_strata_list[sol_idx]
strata_stats_list <- master_strata_stats_list[sol_idx]
for (ivar in c("settings_agg", "res_df", "strata_list", "strata_stats_list")) {
assign(x = paste0(ivar, "_", idom),
value = get(ivar))
}
rm("settings_agg", "res_df", "strata_list", "strata_stats_list")
}
settings_agg_full_domain
settings_district
vars_to_save
vars_to_save <- c("settings_agg", "res_df", "strata_list", "strata_stats_list")
if (idom == "district") {
settings_district <- subset(master_settings_district, id %in% sol_idx )
vars_to_save <- c(vars_to_save, "settings_district")
}
for (ivar in vars_to_save) {
assign(x = paste0(ivar, "_", idom),
value = get(ivar))
}
rm(list = ls())
###############################
## Set up directories
###############################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/")
###############################
## Import required packages
###############################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
library(SamplingStrata)
###########################
## Load Data
###########################
load(paste0(github_dir, "/data/optimization_data.RData"))
idom
idom = "district"
district_vals <- switch(idom,
"full_domain" = rep(1, n_cells),
"district" = district_vals)
n_dom <- length(unique(district_vals))
###########################
## Empty Result objects
###########################
master_res_df <- data.frame(id = 1:n_cells)
master_settings <- master_settings_district <- data.frame()
master_strata_list <- master_strata_stats_list <- list()
master_tradeoff <- list()
##########################
##########################
id <- 0
for (ispp in 1:ns_all) {
## For a given species and boat scenario, collect all runs
runs = dir(paste0(github_dir, "results/", idom,
"/Single_Species_Optimization/",
gsub(x = sci_names_all[ispp],
pattern = " ",
replacement = "_")),
full.names = T)
## For each run
if (length(runs) > 0) {
for (irun in runs) {
#Load run
temp_file <- paste0(irun, "/result_list.RData")
if (file.exists(temp_file)) {
id <- id + 1
load(temp_file)
## master_settings_district: result of optimization (CV, sample size)
## by district (aka domain)
master_settings_district <- rbind(
master_settings_district,
data.frame(id = id,
domain = 1:n_dom,
spp = ispp,
n = tapply(X = result_list$sum_stats$Allocation,
INDEX = result_list$sum_stats$Domain,
FUN = sum),
cv = as.numeric(result_list[[3]]))
)
## master_settings: result of optimization (CV, sample size)
## distict-aggregated
agg_strata <- result_list$solution$aggr_strata
agg_strata$STRATO <- 1:nrow(agg_strata)
agg_strata$DOM1 <- 1
master_settings <- rbind(
master_settings,
data.frame(id = id,
spp = ispp,
n = result_list$n,
cv = as.numeric(SamplingStrata::expected_CV(
strata = agg_strata) ) )
)
#master_res_df: solution (which cell belongs to which stratum?)
plot_solution <- with(result_list$solution$framenew,
as.factor(paste(DOMAINVALUE, STRATO)))
plot_solution <- as.integer(plot_solution)
master_res_df <- cbind(master_res_df,
plot_solution)
#master_strata_list: stratum-level details of solution
master_strata_list <- c(master_strata_list,
list(result_list[[2]]))
#master_strata_stats_list: stratum-level means and variances
master_strata_stats_list <- c(master_strata_stats_list,
list(result_list$solution$aggr_strata))
}
}
}
}
####################################
## Subset those solutions that correspond to 1, 2, and 3 boats
####################################
sol_idx <- c()
for (ispp in 1:ns_all) {
for (isample in samples) {
#Find solution closet to isample, append to sol_idx
sol_idx <- c(sol_idx,
with(master_settings[master_settings$spp == ispp, ],
id[which.min(abs(n - isample))])
)
}
}
vars_to_save <- paste0(c("settings_agg", "res_df",
"strata_list", "strata_stats_list"), "_", idom)
vars_to_save
settings_agg <- master_settings[sol_idx,]
res_df <- master_res_df[, 1 + sol_idx]
strata_list <- master_strata_list[sol_idx]
strata_stats_list <- master_strata_stats_list[sol_idx]
vars_to_save <- paste0(c("settings_agg", "res_df",
"strata_list", "strata_stats_list"), "_", idom)
for (ivar in vars_to_save) {
assign(x = ivar,
value = get(ivar))
}
settings_agg <- master_settings[sol_idx,]
res_df <- master_res_df[, 1 + sol_idx]
strata_list <- master_strata_list[sol_idx]
strata_stats_list <- master_strata_stats_list[sol_idx]
vars_to_save <- c("settings_agg", "res_df", "strata_list", "strata_stats_list")
for (ivar in vars_to_save) {
assign(x = paste0(ivar, "_", idom),
value = get(ivar))
}
if (idom == "district") {
settings_district <- subset(master_settings_district, id %in% sol_idx )
vars_to_save <- c(vars_to_save, "settings_district")
}
vars_to_save
paste0(vars_to_save, "_", idom)
settings_agg <- master_settings[sol_idx,]
res_df <- master_res_df[, 1 + sol_idx]
strata_list <- master_strata_list[sol_idx]
strata_stats_list <- master_strata_stats_list[sol_idx]
vars_to_save <- c("settings_agg", "res_df", "strata_list", "strata_stats_list")
for (ivar in vars_to_save) {
assign(x = paste0(ivar, "_", idom),
value = get(ivar))
}
if (idom == "district") {
settings_district <- subset(master_settings_district, id %in% sol_idx )
vars_to_save <- c(vars_to_save, "settings")
}
paste0(vars_to_save, "_", idom)
paste0(vars_to_save, "_", idom)
settings_district
github_dir
####################################
## Save
####################################
save(list = paste0(vars_to_save, "_", idom),
file = paste0(github_dir,
"results/", idom,
"/Single_Species_Optimization/",
"optimization_knitted_results.RData"))
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/knitting_runs_SS.R', echo=TRUE)
