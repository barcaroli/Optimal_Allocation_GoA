STRS_mean_sds <- buildStrataDF(dataset = frame_current)
STRS_mean <- colSums(sweep(x = STRS_mean_sds[, paste0("M", 1:ns_all)],
MARGIN = 1,
STATS = Wh,
FUN = '*'))
STRS_var_temp <- sweep(x = STRS_mean_sds[, paste0("S", 1:ns_all)]^2,
MARGIN = 1,
STATS = Wh^2 * (1 - wh) / nh,
FUN = '*')
## For those strata with zero effort allocated
STRS_var_temp <- apply(X = STRS_var_temp,
MARGIN = 1:2,
FUN = function(x) ifelse(is.finite(x), x, 0))
STRS_var <- colSums(STRS_var_temp)
strata_cv <- sqrt(STRS_var) / STRS_mean
Current_STRS_Pop_CV[, iboat ] <- strata_cv
}
Current_STRS_Pop_CV
SRS_Pop_CV
wh
sort(wh)
iboat
820 / N
Current_STRS_Pop_CV
SRS_Pop_CV
###############################################################################
## Project:       Knitting Result for univariate STRS optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:
###############################################################################
rm(list = ls())
###############################
## Set up directories
###############################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/")
###############################
## Import required packages
###############################
library(sp)
library(RColorBrewer)
library(raster)
###########################
## Load Data
###########################
load(paste0(github_dir, "/data/optimization_data.RData"))
load(paste0(github_dir, "/data/Extrapolation_depths.RData"))
###########################
## Empty Result objects
###########################
master_res_df <- data.frame(id = 1:N)
master_settings <- data.frame()
master_strata_list <- master_strata_stats_list <- list()
master_tradeoff <- list()
istrata <- 10
##########################
##########################
for (ispp in 1:ns_opt) {
for (iboat in 1:nboats) {
## For a given species and boat scenario, collect all runs
runs = dir(paste0(github_dir,
"results/Single_Species_Optimization/",
gsub(x = sci_names_opt[ispp],
pattern = " ",
replacement = "_"),
"/boat", iboat),
full.names = T)
nruns = length(runs)
## For each run
if (nruns > 0) {
for (irun in 1:nruns) {
#Load run
temp_file <- paste0(github_dir,
"results/Single_Species_Optimization/",
gsub(x = sci_names_opt[ispp],
pattern = " ",
replacement = "_"),
"/boat", iboat,
"/Str", istrata, "Run", irun, "/result_list.RData")
if (file.exists(temp_file)) {
load(temp_file)
#master_settings: result of optimization (CV, sample size)
master_settings <- rbind(
master_settings,
data.frame(iboat = iboat,
ispp = ispp,
n = result_list$n,
cv = as.numeric(result_list[[3]]))
)
#master_res_df: solution (which cell belongs to which stratum?)
master_res_df <- cbind(master_res_df,
result_list[[1]]$indices$X1)
#master_strata_list: stratum-level details of solution
master_strata_list <- c(master_strata_list,
list(result_list[[2]]))
#master_strata_stats_list: stratum-level means and variances
master_strata_stats_list <- c(master_strata_stats_list,
list(result_list$solution$aggr_strata))
}
}
}
}
}
####################################
## Subset those solutions that correspond to 1, 2, and 3 boats
####################################
master_settings$id = 1:nrow(master_settings)
sol_idx <- c()
for (ispp in sort(unique(master_settings$ispp)) ) {
for (isample in samples) {
#Find solution closet to isample, append to sol_idx
sol_idx <- c(sol_idx,
with(master_settings[master_settings$ispp == ispp, ],
id[which.min(abs(n - isample))])
)
}
}
settings <- master_settings[sol_idx, 1:4]
res_df <- master_res_df[, 1 + sol_idx]
strata_list <- master_strata_list[sol_idx]
strata_stats_list <- master_strata_stats_list[sol_idx]
settings
###############################################################################
## Project:       Knitting Result for univariate STRS optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:
###############################################################################
rm(list = ls())
###############################
## Set up directories
###############################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/")
###############################
## Import required packages
###############################
library(sp)
library(RColorBrewer)
library(raster)
###########################
## Load Data
###########################
load(paste0(github_dir, "/data/optimization_data.RData"))
load(paste0(github_dir, "/data/Extrapolation_depths.RData"))
###########################
## Empty Result objects
###########################
master_res_df <- data.frame(id = 1:N)
master_settings <- data.frame()
master_strata_list <- master_strata_stats_list <- list()
master_tradeoff <- list()
istrata <- 10
##########################
##########################
for (ispp in 1:ns_opt) {
for (iboat in 1:nboats) {
## For a given species and boat scenario, collect all runs
runs = dir(paste0(github_dir,
"results/Single_Species_Optimization/",
gsub(x = sci_names_opt[ispp],
pattern = " ",
replacement = "_"),
"/boat", iboat),
full.names = T)
nruns = length(runs)
## For each run
if (nruns > 0) {
for (irun in 1:nruns) {
#Load run
temp_file <- paste0(github_dir,
"results/Single_Species_Optimization/",
gsub(x = sci_names_opt[ispp],
pattern = " ",
replacement = "_"),
"/boat", iboat,
"/Str", istrata, "Run", irun, "/result_list.RData")
if (file.exists(temp_file)) {
load(temp_file)
#master_settings: result of optimization (CV, sample size)
master_settings <- rbind(
master_settings,
data.frame(iboat = iboat,
ispp = ispp,
n = result_list$n,
cv = as.numeric(result_list[[3]]))
)
#master_res_df: solution (which cell belongs to which stratum?)
master_res_df <- cbind(master_res_df,
result_list[[1]]$indices$X1)
#master_strata_list: stratum-level details of solution
master_strata_list <- c(master_strata_list,
list(result_list[[2]]))
#master_strata_stats_list: stratum-level means and variances
master_strata_stats_list <- c(master_strata_stats_list,
list(result_list$solution$aggr_strata))
}
}
}
}
}
####################################
## Subset those solutions that correspond to 1, 2, and 3 boats
####################################
master_settings$id = 1:nrow(master_settings)
sol_idx <- c()
for (ispp in sort(unique(master_settings$ispp)) ) {
for (isample in samples) {
#Find solution closet to isample, append to sol_idx
sol_idx <- c(sol_idx,
with(master_settings[master_settings$ispp == ispp, ],
id[which.min(abs(n - isample))])
)
}
}
settings <- master_settings[sol_idx, 1:4]
res_df <- master_res_df[, 1 + sol_idx]
strata_list <- master_strata_list[sol_idx]
strata_stats_list <- master_strata_stats_list[sol_idx]
settings
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/knitting_runs_SS.R', echo=TRUE)
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/knitting_runs_SS.R', echo=TRUE)
###############################################################################
## Project:       Calculate Population Variances
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Calculate population variances for different sampling schemes
##                Simple Random Sampling
##                Current Stratified Random Sampling Design
##                These population variances are more comparable to the
##                optimization, as the optimization is
###############################################################################
rm(list = ls())
##################################################
####   Set up directories
##################################################
which_machine <- c('Zack_MAC' = 1, 'Zack_PC' = 2, 'Zack_GI_PC' = 3)[3]
github_dir <- paste0(c('/Users/zackoyafuso/Documents/',
'C:/Users/Zack Oyafuso/Documents/',
'C:/Users/zack.oyafuso/Work/')[which_machine],
"GitHub/Optimal_Allocation_GoA/")
##################################################
####  Install a forked version of the SamplingStrata Package from
####  zoyafuso-NOAA's Github page
####
####  Import other required packages
##################################################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
library(SamplingStrata)
library(readxl)
library(tidyr)
##################################
## Import Operating Model
##################################
load(paste0(github_dir, "data/Extrapolation_depths.RData") )
load(paste0(github_dir, 'data/fit_density.RData'))
load(paste0(github_dir, 'data/optimization_data.RData'))
load(paste0(github_dir, "results/Single_Species_Optimization/",
"optimization_knitted_results.RData"))
frame <- cbind(data.frame(domainvalue = 1,
id = 1:N,
X1 = with(Extrapolation_depths, E_km - min(E_km)),
X2 = Extrapolation_depths$DEPTH_EFH,
WEIGHT = NTime),
matrix(data = apply(X = D_gct[, , Years2Include],
MARGIN = c(1, 2),
FUN = sum),
ncol = ns_all,
dimnames = list(NULL, paste0("Y", 1:ns_all))),
matrix(data = apply(X = D_gct[, , Years2Include],
MARGIN = c(1, 2),
FUN = function(x) sum(x^2)),
ncol = ns_all,
dimnames = list(NULL, paste0("Y", 1:ns_all, "_SQ_SUM")))
)
##################################
## Import Strata Allocations and spatial grid and predicted density
##################################
GOA_allocations <- readxl::read_xlsx(
path = paste0(github_dir, '/data/GOA 2019 stations by stratum.xlsx')
)
GOA_allocations3 <- readxl::read_xlsx(
path = paste0(github_dir, '/data/GOA2019_ 3 boat_825_RNDM_stations.xlsx')
)
##################################################
####   Create dataframe of effort allocations across boats
##################################################
allocations <- data.frame(Stratum = sort(unique(GOA_allocations3$stratum)),
boat3 = aggregate(id ~ stratum,
data = GOA_allocations3,
FUN = length)$id,
boat2 = c(GOA_allocations$`Number stations`,
rep(0,5)))
allocations$boat1 = ceiling(allocations$boat2 / 2)
allocations$boat1 = ifelse(allocations$boat1 == 0, 0,
ifelse(allocations$boat1 == 1, 2,
allocations$boat1))
allocations <- rbind(c("Stratum" = 0, "boat3" = 0, "boat2" = 0, "boat1" = 0),
allocations)
##################################
## Calculate Population CVs under Simple Random Sampling
##################################
frame_SRS <- subset(frame,
select = c("domainvalue", "id", "WEIGHT",
paste0("Y", 1:ns_all),
paste0("Y", 1:ns_all, "_SQ_SUM")))
frame_SRS$X1 = 1
SRS_mean_sds <- buildStrataDF(dataset = frame_SRS)
SRS_Pop_CV <- sapply(X = samples,
FUN = function(x) {
temp_mean <- temp[, paste0("M", 1:ns_all)]
temp_sd <- temp[, paste0("S", 1:ns_all)]
return(temp_sd / sqrt(x) / temp_mean)
})
rownames(SRS_Pop_CV) <- sci_names_all
##################################
## Calculate Population CVs under current STRS sampling
##################################
Current_STRS_Pop_CV <- matrix(nrow = ns_all,
ncol = nboats,
dimnames = list(sci_names_all, NULL))
for (iboat in 1:nboats) {
#Adjust sample size proportionally
nh <- allocations[, paste0('boat', iboat)]
#strata constraints
# strata_labels <- paste(allocations$Stratum[sampled_strata])
Nh <- table(Extrapolation_depths$stratum)
Wh <- Nh / N
wh <- nh / Nh
#Calculate Strata means and sds (calculated over time as well)
frame_current <- subset(frame,
select = c("domainvalue", "id", "WEIGHT",
paste0("Y", 1:ns_all),
paste0("Y", 1:ns_all, "_SQ_SUM")))
frame_current$X1 = Extrapolation_depths$stratum
frame_current$X1[is.na(frame_current$X1)] <- 0
STRS_mean_sds <- buildStrataDF(dataset = frame_current)
STRS_mean <- colSums(sweep(x = STRS_mean_sds[, paste0("M", 1:ns_all)],
MARGIN = 1,
STATS = Wh,
FUN = '*'))
STRS_var_temp <- sweep(x = STRS_mean_sds[, paste0("S", 1:ns_all)]^2,
MARGIN = 1,
STATS = Wh^2 * (1 - wh) / nh,
FUN = '*')
## For those strata with zero effort allocated
STRS_var_temp <- apply(X = STRS_var_temp,
MARGIN = 1:2,
FUN = function(x) ifelse(is.finite(x), x, 0))
STRS_var <- colSums(STRS_var_temp)
strata_cv <- sqrt(STRS_var) / STRS_mean
Current_STRS_Pop_CV[, iboat ] <- strata_cv
}
SS_STRS_Pop_CV <- tidyr::spread(data = settings[,c("iboat", "ispp", "cv")],
value = cv,
key = iboat)[, -1]
rownames(SS_STRS_Pop_CV) = sci_names
##################################
rownames(SS_STRS_Pop_CV) = sci_names_opt
SS_STRS_Pop_CV
Current_STRS_Pop_CV[spp_idx_opt,]
round(Current_STRS_Pop_CV[spp_idx_opt,],3)
SS_STRS_Pop_CV
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/Calculate_Population_Variances.R', echo=TRUE)
source('~/GitHub/Optimal_Allocation_GoA/analysis_scripts/Calculate_Population_Variances.R', echo=TRUE)
###############################################################################
## Project:       Spatiotemporal Survey Optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Conduct SamplingStrata R package multispecies stratified
##                survey optimization
###############################################################################
rm(list = ls())
##################################################
####   Set up directories based on whether the optimization is being conducted
####        on a multi-species or single-species level
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
which_method = c("Multi_Species" = 1,
"Single_Species" = 2)[1]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/results/",
c("Spatiotemporal_Optimization/",
"Single_Species_Optimization/")[which_method])
##################################################
####  Install a forked version of the SamplingStrata Package from
####  zoyafuso-NOAA's Github page
####
####  Import other required packages
##################################################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
library(SamplingStrata)
library(sp)
library(RColorBrewer)
library(raster)
##################################################
####   Load Data
####   Load Population CVs for use in the thresholds
##################################################
load(paste0(dirname(dirname(github_dir)), "/data/optimization_data.RData"))
load(paste0(dirname(dirname(github_dir)), "/data/Extrapolation_depths.RData"))
if (which_method == 1) load(paste0(dirname(github_dir),
"/Population_Variances.RData"))
SRS_Pop_CV
if (which_method == 1) {
load(paste0(dirname(github_dir), "/Population_Variances.RData"))
SRS_Pop_CV <- SRS_Pop_CV[spp_idx_opt, ]
}
SRS_Pop_CV
##################################################
####   Some Constants
##################################################
stratas <- switch(which_method,
"1" = stratas,
"2" =  10)
stratas
NStrata <- length(stratas)
ns_opt <- c(15, 1)[which_method]
ns_opt
ns_opt
ns_opt <- c(ns_opt, 1)[which_method]
which_species <- switch(which_method,
"1" = 1:ns_opt,
"2" = 14)
which_species
##################################################
####   Run optimization
##################################################
par(mfrow = c(6,6),
mar = c(2,2,0,0))
stratas
SS_STRS_Pop_CV
github_dir
#Choose a boat level
isample <- 1
for (istrata in 1) {
temp_strata <- stratas[istrata]
##Initial Condition
Run <- 1
current_n <- 0
CV_constraints <- SRS_Pop_CV[, isample]
#Create CV dataframe
cv <- list()
for (spp in 1:ns_opt)
cv[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv[["DOM"]] <- 1
cv[["domainvalue"]] <- 1
cv <- as.data.frame(cv)
while (current_n <= c(280, 550, 820)[isample] ) {
#Set wd for output files, create a directory if it doesn"t exist yet
temp_dir = paste0(github_dir, "boat", isample, "/Str", temp_strata,
"Run", Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir, recursive = T)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 300,
pops = 30,
elitism_rate = 0.1,
mut_chance = 1 / (temp_strata + 1),
nStrata = temp_strata,
showPlot = T,
writeFiles = T)
sum_stats <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
#Plot Solution
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = solution$framenew$STRATO) )
goa_ras <- raster::raster(x = goa,
resolution = 5)
goa_ras <- raster::rasterize(x = goa,
y = goa_ras,
field = "Str_no")
png(filename = "solution.png",
width = 5,
height = 5,
units = "in",
res = 500)
plot(goa_ras, axes = F,
col = terrain.colors(temp_strata)[sample(temp_strata)])
dev.off()
#Save Output
CV_constraints <- expected_CV(strata = solution$aggr_strata)
current_n <- sum(sum_stats$Allocation)
result_list <- list(solution = solution,
sum_stats = sum_stats,
CV_constraints = CV_constraints,
n = current_n)
save(list = "result_list", file = "result_list.RData")
#Set up next run by changing upper CV constraints
Run <- Run + 1
CV_constraints <- 0.95*CV_constraints + 0.05*(SS_STRS_Pop_CV[, isample])
#Create CV dataframe in the formmat of SamplingStrata
cv <- list()
for (spp in 1:ns_opt)
cv[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv[["DOM"]] <- 1
cv[["domainvalue"]] <- 1
cv <- as.data.frame(cv)
}
}
