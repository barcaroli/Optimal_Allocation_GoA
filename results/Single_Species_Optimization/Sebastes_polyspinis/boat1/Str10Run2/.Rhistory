CV_df$bound_check[irow] <- (check_fit(fit_new$parameter_estimates))
CV_df$pred_nll[irow] <- fit_new$Report$pred_jnll
#Extract incides of withheld data
withheld_idx <- which(fit_new$data_list$PredTF_i == T)
#Withheld data locations, species/year indices, observed CPUE
withheld_df <- data.frame(
idx =  withheld_idx,
E_km = fit_new$spatial_list$loc_i[withheld_idx,"E_km"],
N_km = fit_new$spatial_list$loc_i[withheld_idx,"N_km"],
year = 1+fit_new$data_list$t_i[withheld_idx],
obs_density = (fit_new$data_frame$b_i/fit_new$data_frame$a_i)[withheld_idx]
)
#Extrapolation Grid locations
loc_g <- fit_new$spatial_list$loc_g
#which extrapoaltion grid cells are closest to each withheld data location
grid_idx <- RANN::nn2(query = withheld_df[,c("E_km", "N_km")],
data = loc_g,
k = 1)$nn.idx
for (jrow in 1:nrow(withheld_df)) {
withheld_df$pred_density[jrow] <-
fit_new$Report$D_gct[grid_idx[jrow], , withheld_df$year[jrow]]
}
#Calculate mean absolute error and root mean square error
CV_df$MAE[irow] = mean(abs(withheld_df$obs_density -
withheld_df$pred_density))
CV_df$RMSE[irow] = sqrt(mean((withheld_df$obs_density -
withheld_df$pred_density)^2))
#Calculate mean predicted density for calculation of RRMSE and RMAE
mean_pred_density <- mean(withheld_df$obs_density)
CV_df$RRMSE[irow] <- CV_df$RMSE[irow] / mean_pred_density
CV_df$RMAE[irow] <- CV_df$MAE[irow] / mean_pred_density
print(paste0("Done with: ", CV_df$species[irow], ", ",
ifelse(CV_df$depth[irow], "Depth, ", "No Depth, "),
"Fold Number ", CV_df$fold[irow]))
}
}
##################################################
####  Calculate summed predicted NLL across folds and Mean RRMSE across folds
##################################################
tidyr::spread(data = aggregate(pred_nll ~ species + depth,
data = CV_df,
FUN = sum),
key = "depth",
value = "pred_nll")
RMSE <- tidyr::spread(data = aggregate(RMSE ~ species + depth,
data = CV_df,
FUN = mean),
key = "depth",
value = "RMSE")
RMSE$depth_in_model <- c(F, T)[apply(X = RMSE[,-1],
MARGIN = 1,
FUN = which.min)]
##################################################
####   Create the result object that would go into the optimizations
##################################################
N <- nrow(Extrapolation_depths)
D_gct = Index <- array(dim = c(N, ns, 24),
dimnames = list(NULL, which_spp, NULL))
for(ispp in 1:ns){
depth_in_model <- RMSE$depth_in_model[ispp]
result_dir = paste0(VAST_dir, RMSE$species[ispp],
ifelse(depth_in_model, "_depth", ""),
"/")
load(paste0(result_dir, "/fit.RData"))
D_gct[,ispp,] = fit$Report$D_gct[,1,]
Index[,ispp,] = fit$Report$Index_gctl[,1, ,1]
print(result_dir)
}
irow
nrow(CV_df)
for (irow in (311:nrow(CV_df))[-c(206, 310)] ) {
#Load fitted object
result_dir <- paste0(VAST_dir, CV_df$species[irow],
ifelse(CV_df$depth[irow],  "_depth", ""), "/")
filename <- paste0(result_dir, "CV_", CV_df$fold[irow], "/fit.RData")
if ( file.exists(filename) ){
load(filename)
#Final Gradient
CV_df$max_grad[irow] <-
max(abs(fit_new$parameter_estimates$diagnostics$final_gradient))
#Check whether hessian matrix is positive definite
CV_df$pdHess[irow] <- fit_new$parameter_estimates$SD$pdHess
#check_fit chekcs bounds, TRUE is bad and FALSE is good
CV_df$bound_check[irow] <- (check_fit(fit_new$parameter_estimates))
CV_df$pred_nll[irow] <- fit_new$Report$pred_jnll
#Extract incides of withheld data
withheld_idx <- which(fit_new$data_list$PredTF_i == T)
#Withheld data locations, species/year indices, observed CPUE
withheld_df <- data.frame(
idx =  withheld_idx,
E_km = fit_new$spatial_list$loc_i[withheld_idx,"E_km"],
N_km = fit_new$spatial_list$loc_i[withheld_idx,"N_km"],
year = 1+fit_new$data_list$t_i[withheld_idx],
obs_density = (fit_new$data_frame$b_i/fit_new$data_frame$a_i)[withheld_idx]
)
#Extrapolation Grid locations
loc_g <- fit_new$spatial_list$loc_g
#which extrapoaltion grid cells are closest to each withheld data location
grid_idx <- RANN::nn2(query = withheld_df[,c("E_km", "N_km")],
data = loc_g,
k = 1)$nn.idx
for (jrow in 1:nrow(withheld_df)) {
withheld_df$pred_density[jrow] <-
fit_new$Report$D_gct[grid_idx[jrow], , withheld_df$year[jrow]]
}
#Calculate mean absolute error and root mean square error
CV_df$MAE[irow] = mean(abs(withheld_df$obs_density -
withheld_df$pred_density))
CV_df$RMSE[irow] = sqrt(mean((withheld_df$obs_density -
withheld_df$pred_density)^2))
#Calculate mean predicted density for calculation of RRMSE and RMAE
mean_pred_density <- mean(withheld_df$obs_density)
CV_df$RRMSE[irow] <- CV_df$RMSE[irow] / mean_pred_density
CV_df$RMAE[irow] <- CV_df$MAE[irow] / mean_pred_density
print(paste0("Done with: ", CV_df$species[irow], ", ",
ifelse(CV_df$depth[irow], "Depth, ", "No Depth, "),
"Fold Number ", CV_df$fold[irow]))
}
}
# for (irow in (1:nrow(CV_df))[-c(310)] ) {
for (irow in 206 ) {
#Load fitted object
result_dir <- paste0(VAST_dir, CV_df$species[irow],
ifelse(CV_df$depth[irow],  "_depth", ""), "/")
filename <- paste0(result_dir, "CV_", CV_df$fold[irow], "/fit.RData")
if ( file.exists(filename) ){
load(filename)
#Final Gradient
CV_df$max_grad[irow] <-
max(abs(fit_new$parameter_estimates$diagnostics$final_gradient))
#Check whether hessian matrix is positive definite
CV_df$pdHess[irow] <- fit_new$parameter_estimates$SD$pdHess
#check_fit chekcs bounds, TRUE is bad and FALSE is good
CV_df$bound_check[irow] <- (check_fit(fit_new$parameter_estimates))
CV_df$pred_nll[irow] <- fit_new$Report$pred_jnll
#Extract incides of withheld data
withheld_idx <- which(fit_new$data_list$PredTF_i == T)
#Withheld data locations, species/year indices, observed CPUE
withheld_df <- data.frame(
idx =  withheld_idx,
E_km = fit_new$spatial_list$loc_i[withheld_idx,"E_km"],
N_km = fit_new$spatial_list$loc_i[withheld_idx,"N_km"],
year = 1+fit_new$data_list$t_i[withheld_idx],
obs_density = (fit_new$data_frame$b_i/fit_new$data_frame$a_i)[withheld_idx]
)
#Extrapolation Grid locations
loc_g <- fit_new$spatial_list$loc_g
#which extrapoaltion grid cells are closest to each withheld data location
grid_idx <- RANN::nn2(query = withheld_df[,c("E_km", "N_km")],
data = loc_g,
k = 1)$nn.idx
for (jrow in 1:nrow(withheld_df)) {
withheld_df$pred_density[jrow] <-
fit_new$Report$D_gct[grid_idx[jrow], , withheld_df$year[jrow]]
}
#Calculate mean absolute error and root mean square error
CV_df$MAE[irow] = mean(abs(withheld_df$obs_density -
withheld_df$pred_density))
CV_df$RMSE[irow] = sqrt(mean((withheld_df$obs_density -
withheld_df$pred_density)^2))
#Calculate mean predicted density for calculation of RRMSE and RMAE
mean_pred_density <- mean(withheld_df$obs_density)
CV_df$RRMSE[irow] <- CV_df$RMSE[irow] / mean_pred_density
CV_df$RMAE[irow] <- CV_df$MAE[irow] / mean_pred_density
print(paste0("Done with: ", CV_df$species[irow], ", ",
ifelse(CV_df$depth[irow], "Depth, ", "No Depth, "),
"Fold Number ", CV_df$fold[irow]))
}
}
##################################################
####  Calculate summed predicted NLL across folds and Mean RRMSE across folds
##################################################
tidyr::spread(data = aggregate(pred_nll ~ species + depth,
data = CV_df,
FUN = sum),
key = "depth",
value = "pred_nll")
RMSE <- tidyr::spread(data = aggregate(RMSE ~ species + depth,
data = CV_df,
FUN = mean),
key = "depth",
value = "RMSE")
RMSE$depth_in_model <- c(F, T)[apply(X = RMSE[,-1],
MARGIN = 1,
FUN = which.min)]
RMSE
##################################################
####   Create the result object that would go into the optimizations
##################################################
N <- nrow(Extrapolation_depths)
D_gct = Index <- array(dim = c(N, ns, 24),
dimnames = list(NULL, which_spp, NULL))
for(ispp in 1:ns){
depth_in_model <- RMSE$depth_in_model[ispp]
result_dir = paste0(VAST_dir, RMSE$species[ispp],
ifelse(depth_in_model, "_depth", ""),
"/")
load(paste0(result_dir, "/fit.RData"))
D_gct[,ispp,] = fit$Report$D_gct[,1,]
Index[,ispp,] = fit$Report$Index_gctl[,1, ,1]
print(result_dir)
}
##################################################
####   Save
##################################################
save("RMSE", file = paste0(github_dir, "/data/RMSE_VAST_models.RData"))
save("D_gct", file = paste0(github_dir, "/data/fit_density.RData") )
save("Index", file = paste0(github_dir, "/data/fit_index.RData") )
ispp
ns
D_gct[1:5, , 1]
RMSE
###############################################################################
## Project:       Cross-Validation Results
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   For each CV run, calculate relative root mean squre error of
##                density predictions
###############################################################################
rm(list = ls())
##################################################
####   Import Libraries
##################################################
library(VAST)
library(RANN)
library(tidyr)
##################################################
####   Set up directores
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[3]
VAST_dir <-  "G:/Oyafuso/VAST_Runs_EFH/Single_Species/"
github_dir <- "C:/Users/zack.oyafuso/Work/GitHub/Optimal_Allocation_GoA/"
##################################
## Import Strata Allocations and spatial grid and predicted density
##################################
load(paste0(github_dir, "data/Extrapolation_depths.RData"))
which_spp <- c(
"Atheresthes stomias",
"Gadus chalcogrammus",
"Gadus macrocephalus",
"Glyptocephalus zachirus",
"Hippoglossoides elassodon",
"Hippoglossus stenolepis",
"Lepidopsetta bilineata",
"Lepidopsetta polyxystra",
"Microstomus pacificus",
"Sebastes alutus",
"Sebastes B_R",
"Sebastes brevispinis",
"Sebastes polyspinis",
"Sebastes variabilis",
"Sebastolobus alascanus",
"Anoplopoma fimbria",
"Beringraja spp.",
"Enteroctopus dofleini",
"Pleurogrammus monopterygius",
"Sebastes borealis",
# "Sebastes ruberrimus",
"Sebastes variegatus",
"Squalus suckleyi"
)
ns <- length(which_spp)
##################################################
####   Result Objects
##################################################
NFold <- 10
NTime <- 11
CV_df <- expand.grid(species = which_spp,
depth = c(T, F),
fold = 1:NFold,
stringsAsFactors = F)
CV_df[,c("max_grad", "pdHess", "bound_check", "pred_nll",
"RMSE", "RRMSE", "MAE", "RMAE")] <- NA
for (irow in (1:nrow(CV_df))[] ) {
#Load fitted object
result_dir <- paste0(VAST_dir, CV_df$species[irow],
ifelse(CV_df$depth[irow],  "_depth", ""), "/")
filename <- paste0(result_dir, "CV_", CV_df$fold[irow], "/fit.RData")
if ( file.exists(filename) ){
load(filename)
#Final Gradient
CV_df$max_grad[irow] <-
max(abs(fit_new$parameter_estimates$diagnostics$final_gradient))
#Check whether hessian matrix is positive definite
CV_df$pdHess[irow] <- fit_new$parameter_estimates$SD$pdHess
#check_fit chekcs bounds, TRUE is bad and FALSE is good
CV_df$bound_check[irow] <- (check_fit(fit_new$parameter_estimates))
CV_df$pred_nll[irow] <- fit_new$Report$pred_jnll
#Extract incides of withheld data
withheld_idx <- which(fit_new$data_list$PredTF_i == T)
#Withheld data locations, species/year indices, observed CPUE
withheld_df <- data.frame(
idx =  withheld_idx,
E_km = fit_new$spatial_list$loc_i[withheld_idx,"E_km"],
N_km = fit_new$spatial_list$loc_i[withheld_idx,"N_km"],
year = 1+fit_new$data_list$t_i[withheld_idx],
obs_density = (fit_new$data_frame$b_i/fit_new$data_frame$a_i)[withheld_idx]
)
#Extrapolation Grid locations
loc_g <- fit_new$spatial_list$loc_g
#which extrapoaltion grid cells are closest to each withheld data location
grid_idx <- RANN::nn2(query = withheld_df[,c("E_km", "N_km")],
data = loc_g,
k = 1)$nn.idx
for (jrow in 1:nrow(withheld_df)) {
withheld_df$pred_density[jrow] <-
fit_new$Report$D_gct[grid_idx[jrow], , withheld_df$year[jrow]]
}
#Calculate mean absolute error and root mean square error
CV_df$MAE[irow] = mean(abs(withheld_df$obs_density -
withheld_df$pred_density))
CV_df$RMSE[irow] = sqrt(mean((withheld_df$obs_density -
withheld_df$pred_density)^2))
#Calculate mean predicted density for calculation of RRMSE and RMAE
mean_pred_density <- mean(withheld_df$obs_density)
CV_df$RRMSE[irow] <- CV_df$RMSE[irow] / mean_pred_density
CV_df$RMAE[irow] <- CV_df$MAE[irow] / mean_pred_density
print(paste0("Done with: ", CV_df$species[irow], ", ",
ifelse(CV_df$depth[irow], "Depth, ", "No Depth, "),
"Fold Number ", CV_df$fold[irow]))
}
}
irow
for (irow in (298:nrow(CV_df))[-297] ) {
#Load fitted object
result_dir <- paste0(VAST_dir, CV_df$species[irow],
ifelse(CV_df$depth[irow],  "_depth", ""), "/")
filename <- paste0(result_dir, "CV_", CV_df$fold[irow], "/fit.RData")
if ( file.exists(filename) ){
load(filename)
#Final Gradient
CV_df$max_grad[irow] <-
max(abs(fit_new$parameter_estimates$diagnostics$final_gradient))
#Check whether hessian matrix is positive definite
CV_df$pdHess[irow] <- fit_new$parameter_estimates$SD$pdHess
#check_fit chekcs bounds, TRUE is bad and FALSE is good
CV_df$bound_check[irow] <- (check_fit(fit_new$parameter_estimates))
CV_df$pred_nll[irow] <- fit_new$Report$pred_jnll
#Extract incides of withheld data
withheld_idx <- which(fit_new$data_list$PredTF_i == T)
#Withheld data locations, species/year indices, observed CPUE
withheld_df <- data.frame(
idx =  withheld_idx,
E_km = fit_new$spatial_list$loc_i[withheld_idx,"E_km"],
N_km = fit_new$spatial_list$loc_i[withheld_idx,"N_km"],
year = 1+fit_new$data_list$t_i[withheld_idx],
obs_density = (fit_new$data_frame$b_i/fit_new$data_frame$a_i)[withheld_idx]
)
#Extrapolation Grid locations
loc_g <- fit_new$spatial_list$loc_g
#which extrapoaltion grid cells are closest to each withheld data location
grid_idx <- RANN::nn2(query = withheld_df[,c("E_km", "N_km")],
data = loc_g,
k = 1)$nn.idx
for (jrow in 1:nrow(withheld_df)) {
withheld_df$pred_density[jrow] <-
fit_new$Report$D_gct[grid_idx[jrow], , withheld_df$year[jrow]]
}
#Calculate mean absolute error and root mean square error
CV_df$MAE[irow] = mean(abs(withheld_df$obs_density -
withheld_df$pred_density))
CV_df$RMSE[irow] = sqrt(mean((withheld_df$obs_density -
withheld_df$pred_density)^2))
#Calculate mean predicted density for calculation of RRMSE and RMAE
mean_pred_density <- mean(withheld_df$obs_density)
CV_df$RRMSE[irow] <- CV_df$RMSE[irow] / mean_pred_density
CV_df$RMAE[irow] <- CV_df$MAE[irow] / mean_pred_density
print(paste0("Done with: ", CV_df$species[irow], ", ",
ifelse(CV_df$depth[irow], "Depth, ", "No Depth, "),
"Fold Number ", CV_df$fold[irow]))
}
}
tidyr::spread(data = aggregate(pred_nll ~ species + depth,
data = CV_df,
FUN = sum),
key = "depth",
value = "pred_nll")
RMSE <- tidyr::spread(data = aggregate(RMSE ~ species + depth,
data = CV_df,
FUN = mean),
key = "depth",
value = "RMSE")
RMSE$depth_in_model <- c(F, T)[apply(X = RMSE[,-1],
MARGIN = 1,
FUN = which.min)]
##################################################
####   Create the result object that would go into the optimizations
##################################################
N <- nrow(Extrapolation_depths)
D_gct = Index <- array(dim = c(N, ns, 24),
dimnames = list(NULL, which_spp, NULL))
for(ispp in 1:ns){
depth_in_model <- RMSE$depth_in_model[ispp]
result_dir = paste0(VAST_dir, RMSE$species[ispp],
ifelse(depth_in_model, "_depth", ""),
"/")
load(paste0(result_dir, "/fit.RData"))
D_gct[,ispp,] = fit$Report$D_gct[,1,]
Index[,ispp,] = fit$Report$Index_gctl[,1, ,1]
print(result_dir)
}
##################################################
####   Save
##################################################
save("RMSE", file = paste0(github_dir, "/data/RMSE_VAST_models.RData"))
save("D_gct", file = paste0(github_dir, "/data/fit_density.RData") )
save("Index", file = paste0(github_dir, "/data/fit_index.RData") )
RMSE
##################################################
####   Save
##################################################
save("RMSE", file = paste0(github_dir, "/data/RMSE_VAST_models.RData"))
save("D_gct", file = paste0(github_dir, "/data/fit_density.RData") )
save("Index", file = paste0(github_dir, "/data/fit_index.RData") )
install.packages("digest")
##################################################
####  Install a forked version of the SamplingStrata Package from
####  zoyafuso-NOAA's Github page
####
####  Import other required packages
##################################################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#Save Output
CV_constraints <- expected_CV(strata = solution$aggr_strata)
current_n <- sum(sum_stats$Allocation)
result_list <- list(solution = solution,
sum_stats = sum_stats,
CV_constraints = CV_constraints,
n = current_n)
save(list = "result_list", file = "result_list.RData")
#Set up next run by changing upper CV constraints
Run <- Run + 1
CV_constraints <- 0.95*CV_constraints + 0.1*(SS_STRS_Pop_CV[, isample])
#Create CV dataframe in the formmat of SamplingStrata
cv <- list()
for (spp in 1:ns_opt)
cv[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv[["DOM"]] <- 1
cv[["domainvalue"]] <- 1
cv <- as.data.frame(cv)
while (current_n <= c(280, 550, 820)[isample] ) {
#Set wd for output files, create a directory if it doesn"t exist yet
temp_dir = paste0(github_dir, "boat", isample, "/Str", temp_strata,
"Run", Run)
if(!dir.exists(temp_dir)) dir.create(temp_dir, recursive = T)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 300,
pops = 30,
elitism_rate = 0.1,
mut_chance = 1 / (temp_strata + 1),
nStrata = temp_strata,
showPlot = T,
writeFiles = T)
sum_stats <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
#Plot Solution
goa <- sp::SpatialPointsDataFrame(
coords = Extrapolation_depths[,c("E_km", "N_km")],
data = data.frame(Str_no = solution$framenew$STRATO) )
goa_ras <- raster::raster(x = goa,
resolution = 5)
goa_ras <- raster::rasterize(x = goa,
y = goa_ras,
field = "Str_no")
png(filename = "solution.png",
width = 5,
height = 5,
units = "in",
res = 500)
plot(goa_ras, axes = F,
col = terrain.colors(temp_strata)[sample(temp_strata)])
dev.off()
#Save Output
CV_constraints <- expected_CV(strata = solution$aggr_strata)
current_n <- sum(sum_stats$Allocation)
result_list <- list(solution = solution,
sum_stats = sum_stats,
CV_constraints = CV_constraints,
n = current_n)
save(list = "result_list", file = "result_list.RData")
#Set up next run by changing upper CV constraints
Run <- Run + 1
CV_constraints <- 0.95*CV_constraints + 0.1*(SS_STRS_Pop_CV[, isample])
#Create CV dataframe in the formmat of SamplingStrata
cv <- list()
for (spp in 1:ns_opt)
cv[[paste0("CV", spp)]] <- as.numeric(CV_constraints[spp])
cv[["DOM"]] <- 1
cv[["domainvalue"]] <- 1
cv <- as.data.frame(cv)
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
