"Current_index_ps", "STRS_index_ps"),
file = paste0(github_dir, "simulation_result.RData"))
###############################################################################
## Project:       Simulate Surveys
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Simulate a Stratified Random Survey of the Gulf of
##                Alaska Groundfish Survey Based on Current Stratifications
###############################################################################
rm(list = ls())
##################################################
####   Import Libraries
##################################################
library(readxl)
library(sp)
##################################################
####   Set up directories
##################################################
which_machine <- c('Zack_MAC' = 1, 'Zack_PC' = 2, 'Zack_GI_PC' = 3)[1]
github_dir <- paste0(c("/Users/zackoyafuso/Documents/",
"C:/Users/Zack Oyafuso/Documents/",
"C:/Users/zack.oyafuso/Work/")[which_machine],
"GitHub/Optimal_Allocation_GoA/results/")
VAST_dir <- "G:/Oyafuso/VAST_Runs_EFH/Single_Species/"
##################################################
####   Load simulation functions
##################################################
source( paste0(dirname(github_dir), "/modified_functions/sim_fns.R") )
##################################
## Import Strata Allocations and spatial grid and predicted density
##################################
load(paste0(dirname(github_dir), '/data/optimization_data.RData'))
load(paste0(dirname(github_dir), '/data/RMSE_VAST_models.RData'))
load(paste0(dirname(github_dir), '/data/Extrapolation_depths.RData'))
load(paste0(dirname(github_dir), '/data/fit_density.RData'))
load(paste0(github_dir, "Spatiotemporal_Optimization",
"/optimization_knitted_results.RData"))
GOA_allocations <- readxl::read_xlsx(
path = paste0(dirname(github_dir),
'/data/GOA 2019 stations by stratum.xlsx')
)
GOA_allocations3 <- readxl::read_xlsx(
path = paste0(dirname(github_dir),
'/data/GOA2019_ 3 boat_825_RNDM_stations.xlsx')
)
##################################
## Specify Management Districts
##################################
new_strata_labels = 1:length(unique(Extrapolation_depths$stratum))
names(new_strata_labels) <- sort(unique(Extrapolation_depths$stratum))
Extrapolation_depths$stratum_new_label <-
new_strata_labels[paste(Extrapolation_depths$stratum)]
##################################################
####   Create dataframe of effort allocations across boats
##################################################
allocations <- data.frame(Stratum = sort(unique(GOA_allocations3$stratum)),
boat3 = aggregate(id ~ stratum,
data = GOA_allocations3,
FUN = length)$id,
boat2 = c(GOA_allocations$`Number stations`,
rep(0, 5)))
allocations$boat1 <- ceiling(allocations$boat2 / 2)
allocations$boat1 <- ifelse(allocations$boat1 == 0, 0,
ifelse(allocations$boat1 == 1, 2,
allocations$boat1))
allocations <- rbind(data.frame(Stratum = 0, boat3 = 0, boat2 = 0, boat1 = 0),
allocations)
allocations$Stratum <- 1:nrow(allocations)
##################################################
####   Subset 15 strata solutions
##################################################
sol_idx <- which(settings$strata == 15)
settings <- settings[sol_idx,]
res_df <- res_df[, 1 + sol_idx]
strata_list <- strata_list[sol_idx]
##################################################
####   Result Objects
##################################################
Current_sim_mean <- Current_sim_cv <- Current_rel_bias_est <-
STRS_sim_mean <- STRS_sim_cv <- STRS_rel_bias_est <-
array(dim = c(nobs_CV, NTime, ns_all, nboats, Niters),
dimnames = list(paste0("obsCV=", obs_CV),
paste0("year_", 1:NTime),
sci_names_all,
paste0("boat_", 1:nboats),
NULL ))
Current_true_cv_array <- Current_rrmse_cv_array <-
STRS_true_cv_array <- STRS_rrmse_cv_array <-
array(dim = c(nobs_CV, NTime, ns_all, nboats),
dimnames = list(paste0("obsCV=", obs_CV),
paste0("year_", 1:NTime),
sci_names_all,
paste0("boat_", 1:nboats)))
Current_index_ps <- STRS_index_ps <-
array(dim = c(nobs_CV, NTime, ns_all, nboats, ndom, Niters),
dimnames = list(paste0("obsCV=", obs_CV),
paste0("year_", 1:NTime),
sci_names_all,
paste0("boat_", 1:nboats),
paste0("district_", 1:ndom),
NULL ))
##################################################
####   Simulate Survey
##################################################
iter = 1; ierror = 1; iboat = 1; isurvey = "STRS"
input = list(
"density" = D_gct[, , Years2Include],
"cell_areas" = Extrapolation_depths$Area_km2,
"obs_CV" = obs_CV[ierror],
"solution" = switch(
isurvey,
"Current" = Extrapolation_depths$stratum_new_label,
"STRS" = res_df[, iboat]),
"allocation" = switch(
isurvey,
"Current" = allocations[, paste0("boat", iboat)],
"STRS" = strata_list[[iboat]]$Allocation),
"true_density" = true_mean,
"true_index" = true_index,
"post_strata" = district_vals
)
true_index_district
##################################
## Create function to calcualte a STRS and output mean, CV, and relative bias
##################################
input = list(
"density" = D_gct[, , Years2Include],
"cell_areas" = Extrapolation_depths$Area_km2,
"obs_CV" = obs_CV[ierror],
"solution" = switch(
isurvey,
"Current" = Extrapolation_depths$stratum_new_label,
"STRS" = res_df[, iboat]),
"allocation" = switch(
isurvey,
"Current" = allocations[, paste0("boat", iboat)],
"STRS" = strata_list[[iboat]]$Allocation),
"true_density" = true_mean,
"true_index_district" = true_index_district,
"post_strata" = district_vals
)
#Some constants
n_cells <- dim(input$density)[1]
n_spp <-  dim(input$density)[2]
n_time <- dim(input$density)[3]
n_dom <- length(table(input$post_strata))
survey_detail <-
data.frame("Stratum" = as.integer(names(table(input$solution))),
"Nh" = as.integer(table(input$solution)),
"nh" = input$allocation)
#Assume stratum weights include untrawlabe areas
survey_detail$Wh <- survey_detail$Nh / n_cells
survey_detail$wh <- with(survey_detail, nh/Nh)
#Take strata with 0 effor allocation out
strata_to_use <- survey_detail$nh > 0
survey_detail <- survey_detail[strata_to_use, ]
#Strata Areas
strata_areas <- aggregate(cell_areas ~ solution,
FUN = sum,
data = with(input, data.frame(solution, cell_areas)))
strata_areas <- subset(strata_areas, solution %in% survey_detail$Stratum)
#Result objects
mean_density <- cv <- rel_bias <- matrix(ncol = n_spp,
nrow = n_time)
index_district <- array(dim = c(n_spp, n_time, n_dom))
for (iyear in 1:n_time) {
#Subset density df by year
sub_df <- input$density[, , iyear]
#Take a random sample based on the allocation and stratum
sample_vec <- c()
for(istrata in 1:nrow(survey_detail)) {
sample_vec <- c(sample_vec,
sample(x = which(input$solution == survey_detail$Stratum[istrata]),
size = survey_detail$nh[istrata]))
}
sampled_strata <- rep(x = survey_detail$Stratum,
times = survey_detail$nh)
#subset sub_df by which cells were chosen
sample_df <- as.data.frame(sub_df[sample_vec, ])
colnames(sample_df) <- paste0("Y", 1:n_spp)
#add observation error proportional to predicted density
sample_df <- apply(sample_df,
MARGIN = 1:2,
FUN = function(x) {
m <- x
s <- x * input$obs_CV
location <- log(m^2 / sqrt(s^2 + m^2))
shape <- sqrt(log(1 + (s^2 / m^2)))
return(rlnorm(n = 1, location, shape))
})
#Calculate STRS mean density
stmt <- paste0('aggregate(cbind(',
paste0('Y', 1:(n_spp-1), sep = ',', collapse = ''),
'Y', n_spp,
") ~ sampled_strata, data = sample_df, FUN = mean)")
sample_mean <- eval(parse(text = stmt))[, -1]
strata_mean <- sweep(x = sample_mean,
MARGIN = 1,
STATS = with(survey_detail, Wh),
FUN = '*')
STRS_mean <- colSums(strata_mean)
#Calculate STRS variance of mean density
stmt <- paste0('aggregate(cbind(',
paste0('Y', 1:(n_spp-1), sep = ',', collapse = ''),
'Y',n_spp,
") ~ sampled_strata, data = sample_df, FUN = var)")
sample_var <- eval(parse(text = stmt))[, -1]
STRS_var <- colSums(sweep(x = sample_var,
MARGIN = 1,
STATS = with(survey_detail, Wh^2 * (1 - wh) / nh),
FUN = '*'))
#Save mean and cv of estimates across species
mean_density[iyear, ] <- STRS_mean
cv[iyear, ] <- sqrt(STRS_var) / STRS_mean
#Calculate relative bias of mean estimate
rel_bias[iyear, ] <- unlist(
100 * (STRS_mean - input$true_density[, iyear]) /
input$true_density[, iyear])
#Post-stratified indices of abundance
index_df <- data.frame(Area_km2 = input$cell_areas,
stratum = input$solution,
district = input$post_strata)
index_district[, iyear, ] <-  t(
sapply(X = 1:n_spp,
FUN = function(x) {
index_cell <- index_df$Area_km2 *
sample_mean[index_df$stratum, paste0("Y", x)]
tapply(X = index_cell,
INDEX = index_df$district,
FUN = sum,
na.rm = T)
}) * 0.001 #Metric tonnes
)
}
index_district
str(index_district)
apply(X = index_district,
MARGIN = 1:2,
length)
apply(X = index_district,
MARGIN = 3,
length)
str(index_district)
str(input$true_index_district)
str(input$true_index_district)
index_district - input$true_index_district
(index_district - input$true_index_district) /
input$true_index_district
bias_index_district <- (index_district - input$true_index_district) /
input$true_index_district
bias_index_district
bias_index_district <- 100 * (index_district - input$true_index_district) /
input$true_index_district
str(bias_index_district)
###############################################################################
## Project:       Simulate Surveys
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Simulate a Stratified Random Survey of the Gulf of
##                Alaska Groundfish Survey Based on Current Stratifications
###############################################################################
rm(list = ls())
##################################################
####   Import Libraries
##################################################
library(readxl)
library(sp)
##################################################
####   Set up directories
##################################################
which_machine <- c('Zack_MAC' = 1, 'Zack_PC' = 2, 'Zack_GI_PC' = 3)[1]
github_dir <- paste0(c("/Users/zackoyafuso/Documents/",
"C:/Users/Zack Oyafuso/Documents/",
"C:/Users/zack.oyafuso/Work/")[which_machine],
"GitHub/Optimal_Allocation_GoA/results/")
VAST_dir <- "G:/Oyafuso/VAST_Runs_EFH/Single_Species/"
##################################################
####   Load simulation functions
##################################################
source( paste0(dirname(github_dir), "/modified_functions/sim_fns.R") )
##################################
## Import Strata Allocations and spatial grid and predicted density
##################################
load(paste0(dirname(github_dir), '/data/optimization_data.RData'))
load(paste0(dirname(github_dir), '/data/RMSE_VAST_models.RData'))
load(paste0(dirname(github_dir), '/data/Extrapolation_depths.RData'))
load(paste0(dirname(github_dir), '/data/fit_density.RData'))
load(paste0(github_dir, "Spatiotemporal_Optimization",
"/optimization_knitted_results.RData"))
GOA_allocations <- readxl::read_xlsx(
path = paste0(dirname(github_dir),
'/data/GOA 2019 stations by stratum.xlsx')
)
GOA_allocations3 <- readxl::read_xlsx(
path = paste0(dirname(github_dir),
'/data/GOA2019_ 3 boat_825_RNDM_stations.xlsx')
)
##################################
## Specify Management Districts
##################################
new_strata_labels = 1:length(unique(Extrapolation_depths$stratum))
names(new_strata_labels) <- sort(unique(Extrapolation_depths$stratum))
Extrapolation_depths$stratum_new_label <-
new_strata_labels[paste(Extrapolation_depths$stratum)]
##################################################
####   Create dataframe of effort allocations across boats
##################################################
allocations <- data.frame(Stratum = sort(unique(GOA_allocations3$stratum)),
boat3 = aggregate(id ~ stratum,
data = GOA_allocations3,
FUN = length)$id,
boat2 = c(GOA_allocations$`Number stations`,
rep(0, 5)))
allocations$boat1 <- ceiling(allocations$boat2 / 2)
allocations$boat1 <- ifelse(allocations$boat1 == 0, 0,
ifelse(allocations$boat1 == 1, 2,
allocations$boat1))
allocations <- rbind(data.frame(Stratum = 0, boat3 = 0, boat2 = 0, boat1 = 0),
allocations)
allocations$Stratum <- 1:nrow(allocations)
##################################################
####   Subset 15 strata solutions
##################################################
sol_idx <- which(settings$strata == 15)
settings <- settings[sol_idx,]
res_df <- res_df[, 1 + sol_idx]
strata_list <- strata_list[sol_idx]
##################################################
####   Result Objects
##################################################
Current_sim_mean <- Current_sim_cv <- Current_rel_bias_est <-
STRS_sim_mean <- STRS_sim_cv <- STRS_rel_bias_est <-
array(dim = c(nobs_CV, NTime, ns_all, nboats, Niters),
dimnames = list(paste0("obsCV=", obs_CV),
paste0("year_", 1:NTime),
sci_names_all,
paste0("boat_", 1:nboats),
NULL ))
Current_true_cv_array <- Current_rrmse_cv_array <-
STRS_true_cv_array <- STRS_rrmse_cv_array <-
array(dim = c(nobs_CV, NTime, ns_all, nboats),
dimnames = list(paste0("obsCV=", obs_CV),
paste0("year_", 1:NTime),
sci_names_all,
paste0("boat_", 1:nboats)))
# Current_index_ps <- STRS_index_ps <-
#   array(dim = c(nobs_CV, NTime, ns_all, nboats, ndom, Niters),
#         dimnames = list(paste0("obsCV=", obs_CV),
#                         paste0("year_", 1:NTime),
#                         sci_names_all,
#                         paste0("boat_", 1:nboats),
#                         paste0("district_", 1:ndom),
#                         NULL ))
##################################################
####   Simulate Survey
##################################################
iter = 1; ierror = 1; iboat = 1; isurvey = "STRS"
sim_survey <-
do_STRS(
input = list(
"density" = D_gct[, , Years2Include],
"cell_areas" = Extrapolation_depths$Area_km2,
"obs_CV" = obs_CV[ierror],
"solution" = switch(
isurvey,
"Current" = Extrapolation_depths$stratum_new_label,
"STRS" = res_df[, iboat]),
"allocation" = switch(
isurvey,
"Current" = allocations[, paste0("boat", iboat)],
"STRS" = strata_list[[iboat]]$Allocation),
"true_density" = true_mean,
"true_index_district" = true_index_district,
"post_strata" = district_vals
)
)
Current_rel_bias_index_district <- STRS_rel_bias_index_ps <-
array(dim = c(nobs_CV, NTime, ns_all, nboats, ndom, Niters),
dimnames = list(paste0("obsCV=", obs_CV),
paste0("year_", 1:NTime),
sci_names_all,
paste0("boat_", 1:nboats),
paste0("district_", 1:ndom),
NULL ))
## Record results based on whether it's current or optimized surveys
stmt <- paste0(isurvey, "_sim_mean",
"[ierror, , , iboat, iter] = sim_survey$mean_denisty")
eval(parse(text = stmt))
stmt <- paste0(isurvey, "_sim_cv",
"[ierror, , , iboat, iter] = sim_survey$cv")
eval(parse(text = stmt))
stmt <- paste0(isurvey, "_rel_bias_est",
"[ierror, , , iboat, iter] = sim_survey$rel_bias")
eval(parse(text = stmt))
stmt <- paste0(isurvey,
"rel_bias_index_district[ierror, , , iboat, , iter]",
" <- sim_survey$index_district")
eval(parse(text = stmt))
stmt <- paste0(isurvey,
"_rel_bias_index_district[ierror, , , iboat, , iter]",
" <- sim_survey$index_district")
eval(parse(text = stmt))
Current_rel_bias_index_district <- STRS_rel_bias_index_district <-
array(dim = c(nobs_CV, NTime, ns_all, nboats, ndom, Niters),
dimnames = list(paste0("obsCV=", obs_CV),
paste0("year_", 1:NTime),
sci_names_all,
paste0("boat_", 1:nboats),
paste0("district_", 1:ndom),
NULL ))
stmt <- paste0(isurvey,
"_rel_bias_index_district[ierror, , , iboat, , iter]",
" <- sim_survey$index_district")
eval(parse(text = stmt))
stmt <- paste0(isurvey,
"_rel_bias_index_district[ierror, , , iboat, , iter]",
" <- sim_survey$bias_index_district")
eval(parse(text = stmt))
##################################################
####   Set up directories based on whether the optimization is being conducted
####        on a multi-species or single-species level
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[1]
###############################################################################
## Project:       Spatiotemporal Survey Optimization
## Author:        Zack Oyafuso (zack.oyafuso@noaa.gov)
## Description:   Conduct SamplingStrata R package multispecies stratified
##                survey optimization
###############################################################################
rm(list = ls())
##################################################
####   Set up directories based on whether the optimization is being conducted
####        on a multi-species or single-species level
##################################################
which_machine <- c("Zack_MAC" = 1, "Zack_PC" = 2, "Zack_GI_PC" = 3)[1]
which_method = c("Multi_Species" = 1,
"Single_Species" = 2)[2]
github_dir <- paste0(c("/Users/zackoyafuso/Documents",
"C:/Users/Zack Oyafuso/Documents",
"C:/Users/zack.oyafuso/Work")[which_machine],
"/GitHub/Optimal_Allocation_GoA/results/",
c("Spatiotemporal_Optimization/",
"Single_Species_Optimization/")[which_method])
##################################################
####  Install a forked version of the SamplingStrata Package from
####  zoyafuso-NOAA's Github page
####
####  Import other required packages
##################################################
library(devtools)
devtools::install_github(repo = "zoyafuso-NOAA/SamplingStrata")
library(SamplingStrata)
library(sp)
library(RColorBrewer)
library(raster)
##################################################
####   Load Data
####   Load Population CVs for use in the thresholds
##################################################
load(paste0(dirname(dirname(github_dir)), "/data/optimization_data.RData"))
load(paste0(dirname(dirname(github_dir)), "/data/Extrapolation_depths.RData"))
if (which_method == 1) {
load(paste0(dirname(github_dir), "/Population_Variances.RData"))
SRS_Pop_CV <- SRS_Pop_CV[spp_idx_opt, ]
}
##################################################
####   Some Constants
##################################################
stratas <- switch(which_method,
"1" = stratas,
"2" =  10)
NStrata <- length(stratas)
ns_opt <- c(ns_opt, 1)[which_method]
which_species <- switch(which_method,
"1" = 1:ns_opt,
"2" = spp_idx_eval[1])
sci_names_all
spp_idx_eval[2]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
spp_idx_eval[5]
sci_names_all[16]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
CV_constraints
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
